<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HWQ.Entity4</name>
    </assembly>
    <members>
        <member name="T:HWQ.Entity.ActionTag.ATag">
            <summary>
            [作废] 智能标签
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_Inherit">
            <summary>
            继承的字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_Description">
            <summary>
            描述标记
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_ParentValue">
            <summary>
            父值标记
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_Value">
            <summary>
            值标记
            （一个模型只能存在一个值标记）
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_PrimaryKey">
            <summary>
            关键值标记
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_Identity">
            <summary>
            实体种子标记
            （一个模型只能存在一个实体种子标记）
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_Fixed">
            <summary>
            固定字段标记
            （一个模型只能存在一个固定字段标记）
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_Disable">
            <summary>
            是否无效标记
            （一个模型只能存在一个是否无效标记）
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_RelationModel">
            <summary>
            关联的模型标记
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_RelationDoubleFace">
            <summary>
            关联的双面值标记
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_ForeignKey">
            <summary>
            外键标记
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_SysField">
            <summary>
            系统字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_ModelType">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.ActionTag.ATag.Doc_Locale">
            <summary>
            本地化标记，说明此字段的内容是多语言的。
            </summary>
        </member>
        <member name="T:HWQ.Entity.ActionTag.SmartTag">
            <summary>
            [作废] 智能标签集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.ActionTag.SmartTag.Add(System.String)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:HWQ.Entity.Common.DataModelElement">
            <summary>
            [作废] 公共实体元素,不可实例化
            </summary>
        </member>
        <member name="F:HWQ.Entity.Common.DataModelElement.m_InheritModelName">
            <summary>
            继承的模型名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Common.DataModelElement.m_Locale">
            <summary>
            本地化语言
            </summary>
        </member>
        <member name="F:HWQ.Entity.Common.DataModelElement.m_ModelNamespace">
            <summary>
            模型命名空间
            </summary>
        </member>
        <member name="F:HWQ.Entity.Common.DataModelElement.m_ModelName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Common.DataModelElement.m_ModelDescription">
            <summary>
            模型描述
            </summary>
        </member>
        <member name="F:HWQ.Entity.Common.DataModelElement.m_Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:HWQ.Entity.Common.DataModelElement.m_ModelType">
            <summary>
            模型类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.Common.DataModelElement.m_FieldDnas">
            <summary>
            模型 DNA 字段集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.Common.DataModelElement.m_TableName">
            <summary>
            对应的表名
            </summary>
        </member>
        <member name="F:HWQ.Entity.Common.DataModelElement.m_IdentityRule">
            <summary>
            id 规则
            </summary>
        </member>
        <member name="F:HWQ.Entity.Common.DataModelElement.m_Keys">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:HWQ.Entity.Common.DataModelElement.m_IncludeSysField">
            <summary>
            包含系统字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.Common.DataModelElement.m_ChildModelElement">
            <summary>
            子关联清单
            </summary>
        </member>
        <member name="M:HWQ.Entity.Common.DataModelElement.#ctor(System.String)">
            <summary>
            模型元素构造方法
            </summary>
            <param name="modelName">模型名称s</param>
        </member>
        <member name="M:HWQ.Entity.Common.DataModelElement.#ctor(System.String,HWQ.Entity.EntityModel.ModelTypes)">
            <summary>
            模型元素构造方法
            </summary>
            <param name="modelName">模型名称</param>
            <param name="modelType">模型类型</param>
        </member>
        <member name="M:HWQ.Entity.Common.DataModelElement.Equals(System.Object)">
            <summary>
            指定的 obj 与当前的 Model 是否相同
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Common.DataModelElement.GetStamrtTagForFields(System.String)">
            <summary>
            获取智能标签的字段
            </summary>
            <param name="aTag">智能标记</param>
            <returns>字段元素集合</returns>
        </member>
        <member name="M:HWQ.Entity.Common.DataModelElement.ContainsSmartTag(System.String)">
            <summary>
            字段中是否包含相应的智能标签
            </summary>
            <param name="aTag"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Common.DataModelElement.GetStamrtTagForField(System.String)">
            <summary>
            获取首个智能标签的字段
            </summary>
            <param name="aTag">智能标记</param>
            <returns>字段元素</returns>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.PrimaryKey">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.Keys">
            <summary>
            关键字集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.Locale">
            <summary>
            本地化语言
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.ChildModelElement">
            <summary>
            子元素清单
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.InheritFieldName">
            <summary>
            继承的字段名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.ModelName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.ClassId">
            <summary>
            类编号
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.ModelNamespace">
            <summary>
            模型的命名空间
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.ModelDescription">
            <summary>
            模型描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.ModelType">
            <summary>
            模型类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.IdentityRule">
            <summary>
            ID 规则
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.FieldDnas">
            <summary>
            字段元素集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.InheritModel">
            <summary>
            继承的模型名称
            </summary>
        </member>
        <member name="M:HWQ.Entity.Common.DataModelElement.IsInhert">
            <summary>
            是否为继承元素
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.Common.DataModelElement.IncludeSysField">
            <summary>
            包含系统字段
            </summary>
        </member>
        <member name="T:HWQ.Entity.Common.DataModelSetNodeCommon">
            <summary>
            [作废]数据节点元素
            </summary>
        </member>
        <member name="T:HWQ.Entity.Configuration.DecipherConfig">
            <summary>
            数据操作配置
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.DecipherConfig.Name">
            <summary>
            配置名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.DecipherConfig.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.DecipherConfig.EnableHttpContent">
            <summary>
            激活 HttpContent 模式， ASP.net 模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.DecipherConfig.EnableModelIdentity">
            <summary>
            激活实体自动编号
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.DecipherConfig.IdentityFactoryName">
            <summary>
            自动编号处理机
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.DecipherConfig.EnabledTraceOperate">
            <summary>
            激活监控操作
            </summary>
        </member>
        <member name="T:HWQ.Entity.Configuration.IdentityOverrideConfig">
            <summary>
            自动 ID 配置
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.IdentityOverrideConfig.OldTable">
            <summary>
            旧表
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.IdentityOverrideConfig.OldField">
            <summary>
            旧表的表名
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.IdentityOverrideConfig.NowTable">
            <summary>
            新表
            </summary>
        </member>
        <member name="T:HWQ.Entity.Configuration.IdentityConfigList">
            <summary>
            自动 ID 配置
            </summary>
        </member>
        <member name="T:HWQ.Entity.Configuration.IdentityFactoryMode">
            <summary>
            自动编号控制....默认是单一模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.Configuration.IdentityFactoryMode.Single">
            <summary>
            单一模式(只有一套数据库)
            </summary>
        </member>
        <member name="F:HWQ.Entity.Configuration.IdentityFactoryMode.Share">
            <summary>
            共享模式(多个程序公用一个自动递增控制)
            </summary>
        </member>
        <member name="T:HWQ.Entity.Configuration.IdentityFactoryConfig">
            <summary>
            自动编号工厂的配置文件
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.IdentityFactoryConfig.Mode">
            <summary>
            单独数据库模式.
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.IdentityFactoryConfig.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.IdentityFactoryConfig.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.IdentityFactoryConfig.ProviderName">
            <summary>
            
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.IdentityFactoryConfig.BufferSize">
            <summary>
            共享模式下, 获取自动递增的序号集数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.ModelConfiguration.IdentityConfigs">
            <summary>
            数据连接配置集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.ModelConfiguration.IdentityFactoryConfigs">
            <summary>
            
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.ModelConfiguration.DecipherConfigs">
            <summary>
            数据连接配置集合
            </summary>
        </member>
        <member name="T:HWQ.Entity.Configuration.ModelConfigFormats">
            <summary>
            文件格式. 默认未加密, AES 加密
            </summary>
        </member>
        <member name="F:HWQ.Entity.Configuration.ModelConfigFormats.Default">
            <summary>
            默认模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.Configuration.ModelConfigFormats.AES">
            <summary>
            加密
            </summary>
        </member>
        <member name="T:HWQ.Entity.Configuration.ModelConfigurationManager">
            <summary>
            提供对客户端应用程序配置文件的访问。
            </summary>
        </member>
        <member name="F:HWQ.Entity.Configuration.ModelConfigurationManager.m_FileFormat">
            <summary>
            文件格式
            </summary>
        </member>
        <member name="F:HWQ.Entity.Configuration.ModelConfigurationManager.m_Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.ModelConfigurationManager.FileFormat">
            <summary>
            文件格式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Configuration.ModelConfigurationManager.Passwod">
            <summary>
            密码
            </summary>
        </member>
        <member name="M:HWQ.Entity.Configuration.ModelConfigurationManager.AESDecrypt(System.Byte[],System.String)">
            <summary>
            AES 解密(高级加密标准，是下一代的加密算法标准，速度快，安全级别高，目前 AES 标准的一个实现是 Rijndael 算法)
            </summary>
            <param name="decryptData">待解密密文</param>
            <param name="decryptKey">解密密钥</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Configuration.ModelConfigurationManager.OpenConfiguration(System.String)">
            <summary>
            打开配置文件
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Configuration.ModelConfigurationManager.ProInentityFactoryConfig(System.Xml.XmlElement,HWQ.Entity.Configuration.ModelConfiguration)">
            <summary>
            处理 identityFactoryConfigs 节点
            </summary>
            <param name="xRoot"></param>
            <param name="mc"></param>
        </member>
        <member name="M:HWQ.Entity.Configuration.ModelConfigurationManager.ProDecipherConfig(System.Xml.XmlElement,HWQ.Entity.Configuration.ModelConfiguration)">
            <summary>
            处理 decipherConfigs 节点
            </summary>
            <param name="xRoot"></param>
            <param name="mc"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.CommandFactory.SqlServerCommandFactory.CreateSelect(System.Data.Common.DbCommand,HWQ.Entity.LightModels.LightModelFilter,HWQ.Entity.Decipher.CommandFactory.ModelType)">
            <summary>
            创建查询的命令
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.CommandFactory.SqlServerCommandFactory.GetSqlWhere3(HWQ.Entity.LightModels.LightModelFilter,System.Data.Common.DbCommand,System.Int32)">
            <summary>
            获取 T-SQL 预计的 Where 语句
            </summary>
            <param name="filter">实体模型的筛选条件</param>
            <param name="command"></param>
            <param name="tempNum"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.CommandFactory.SqlServerCommandFactory.GetConditionString(HWQ.Entity.LightModels.LightModelFilter,HWQ.Entity.Filter.ConditionGroup,System.Text.StringBuilder,System.Data.Common.DbCommand,System.Int32,HWQ.Entity.Filter.ExprTypes)">
            <summary>
            获取条件的连接字符串
            </summary>
            <param name="filter"></param>
            <param name="conditionGroup"></param>
            <param name="sb"></param>
            <param name="command"></param>
            <param name="n"></param>
            <param name="exprType"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.CommandFactory.SqlServerCommandFactory.GetSelectInToString(System.Text.StringBuilder,System.Data.Common.DbCommand,System.String,HWQ.Entity.Filter.ConditionElement)">
            <summary>
            In 语句
            </summary>
            <param name="sb"></param>
            <param name="modelElem"></param>
            <param name="cElem"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.CommandFactory.SqlServerCommandFactory.GetSqlLock(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取锁
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.CommandFactory.SqlServerCommandFactory.GetCommonForTSqlForm(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            构造 TSql 的 Form 子句
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.CommandFactory.SqlServerCommandFactory.DeleteCommand(System.Data.Common.DbCommand,HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            创建删除命令
            </summary>
            <param name="command"></param>
            <param name="filter"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.DecipherFilter.GetDeleteFormSysModeString(HWQ.Entity.EntityModel.IModel)">
            <summary>
            按系统模式，并不删除数据，而是做标记
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.DecipherFilter.GetSelectCommandByMTM(HWQ.Entity.EntityModel.IModel,HWQ.Entity.Filter.ModelFilter,System.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            多对多的构造方法
            </summary>
            <param name="model"></param>
            <param name="filter"></param>
            <param name="command"></param>
            <param name="sysMode"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.DecipherFilter.GetSelectFilter2(HWQ.Entity.Filter.ModelFilter,System.Collections.Generic.SortedList{System.String,HWQ.Entity.Filter.ConditionElement},System.Boolean)">
             <summary>
            
             </summary>
             <param name="filter"></param>
             <param name="sysMode"></param>
             <returns></returns>
             <remarks>
             1.分析出变量的数量
             2.改变重复的名称
             </remarks>
        </member>
        <member name="M:HWQ.Entity.Decipher.DecipherFilter.GetFromByMTM(HWQ.Entity.Common.DataModelElement,HWQ.Entity.Common.DataModelElement)">
            <summary>
            多对多的关系
            </summary>
            <param name="modelElem"></param>
            <param name="childElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.DecipherFilter.GetCondition2(HWQ.Entity.Filter.ConditionGroup,System.Text.StringBuilder,System.Collections.Generic.SortedList{System.String,HWQ.Entity.Filter.ConditionElement},HWQ.Entity.Common.DataModelElement)">
            <summary>
            构造一条逻辑运算式
            </summary>
            <param name="conditionGroup"></param>
            <param name="sb"></param>
            <param name="modelElem"></param>
            <remarks>Name = @Name</remarks>
        </member>
        <member name="M:HWQ.Entity.Decipher.DecipherFilter.GetUpdateStringOnlyValueChange(HWQ.Entity.EntityModel.IModel,HWQ.Entity.EntityModel.ModelFieldArray@,System.Boolean)">
            <summary>
            只更新值变化的字段
            </summary>
            <param name="model"></param>
            <param name="modelFields"></param>
            <param name="sysMode"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.DecipherFilter.GetIdentityFieldParam(System.String,System.Data.SqlClient.SqlParameterCollection)">
            <summary>
            获取唯一的名称
            </summary>
            <param name="fieldParamName"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Decipher.DoubleFaceBuffer">
             <summary>
            
             </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.DoubleFaceBuffer.DFaceBuffer">
            <summary>
            双面值的缓冲区
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.HDP_Delete">
             <summary>
            
             </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Delete.SEND_FIELDS">
            <summary>
            传送的属性集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Delete.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Delete.GetBitData">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Delete.SetBitData(System.Byte[])">
             <summary>
            
             </summary>
             <param name="bytes"></param>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.HttpIdentityFactory">
            <summary>
            Http 客户单使用的自动ID工厂
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpIdentityFactory.GetNewIdentity(System.String)">
            <summary>
            获取表的自动递增 ID
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpIdentityFactory.GetNewIdentity(System.String,System.String)">
            <summary>
            获取自动递增值
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpIdentityFactory.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.HDP_Identity">
            <summary>
            获取新自动编号ID
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Identity.SEND_FIELDS">
            <summary>
            传送的属性集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Identity.#ctor">
            <summary>
            获取新自动编号ID
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Identity.GetBitData">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Identity.SetBitData(System.Byte[])">
             <summary>
            
             </summary>
             <param name="bytes"></param>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.HDP_Exception">
            <summary>
            异常的数据包
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Exception.SEND_FIELDS">
            <summary>
            传送的属性集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Exception.GetBitData">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Exception.SetBitData(System.Byte[])">
             <summary>
            
             </summary>
             <param name="bytes"></param>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Filter.m_CommandName">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Filter.m_ModelFullName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Filter.m_Joins">
            <summary>
            关联查询
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.TSql">
            <summary>
            最原始的单独 T-SQL 语句
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.Limit">
            <summary>
            分页
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.LimitMaxRows">
            <summary>
            每页显示的记录数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.LimitStartRowIndex">
            <summary>
            开始记录的位置
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.Percent">
            <summary>
            百分比
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.ReturnType">
            <summary>
            返回的对象类型,默认 DataTable
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.Fields">
            <summary>
            只返回的字段
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.CondElems">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.Joins">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.Top">
            <summary>
            返回的记录数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.CommandName">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.ModelFullName">
            <summary>
            模型的全名
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.TSqlWhere">
            <summary>
            T-Sql 的 Where 查询子句
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Filter.TOrderBy">
            <summary>
            T-Sql 的 Order by 排序子句
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Filter.SetFields(System.String[])">
            <summary>
            获取
            </summary>
            <param name="fields"></param>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.HDP_GetDataTable">
            <summary>
            获取 DataTable 数据
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_GetDataTable.SEND_FIELDS">
            <summary>
            传送的属性集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_GetDataTable.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_GetDataTable.GetBitData">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_GetDataTable.SetBitData(System.Byte[])">
             <summary>
            
             </summary>
             <param name="bytes"></param>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.HDP_Insert">
            <summary>
            插入实体
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Insert.SEND_FIELDS">
            <summary>
            传送的属性集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Insert.SetFields(System.String[])">
            <summary>
            获取
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Insert.GetBitData">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Insert.SetBitData(System.Byte[])">
             <summary>
            
             </summary>
             <param name="bytes"></param>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Login.SEND_FIELDS">
            <summary>
            传送的属性集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Login.GetBitData">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Login.SetBitData(System.Byte[])">
             <summary>
            
             </summary>
             <param name="bytes"></param>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Model.TYPE">
            <summary>
            [Type:3]网络实体
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Model.#ctor">
            <summary>
            网络实体的构造方法
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_ReturnDataTable.TYPE">
            <summary>
            [Type:2]
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_ReturnDataTable.RowCount">
            <summary>
            返回的数据通道的记录数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_ReturnDataTable.Fields">
            <summary>
            DataTable 的字段集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_ReturnDataTable.FieldTypes">
            <summary>
            DataTable 的数据类型
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_ReturnDataTable.#ctor">
            <summary>
            返回的数据包
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_ReturnDataTable.SetFieldTypes(System.String[])">
            <summary>
            DataTable 的字段类型
            </summary>
            <param name="fieldTypes"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_ReturnDataTable.GetFieldTypes">
            <summary>
            获取字段的数据类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_ReturnDataTable.SetFields(System.String[])">
            <summary>
            设置字段的数据类型
            </summary>
            <param name="fields"></param>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_ReturnDelete.TYPE">
             <summary>
            
             </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_ReturnDelete.SEND_FIELDS">
             <summary>
            
             </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_ReturnDelete.EffectCount">
            <summary>
            自动 ID
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_ReturnDelete.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.HDP_ReturnInsert">
             <summary>
            
             </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_ReturnInsert.TYPE">
             <summary>
            
             </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_ReturnInsert.SEND_FIELDS">
             <summary>
            
             </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_ReturnInsert.Identity">
            <summary>
            自动 ID
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_ReturnInsert.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_ReturnUpdate.TYPE">
             <summary>
            
             </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_ReturnUpdate.SEND_FIELDS">
             <summary>
            
             </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_ReturnUpdate.Identity">
            <summary>
            自动 ID
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_ReturnUpdate.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.HDP_TestInt">
            <summary>
            测试类
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_TestInt.SEND_FIELDS">
            <summary>
            传送的属性集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_TestInt.#ctor">
            <summary>
            测试类
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_TestInt.GetBitData">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_TestInt.SetBitData(System.Byte[])">
             <summary>
            
             </summary>
             <param name="bytes"></param>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.HDP_Tran">
            <summary>
            事务
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Tran.TranTypes.Begin">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Tran.TranTypes.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Tran.TranTypes.Rollback">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Tran.SEND_FIELDS">
            <summary>
            传送的属性集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Tran.#ctor">
            <summary>
            事务的数据包
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Tran.Create(HWQ.Entity.Decipher.Http.HDP_Tran.TranTypes)">
            <summary>
            创建一个事务数据包
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Tran.GetBitData">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Tran.SetBitData(System.Byte[])">
             <summary>
            
             </summary>
             <param name="bytes"></param>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Update.SEND_FIELDS">
            <summary>
            传送的属性集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HDP_Update.UpdateFields">
            <summary>
            需要更新的字段
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Update.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Update.SetUpdateFields(System.String[])">
            <summary>
            获取
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Update.GetBitData">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Update.SetBitData(System.Byte[])">
             <summary>
            
             </summary>
             <param name="bytes"></param>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.HttpDecipher">
            <summary>
            HTTP 协议的 DbDecipher 客户端
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HttpDecipher.ConnectionString">
            <summary>
            连接字符串:http://localhost/a.Model
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.#ctor">
            <summary>
            HTTP 协议的 HttpDecipher 构造方法 
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.InitNet">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.InitHeaders">
            <summary>
            初始化 请求头 模拟 IE6
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher._ConverTable(System.Collections.Generic.List{HWQ.Entity.Net.NetDataPack})">
            <summary>
            NetDataPack 网络数据包转换为 DataTable
            </summary>
            <param name="packs"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.ProBufferData(System.Byte[])">
            <summary>
            处理接收到的数据，把 byte 据转换为 NetDataPack 对象
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.SelectToOneModel``1(HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="filter"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.SelectToOneModel(HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <param name="filter"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.GetDataTable(System.String[],HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <param name="fields"></param>
             <param name="filter"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.GetDataTable(HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <param name="filter"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.GetDataTable(System.String)">
             <summary>
            
             </summary>
             <param name="sql"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.SelectModels``1(HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="filter"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.SelectModels(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            选择实体
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.SelectCount(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按筛选条件返回记录数量
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.InsertModel(System.Object)">
            <summary>
            插入实体
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.UpdateModels(System.Object,HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            更新实体
            </summary>
            <param name="model"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.UpdateModelProps(System.Object,System.String[])">
            <summary>
            更新实体的某个属性
            </summary>
            <param name="model"></param>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.DeleteModels(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按条件删除实体
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.BeginTransaction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.TransactionCommit">
            <summary>
            事务提交
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpDecipher.TransactionRollback">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.HDP_Select">
             <summary>
            
             </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Http.HDP_Select.SEND_FIELDS">
            <summary>
            传送的属性集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Select.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Select.GetBitData">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HDP_Select.SetBitData(System.Byte[])">
             <summary>
            
             </summary>
             <param name="bytes"></param>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.HttpDecipherConfig">
            <summary>
            Http 服务器配置
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HttpDecipherConfig.CommonConnectionString">
            <summary>
            常规链接字符串
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HttpDecipherConfig.CommonDecipherT">
            <summary>
            常规的数据操作类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HttpDecipherConfig.DecipherT">
            <summary>
            DbDecipher 对象类型，例如：OleDbDecipher,SqlServer8Decipher 
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HttpDecipherConfig.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.HttpServerDecipher">
             <summary>
            
             </summary>
             <remarks>
             <httpHandlers>
                 <add verb="*" path="*.model" type="HWQ.Entity.Decipher.Http.HttpServerDecipher, HWQ.Entity4, Version=3.13.1.144, Culture=neutral, PublicKeyToken=null" />
             </httpHandlers> 
             </remarks>
        </member>
        <member name="P:HWQ.Entity.Decipher.Http.HttpServerDecipher.IsReusable">
             <summary>
            
             </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpServerDecipher.ProcessRequest(System.Web.HttpContext)">
            <summary>
            处理请求的信息
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpServerDecipher.ProPack(System.Web.HttpContext,System.Collections.Generic.List{HWQ.Entity.Net.NetDataPack})">
            <summary>
            处理数据包
            </summary>
            <param name="context"></param>
            <param name="packs"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpServerDecipher.onGetIdentity(System.Web.HttpContext,HWQ.Entity.Decipher.Http.HDP_Identity)">
            <summary>
            获取 表的自动编号
            </summary>
            <param name="content"></param>
            <param name="pack"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpServerDecipher.onGetDataTable(System.Web.HttpContext,HWQ.Entity.Decipher.Http.HDP_GetDataTable)">
             <summary>
            
             </summary>
             <param name="context"></param>
             <param name="pack"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpServerDecipher.SendDataTable(System.Web.HttpContext,System.Data.DataTable,System.Byte)">
            <summary>
            发送 DataTable 给客户端
            </summary>
            <param name="context"></param>
            <param name="table"></param>
            <param name="cmdTag"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Http.HttpServerDecipher.ProBufferData(System.Byte[])">
            <summary>
            处理接收到的数据，把 byte 据转换为 NetDataPack 对象
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Http.IHttpDataPack">
            <summary>
            IHttpDataPack 数据包接口
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.DbDecipher">
            <summary>
            数据库操作的公共库
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModelAll``1">
            <summary>
            删除指定模型的所有记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModelAll(System.String)">
            <summary>
            删除指定模型的所有记录
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModel(System.Object)">
            <summary>
            删除指定模型
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModels(System.Type,System.String)">
            <summary>
            按条件删除集合
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhere"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModels(System.Type,System.String,System.Object)">
            <summary>
            按条件删除集合
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModels(System.Type,System.String,System.Object,System.Object)">
            <summary>
            按条件删除集合
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModels(System.Type,System.String,System.Object,System.Object,System.Object)">
            <summary>
            按条件删除集合
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModels(System.Type,System.String,System.Object[])">
            <summary>
            按条件删除集合
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModels(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按条件删除指定模型的集合
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModels(HWQ.Entity.LightModels.LModelElement,System.Collections.Generic.IList{HWQ.Entity.Filter.ConditionElement})">
            <summary>
            删除条件实体
            </summary>
            <param name="modelElem"></param>
            <param name="conditionList"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModelByPk``1(System.Object)">
            <summary>
            按关键字删除模型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValue"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModelByPk(System.String,System.Object)">
            <summary>
            按关键字删除模型
            </summary>
            <param name="modelName"></param>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModelByPk(System.Type,System.Object)">
            <summary>
            按关键字删除模型
            </summary>
            <param name="modelT"></param>
            <param name="pkValue"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModelsIn(System.Type,System.String,System.Collections.IList)">
            <summary>
            按 in 语句删除
            </summary>
            <param name="modelT"></param>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExecuteScalar(System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。所有其他的列和行将被忽略。
            </summary>
            <param name="tSql"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExecuteScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。所有其他的列和行将被忽略。
            </summary>
            <param name="tSql"></param>
            <param name="dbParams"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。所有其他的列和行将被忽略。
            </summary>
            <param name="commandType"></param>
            <param name="tSql"></param>
            <param name="dbParams"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExecuteScalar``1(System.String)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。所有其他的列和行将被忽略。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSql"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExecuteScalar``1(System.String,System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。所有其他的列和行将被忽略。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlForamt"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExecuteScalar(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。所有其他的列和行将被忽略。
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExecuteScalar``1(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。所有其他的列和行将被忽略。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.FillViewData(System.Object)">
            <summary>
            填充视图的数据
            </summary>
            <param name="model">实体</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.FillViewsData(System.Collections.IList)">
            <summary>
            填充视图集合
            </summary>
            <param name="models"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DataTableLoadData(System.Data.DataTable,HWQ.Entity.LightModels.LModelReader)">
            <summary>
            数据表加载数据
            </summary>
            <param name="table"></param>
            <param name="reader"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetViewTable(System.String[],System.String[],HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取视图表，字段中包含视图字段
            </summary>
            <param name="dbFields">普通字段</param>
            <param name="viewFields">视图字段</param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetViewTable(System.String[],HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取视图表，字段中包含视图字段
            </summary>
            <param name="fields"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetViewTable(System.Type,System.String[],System.String)">
            <summary>
            获取视图表
            </summary>
            <param name="modelT"></param>
            <param name="fields"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetViewTable(System.Type,System.String[],System.String,System.String[])">
            <summary>
            获取视图表
            </summary>
            <param name="modelT"></param>
            <param name="fields"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetViewTable(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取视图表
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTableJoin(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTableJoin(System.String[],System.Type,System.Type,HWQ.Entity.LightModels.JoinTypes,System.String,System.String)">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <param name="fields"></param>
            <param name="headT"></param>
            <param name="itemT"></param>
            <param name="joinType"></param>
            <param name="joinOn"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTableJoin(System.String[],System.Type,System.Type,System.String,System.String)">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <param name="fields"></param>
            <param name="headT"></param>
            <param name="itemT"></param>
            <param name="joinOn"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTableJoin(System.String[],System.Type,System.Type,System.String,System.String,System.Object[])">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <param name="fields"></param>
            <param name="headT"></param>
            <param name="itemT"></param>
            <param name="joinOn"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsJoin(System.Type,HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <param name="returnModelT"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsJoin``1(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsJoin``1(System.Type,System.Type,HWQ.Entity.LightModels.JoinTypes,System.String,System.String)">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headT">主表（实体）</param>
            <param name="itemT"></param>
            <param name="joinType"></param>
            <param name="joinOn"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsJoin``1(System.Type,System.Type,System.String)">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headT"></param>
            <param name="itemT"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsJoin``1(System.Type,System.Type)">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headT"></param>
            <param name="itemT"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViewsJoin``1(System.Type,System.Type)">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headT"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViewsJoin``1(System.Type,System.Type,System.String)">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headT"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViewsJoin``1(System.Type,System.Type,System.String,System.Object[])">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headT"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsJoin``1(System.Type,System.Type,System.String,System.Object[])">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headT"></param>
            <param name="itemT"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsJoin``1(System.Type,System.Type,System.String,System.String)">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headT"></param>
            <param name="itemT"></param>
            <param name="joinOn"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsJoin``1(System.Type,System.Type,System.String,System.String,System.Object[])">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headT"></param>
            <param name="itemT"></param>
            <param name="joinOn"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViewsJoin``1(System.Type,System.Type,HWQ.Entity.LightModels.JoinTypes,System.String,System.String)">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headT"></param>
            <param name="itemT"></param>
            <param name="joinType"></param>
            <param name="joinOn"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViewsJoin``1(System.Type,System.Type,System.String,System.String)">
            <summary>
            [否决]（以后版本作废）关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headT"></param>
            <param name="itemT"></param>
            <param name="joinOn"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsJoin3``1(System.Type,System.Type,System.Type,System.String,System.String,System.String)">
            <summary>
            [否决]（以后版本作废）3 表关联
            </summary>
            <typeparam name="T"></typeparam>
            <param name="leftT"></param>
            <param name="assoT"></param>
            <param name="rightT"></param>
            <param name="joinOn1"></param>
            <param name="joinOn2"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable``1(System.String)">
            <summary>
            返回 DataTable 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable``1(System.String[])">
            <summary>
            返回 DataTable 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields">需要显示的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable``1">
            <summary>
            返回 DataTable 对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable``1(System.String[],System.String)">
            <summary>
            返回 DataTable 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable``1(System.String[],System.String,System.Object[])">
            <summary>
            返回 DataTable 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetSModelList(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetSModelReader(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            简单实体的 Reader 
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetSModel(System.String)">
            <summary>
            根据 T-SQL 
            </summary>
            <param name="tSql"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetSModelList(System.String)">
            <summary>
            获取 SModel 集合
            </summary>
            <param name="tSql"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateSModel(HWQ.Entity.LightModels.SModel,System.String,System.String)">
            <summary>
            更新 SModel 
            </summary>
            <param name="model"></param>
            <param name="table"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertSModel(System.String,HWQ.Entity.LightModels.SModel,System.Int32@)">
            <summary>
            插入记录
            </summary>
            <param name="tableName"></param>
            <param name="model">SModel 简单实体</param>
            <param name="identity">插入后的字段</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertSModel(System.String,HWQ.Entity.LightModels.SModel)">
            <summary>
            插入记录
            </summary>
            <param name="model">SModel 简单实体</param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertSModel(HWQ.Entity.LightModels.SModel,System.Int32@)">
            <summary>
            插入记录
            </summary>
            <param name="model">SModel 简单实体</param>
            <param name="identity">插入后的字段</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertSModel(HWQ.Entity.LightModels.SModel)">
            <summary>
            插入记录
            </summary>
            <param name="model">SModel 简单实体</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertSModels(System.String,HWQ.Entity.LightModels.SModelList,System.Boolean,HWQ.Entity.Decipher.LightDecipher.DbDecipherInsertType)">
            <summary>
            批量插入记录
            </summary>
            <param name="tableName">表名</param>
            <param name="models">实体集合</param>
            <param name="existIdentity">存在自动递增id</param>
            <param name="insertType">插入模式</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertSModels(System.String,HWQ.Entity.LightModels.SModelList,System.Boolean)">
            <summary>
            批量插入记录
            </summary>
            <param name="tableName">表名</param>
            <param name="models">实体集合</param>
            <param name="existIdentity">存在自动递增id</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsNotIn``1(HWQ.Entity.Filter.LOrder,System.String,System.Collections.IList)">
            <summary>
            获取模型集合
            </summary>
            <param name="propName">属性名称</param>
            <param name="args">包含零个或多个需要格式化的对象的 System.Object</param>
            <returns></returns>
            <remarks>基方法</remarks>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsNotIn``1(System.String,System.Collections.IList)">
            <summary>
            获取模型集合
            </summary>
            <param name="propName">属性名称</param>
            <param name="args">包含零个或多个需要格式化的对象的 System.Object</param>
            <returns></returns>
            <remarks>基方法</remarks>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsIn``1(HWQ.Entity.Filter.LOrder,System.String,System.Collections.IList)">
            <summary>
            获取模型集合
            </summary>
            <param name="propName">属性名称</param>
            <param name="args">包含零个或多个需要格式化的对象的 System.Object</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsIn``1(System.String,System.Collections.IList)">
            <summary>
            获取模型集合
            </summary>
            <param name="propName">属性名称</param>
            <param name="args">包含零个或多个需要格式化的对象的 System.Object</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按条件获取模型集合
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels(System.Type,System.String)">
            <summary>
            按条件获取模型集合
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels(System.Type,HWQ.Entity.Filter.LOrder,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels(System.Type)">
            <summary>
            按条件获取模型集合
            </summary>
            <param name="modelT"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels(System.Type,HWQ.Entity.Filter.LOrder)">
            <summary>
            按条件获取模型集合
            </summary>
            <param name="modelT"></param>
            <param name="order">排序</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels(System.Type,System.String,System.Object[])">
            <summary>
            按条件获取模型集合
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels(System.Type,HWQ.Entity.Filter.LOrder,System.String,System.Object[])">
            <summary>
            按条件获取模型集合
            </summary>
            <param name="modelT"></param>
            <param name="order">排序</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels(System.Type,HWQ.Entity.LightModels.Limit,System.String)">
            <summary>
            按条件获取模型集合
            </summary>
            <param name="modelT"></param>
            <param name="limit"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels(System.Type,HWQ.Entity.LightModels.Limit)">
            <summary>
            按条件获取模型集合
            </summary>
            <param name="modelT"></param>
            <param name="limit"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels(System.Type,HWQ.Entity.LightModels.Limit,System.String,System.Object[])">
            <summary>
            按条件获取模型集合
            </summary>
            <param name="modelT"></param>
            <param name="limit"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels(System.Type,HWQ.Entity.Filter.LOrder,HWQ.Entity.LightModels.Limit,System.String)">
            <summary>
            按条件获取模型集合
            </summary>
            <param name="modelT"></param>
            <param name="limit"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels(System.Type,HWQ.Entity.Filter.LOrder,HWQ.Entity.LightModels.Limit,System.String,System.Object[])">
            <summary>
            按条件获取模型集合
            </summary>
            <param name="modelT"></param>
            <param name="limit"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按筛选条件返回第一个模型
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel(System.Type,System.String)">
            <summary>
            获取一个模型
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel(System.Type,HWQ.Entity.Filter.LOrder,System.String)">
            <summary>
            获取一个模型
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel(System.Type)">
            <summary>
            获取一个模型
            </summary>
            <param name="modelT"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel(System.Type,HWQ.Entity.Filter.LOrder)">
            <summary>
            获取一个模型
            </summary>
            <param name="modelT"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel(System.Type,System.String,System.Object[])">
            <summary>
            获取一个模型
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel(System.Type,HWQ.Entity.Filter.LOrder,System.String,System.Object[])">
            <summary>
            获取一个模型
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel``1(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按筛选条件返回第一个模型
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="filter">实体模型的筛选条件</param>
            <remarks>基方法</remarks>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel``1(System.String)">
            <summary>
            获取一个模型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel``1(HWQ.Entity.Filter.LOrder,System.String)">
            <summary>
            获取一个模型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel``1">
            <summary>
            获取一个模型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel``1(HWQ.Entity.Filter.LOrder)">
            <summary>
            获取一个模型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel``1(System.String,System.Object[])">
            <summary>
            获取一个模型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneModel``1(HWQ.Entity.Filter.LOrder,System.String,System.Object[])">
            <summary>
            获取一个模型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.TraecOperate">
            <summary>
            监控操作
            </summary>
            <remarks>
            采用接口, 而不采用事件, 是为了照顾效率.分别测出的效率: 接口(6.6时间单位), 委托事件(41时间单位)
            </remarks>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateProps(System.String,System.String,System.Object[])">
            <summary>
            按条件更新数据库中，某字段的全部值。
            </summary>
            <param name="tableName"></param>
            <param name="tSqlWhere"></param>
            <param name="fieldValues"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateProps(HWQ.Entity.LightModels.LightModelFilter,System.Object[])">
            <summary>
            按条件更新数据库中，某字段的全部值。
            </summary>
            <param name="filter"></param>
            <param name="fieldValues"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateModelByPk(System.Type,System.Object,System.Object[])">
            <summary>
            按主键值，更新字段属性
            </summary>
            <param name="modelT">实体类型</param>
            <param name="pkValue">主键的值</param>
            <param name="fieldValues"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateModelByPk(System.String,System.Object,System.Object[])">
            <summary>
            按主键值，更新字段属性
            </summary>
            <param name="modelName">实体类名</param>
            <param name="pkValue">主键的值</param>
            <param name="fieldValues"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateModelByPk``1(System.Object,System.Object[])">
            <summary>
             按主键值，更新字段属性
            </summary>
            <typeparam name="T">实体类名</typeparam>
            <param name="pkValue">主键的值</param>
            <param name="fieldValues"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateProps(System.Type,System.String,System.Object[])">
            <summary>
            按条件更新数据库中，某字段的全部值。
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhere"></param>
            <param name="fieldValues"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateProps``1(System.String,System.Object[])">
            <summary>
            按条件更新数据库中，某字段的全部值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhere"></param>
            <param name="fieldValues"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateModels(System.Object,HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            更新模型集合(更新除主键以外的所有跟条件相同的对象)
            </summary>
            <param name="model">模型对象</param>
            <param name="filter">筛选条件</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateModel(System.Object)">
            <summary>
            更新模型
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateModel(System.Object,System.Boolean)">
            <summary>
            只更新更改的字段名称
            </summary>
            <param name="model">实体</param>
            <param name="onlyUpdateChange">只更新弄污的字段</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateView(System.Object)">
            <summary>
            更新视图模型
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateModelProps(System.Object,System.String[])">
            <summary>
            更新模型（只更特定的字段）
            </summary>
            <param name="model">模型对象</param>
            <param name="props">字段集合</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateViewProps(System.Object,System.String[])">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateViewProps``1(``0,System.String[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateCommand(System.String[],HWQ.Entity.LightModels.LModelElement,System.Data.Common.DbCommand,HWQ.Entity.LightModels.LightModelFilter,System.Type,System.Object)">
            <summary>
            构造更新的 T-SQL 语句
            </summary>
            <param name="updateFields"></param>
            <param name="modelElem"></param>
            <param name="command"></param>
            <param name="filter">筛选条件</param>
            <param name="modelT"></param>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdatePropsCommand(System.Data.Common.DbCommand,HWQ.Entity.LightModels.LModelElement,System.Collections.Generic.SortedList{System.String,System.Object},HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            构造更新的 T-SQL 语句
            </summary>
            <param name="command"></param>
            <param name="modelElem"></param>
            <param name="values"></param>
            <param name="filter"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateModels(System.Collections.IList,System.Boolean)">
            <summary>
            更新集合
            </summary>
            <param name="models">实体集合</param>
            <param name="onlyUpdateChange">只更新变化的字段</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateModels(System.Collections.IList)">
            <summary>
            更新集合
            </summary>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.UpdateModels(HWQ.Entity.LightModels.LModel,System.String[],System.Collections.Generic.IList{HWQ.Entity.Filter.ConditionElement})">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="updateFields"></param>
            <param name="conditionList"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertTable(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="fieldValues"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels``1">
            <summary>
            按条件获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels``1(HWQ.Entity.Filter.LOrder)">
            <summary>
            按条件获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels``1(System.String)">
            <summary>
            按条件获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels``1(HWQ.Entity.Filter.LOrder,System.String)">
            <summary>
            按条件获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="order"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels``1(HWQ.Entity.LightModels.Limit,System.String)">
            <summary>
            按条件获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="limit">分页</param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels``1(HWQ.Entity.LightModels.Limit)">
            <summary>
            按条件获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="limit">分页</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels``1(HWQ.Entity.Filter.LOrder,HWQ.Entity.LightModels.Limit,System.String)">
            <summary>
            按条件获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="limit">分页</param>
            <param name="order">排序</param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels``1(HWQ.Entity.Filter.LOrder,HWQ.Entity.LightModels.Limit)">
            <summary>
            按条件获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="limit">分页</param>
            <param name="order">排序</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels``1(System.String,System.Object[])">
            <summary>
            按条件获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhereForamt"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels``1(HWQ.Entity.Filter.LOrder,System.String,System.Object[])">
            <summary>
            按条件获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="order">排序</param>
            <param name="tSqlWhereForamt"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels``1(HWQ.Entity.LightModels.Limit,System.String,System.Object[])">
            <summary>
            按条件获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="limit"></param>
            <param name="tSqlWhereForamt"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels``1(HWQ.Entity.Filter.LOrder,HWQ.Entity.LightModels.Limit,System.String,System.Object[])">
            <summary>
            按条件获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="limit"></param>
            <param name="tSqlWhereForamt"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModels``1(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按筛选条件获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_DesignMode">
            <summary>
            数据库设计模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_EnableHttpContext">
            <summary>
            激活 HttpContent,默认: true
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_DecipherGuid">
            <summary>
            对象的 Guid.
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_IsDisposed">
            <summary>
            是否已经释放内存
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_IdentityFactory">
            <summary>
            自动编号的构造工厂
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_Overtime">
            <summary>
            超时时间( 默认30,000 毫秒)
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_Command">
             <summary>
            
             </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_Connection">
            <summary>
            作为允许会滚的数据链接
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_ConnectionString">
            <summary>
            数据连接字符串
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_BufferDB">
            <summary>
            缓冲数据库
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_MemoryDB">
            <summary>
            内存数据库
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_Actions">
            <summary>
            动作栈
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_Locks">
            <summary>
            操作锁
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_AutoBuffer">
            <summary>
            自动缓冲
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_Dict">
            <summary>
            [作废] 字典操作类
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_EnableModelIdentity">
            <summary>
            实体自己控制ID
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_EntityIdentityConn">
            <summary>
            自己控制ID 的连接
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_EntityIdentityCommand">
            <summary>
            自己控制递增ID
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_IdentityStoping">
            <summary>
            临时关闭插入数据的自动ID
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipher.m_EnabledSchema">
            <summary>
            激活架构模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.Encoding">
            <summary>
            编码类型
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.IdentityStop">
            <summary>
            关闭系统自动控制ID
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.IdentityRecover">
            <summary>
            恢复
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.EnabledSchema">
            <summary>
            激活架构模式, 默认: false
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.Locks">
            <summary>
            锁
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.HasLcok">
            <summary>
            是否有锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetLockString">
            <summary>
            获取锁的字符串.然后清空锁内容
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SearchWildcard">
            <summary>
            模糊查询使用的通配符
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.CurrentRowIndex">
            <summary>
            [作废] 当前行的索引
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.IsDisposed">
            <summary>
            是否已经释放内存
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DesignMode">
            <summary>
            设计模式,默认值:false...
            输出 SQL 语句
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.EnableHttpContent">
            <summary>
            激活 HttpContent,默认: true
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.IdentityFactory">
            <summary>
            自动编号的构造工厂
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DecipherGuid">
            <summary>
            对象的 Guid
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.AutoBuffer">
            <summary>
            自动缓冲
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.Overtime">
            <summary>
            超时时间( 默认30000 毫秒)
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.Actions">
            <summary>
            当前动作
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.Busy">
            <summary>
            获取状态是否处于忙状态
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.State">
            <summary>
            链接状态
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ConnectionString">
            <summary>
            数据库链接字符串
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.Connection">
            <summary>
            表示一个 Sql Server 打开的链接
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.BufferDB">
            <summary>
            缓冲数据库
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.MemoryDB">
            <summary>
            内存数据库
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DatabaseBuilder">
            <summary>
            数据库建筑师
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.Dict">
            <summary>
            [作废] 字典操作类
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipher.EnableModelIdentity">
            <summary>
            激活实体自己控制ID
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetSqlLock(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取锁
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetCommand_Common(HWQ.Entity.LightModels.LModelElement,HWQ.Entity.LightModels.LightModelFilter,System.Data.Common.DbCommand,System.String[],System.String)">
            <summary>
            普通 SQL 语句
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetModelSet(System.Collections.IList)">
            <summary>
            多查询，返回一个结果
            </summary>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetConditionString(HWQ.Entity.LightModels.LightModelFilter,HWQ.Entity.Filter.ConditionGroup,System.Text.StringBuilder,System.Data.Common.DbCommand,System.Int32,HWQ.Entity.Filter.ExprTypes)">
            <summary>
            获取筛选预计的字符串
            </summary>
            <param name="filter"></param>
            <param name="sb"></param>
            <param name="group"></param>
            <param name="command"></param>
            <param name="n"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetSelectInToString(System.Text.StringBuilder,System.Data.Common.DbCommand,HWQ.Entity.LightModels.LModelElement,HWQ.Entity.Filter.ConditionElement)">
            <summary>
            In 语句
            </summary>
            <param name="sb"></param>
            <param name="modelElem"></param>
            <param name="cElem"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetStringByPk(System.Type,System.Object)">
            <summary>
            否决（以后版本作废）
            </summary>
            <param name="modelT"></param>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetStringByPk``1(System.Object)">
            <summary>
            否决（以后版本作废）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExistsModels(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按条件判断是否存在
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExistsModels(System.Type,System.String)">
            <summary>
            根据条件,判断实体是否存在
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExistsModels(System.Type,System.String,System.Object[])">
            <summary>
            根据条件,判断实体是否存在
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExistsModels``1(System.String)">
            <summary>
            根据条件,判断实体是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExistsModels``1(System.String,System.Object[])">
            <summary>
            根据条件,判断实体是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExistsModelByPk(System.Type,System.Object)">
            <summary>
            判断是否存在相应的主键.（只能针对存在一个主键的数据表）
            </summary>
            <param name="modelT">模型类型</param>
            <param name="pkValue">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExistsModelByPk``1(System.Object)">
            <summary>
            判断是否存在相应的主键.（只能针对存在一个主键的数据表）
            </summary>
            <typeparam name="T">模型类型</typeparam>
            <param name="pkValue">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelByPk(System.String,System.Object)">
            <summary>
            按关键字获取一个对象
            </summary>
            <param name="modelName">模型名称（实体名称）</param>
            <param name="pkValue">主键值</param>
            <returns>实体</returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelByPk``1(System.Object)">
            <summary>
            按关键字获取一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelByPk(System.Type,System.Object)">
            <summary>
            按模型主键，返回一个模型
            </summary>
            <param name="modelT"></param>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectChildModels``1(System.Object,System.String,System.String)">
            <summary>
            获取子模型集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="parentModel">上级实体</param>
            <param name="parentFieldName">上级实体关联字段</param>
            <param name="childFieldName">上级实体关联字段</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectChildModels``1(System.Object)">
            <summary>
            获取子模型集合（按父实体的主键关联）
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="parentModel">父实体</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectChildModels``1(System.Object,System.String)">
            <summary>
            获取子模型集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="parentModel">父实体</param>
            <param name="childFieldName">子实体关联字段</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViewByPk``1(System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViewByPk(System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="modelT"></param>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectToOneView``1(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViewsNotIn``1(System.String,System.Collections.IList)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViews(System.Type)">
            <summary>
            
            </summary>
            <param name="modelT"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViews(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViews(System.Type,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViews(System.Type,HWQ.Entity.LightModels.Limit,System.String)">
            <summary>
            
            </summary>
            <param name="modelT"></param>
            <param name="limit"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViews(System.Type,HWQ.Entity.LightModels.Limit,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="modelT"></param>
            <param name="limit"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViews``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViews``1(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectViews``1(HWQ.Entity.LightModels.Limit,System.String)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="limit"></param>
             <param name="tSqlWhere"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetModelsByPage(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            分页查询
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsByPage(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            分页查询
            </summary>
            <param name="filter">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectModelsByPage``1(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.FillViewTable(System.Data.DataTable,System.String[],HWQ.Entity.LightModels.LModelElement)">
            <summary>
            填充视图表
            </summary>
            <param name="table"></param>
            <param name="viewFields"></param>
            <param name="modelElem"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.FillViewRow(System.Data.DataRow,System.String[],HWQ.Entity.LightModels.LModelElement)">
            <summary>
            填充视图
            </summary>
            <param name="row"></param>
            <param name="viewFields"></param>
            <param name="modelElem"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetModelReader(System.String)">
            <summary>
            从数据源读取行的一个只进流
            </summary>
            <param name="tSql"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetModelReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            从数据源读取行的一个只进流
            </summary>
            <param name="commandType"></param>
            <param name="tSql"></param>
            <param name="dbParams"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetModelReader(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            从数据源读取行的一个只进流
            </summary>
            <param name="filter">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DebugWrite(System.String,System.Data.Common.DbCommand)">
            <summary>
            调试输出
            </summary>
            <param name="opName">操作名称</param>
            <param name="command"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.#ctor">
            <summary>
            数据库操作的公共库的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.#ctor(System.String)">
            <summary>
            数据库操作的公共库的构造方法
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetLModelElem(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按 LightModelFilter 获取 实体元素
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.Open">
            <summary>
            打开连接
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ProHttpContent">
            <summary>
            处理 ASP.NET 中 WebDecipher 的自动断开问题
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.Close">
            <summary>
            关闭数据库链接
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetSqlOrderBy(HWQ.Entity.LightModels.LightModelFilter,HWQ.Entity.LightModels.LModelElement)">
            <summary>
            获取 T-SQL 的排序语句
            </summary>
            <param name="filter">实体模型的筛选条件</param>
            <param name="modelElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SortTypeToString(HWQ.Entity.Filter.SortTypes)">
            <summary>
            获取排序类型的字符串
            </summary>
            <param name="sortType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetSqlWhere3(HWQ.Entity.LightModels.LightModelFilter,System.Data.Common.DbCommand,System.Int32)">
            <summary>
            获取 T-SQL 预计的 Where 语句
            </summary>
            <param name="filter">实体模型的筛选条件</param>
            <param name="command"></param>
            <param name="tempNum"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetSqlWhere(HWQ.Entity.LightModels.LightModelFilter,System.Type,System.Data.Common.DbCommand,System.Int32)">
            <summary>
            获取 T-SQL 预计的 Where 语句
            </summary>
            <param name="filter">实体模型的筛选条件</param>
            <param name="lightModelType"></param>
            <param name="command"></param>
            <param name="tempNum"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.IsTran">
            <summary>
            获取是否在执行事务
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.BeginTransaction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开始事务
            </summary>
            <param name="isolationLevel">锁的层次</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.TransactionCommit">
            <summary>
            事务提交
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.TransactionRollback">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.Dispose(System.Boolean)">
            <summary>
            释放内存
            </summary>
            <param name="isWebSite">是否为 Web 网站模式</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.Dispose">
            <summary>
            释放托管的内存
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.DbDecipher.AliasField">
            <summary>
            别名字段
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetCommonForFields(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取字段集合
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetSMoodel_CommonForTSqlForm(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            构造 TSql 的 Form 子句
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetCommonForTSqlForm(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            构造 TSql 的 Form 子句
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetModel(System.String,System.Object[])">
            <summary>
            获取一行记录的字典集
            </summary>
            <param name="tSqlFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetModel(HWQ.Entity.LightModels.LModelReader)">
            <summary>
            获取一行记录的字典集
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetModel(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取一行记录的字典集
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetModel(System.String)">
            <summary>
            获取一行记录的字典集
            </summary>
            <param name="tSql"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetModelList(System.String,System.String)">
            <summary>
            获取多行记录
            </summary>
            <param name="tableName"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetModelList(System.String,System.Object[])">
            <summary>
            获取多行记录
            </summary>
            <param name="tSqlFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetModels(HWQ.Entity.LightModels.LModelReader,HWQ.Entity.LightModels.LModelElement)">
            <summary>
            从 LModelReader 流中读取实体
            </summary>
            <param name="reader">数据流</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.CreateTempModelElement(HWQ.Entity.LightModels.LModelElement,System.String[])">
            <summary>
            创建临时实体元素
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetModelList(System.String)">
            <summary>
            获取多行记录
            </summary>
            <param name="tSql"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetEntityIdentity(System.String)">
            <summary>
            获取自己控制递增ID
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SetIdentity(System.Object)">
            <summary>
            设置实体的主键值
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SetIdentity(System.Object,System.Int32@)">
            <summary>
            设置实体的主键值
            </summary>
            <param name="model"></param>
            <param name="newIdentity">新获取的 id 值</param>
            <returns>返回已经获取到的 id 值</returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertModel(System.Object)">
            <summary>
            插入记录
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertTableRow(System.String,System.Data.DataRow)">
            <summary>
            插入记录
            </summary>
            <param name="tableName">模型元素</param>
            <param name="row">记录行</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertModels(System.Collections.IEnumerable)">
            <summary>
            批量插入模型集合
            </summary>
            <param name="models">模型集合</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertModels``1(System.Collections.Generic.IList{``0},HWQ.Entity.Decipher.LightDecipher.DbDecipherInsertType)">
            <summary>
            批量插入模型集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="models">模型集合</param>
            <param name="insertType">插入模式</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertModels``1(System.Collections.Generic.IList{``0})">
            <summary>
            批量插入模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="models">模型集合</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertViews(System.Collections.IList)">
            <summary>
            批量插入试图集合
            </summary>
            <param name="models">模型集合</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertViews``1(System.Collections.Generic.IList{``0})">
            <summary>
            批量插入试图集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="models">模型集合</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.InsertView(System.Object)">
            <summary>
            插入记录
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.CreateInsertCommand(System.Data.Common.DbCommand,System.Object)">
            <summary>
            获取插入的 OleDbCommand
            </summary>
            <param name="command"></param>
            <param name="model"></param>
            <returns>Exist System Identity</returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.AddCommandParam(System.Text.StringBuilder,System.Data.Common.DbCommand,HWQ.Entity.LightModels.LModelFieldElement,System.Object,System.String)">
            <summary>
            添加命令参数
            </summary>
            <param name="sb"></param>
            <param name="command"></param>
            <param name="fieldElem"></param>
            <param name="value"></param>
            <param name="expFormat"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ConverDBValue(System.Object,HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            转换为数据库的值
            </summary>
            <param name="value"></param>
            <param name="fieldElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行不返回查询集合
            </summary>
            <param name="commandType"></param>
            <param name="tSql"></param>
            <param name="dbParams"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExecuteNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行不返回查询集合
            </summary>
            <param name="tSql"></param>
            <param name="dbParams"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ExecuteNonQuery(System.String)">
            <summary>
            执行不返回查询集合
            </summary>
            <param name="tSql"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.ArrayToString(System.Object[],System.String)">
            <summary>
            输出字符串格式。例：1,"一","二",3,4,……
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable(System.Type,System.String[])">
            <summary>
            返回 DataTable 对象
            </summary>
            <param name="modelT"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable(System.Type,System.String[],System.String)">
            <summary>
            按 T-SQL 语句返回 DataTable 对象
            </summary>
            <param name="modelT">实体类型</param>
            <param name="fields">需要返回的字段数量</param>
            <param name="tSqlWhere">T-SQL 的 WHERE 子句</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable(System.Type)">
             <summary>
            
             </summary>
             <param name="modelT"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable(System.Type,System.String)">
            <summary>
            按 T-SQL 语句返回 DataTable 对象
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable(System.Type,System.String,System.Object[])">
            <summary>
            按 T-SQL 语句返回 DataTable 对象
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            按 T-SQL 语句返回 DataTable 对象
            </summary>
            <param name="commandType"></param>
            <param name="sql"></param>
            <param name="dbParams"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable(System.String)">
            <summary>
            按 T-SQL 语句返回 DataTable 对象
            </summary>
            <param name="sql">T-SQL 语句</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            按 T-SQL 语句返回 DataTable 对象
            </summary>
            <param name="sql"></param>
            <param name="dbParams"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按筛选 LightModelFilter 条件获取数据
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.GetDataTable(System.String[],HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            （不建议使用）获取视图表：建议采用 GetDataTable( LightModelFilter filter )
            </summary>
            <param name="fields">需要显示的字段集合</param>
            <param name="filter">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModelsIn``1(System.String,System.Collections.IList)">
            <summary>
            按 in 语句删除
            </summary>
            <param name="modelT"></param>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModels``1(System.String)">
            <summary>
            按条件删除集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhere"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModels``1(System.String,System.Object[])">
            <summary>
            按条件删除集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModels``1(System.String,System.Object)">
            <summary>
            按条件删除集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhereFormat"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModels``1(System.String,System.Object,System.Object)">
            <summary>
            按条件删除集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhereFormat"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteModels``1(System.String,System.Object,System.Object,System.Object)">
            <summary>
            按条件删除集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhereFormat"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectCount(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按条件获取记录数量
            </summary>
            <param name="filter">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectCount(System.Type)">
            <summary>
            获取模型总数量
            </summary>
            <param name="modelT"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectCount(System.Type,System.String)">
            <summary>
            按条件获取记录数量
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectCount(System.Type,System.String,System.Object[])">
            <summary>
            按条件获取记录数量
            </summary>
            <param name="modelT"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectCount``1">
            <summary>
            获取模型总数量
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectCount``1(System.String)">
            <summary>
            按条件获取记录数量
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.SelectCount``1(System.String,System.Object[])">
            <summary>
            按条件获取记录数量
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteTable(System.String,System.String)">
            <summary>
            按表名删除记录（不通过实体引擎)
            </summary>
            <param name="tableName"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteTable(System.String,System.String,System.Object)">
            <summary>
            按表名删除记录（不通过实体引擎)
            </summary>
            <param name="tableName"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteTable(System.String,System.String,System.Object,System.Object)">
            <summary>
            按表名删除记录（不通过实体引擎)
            </summary>
            <param name="tableName"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteTable(System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            按表名删除记录（不通过实体引擎)
            </summary>
            <param name="tableName"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipher.DeleteTable(System.String,System.String,System.Object[])">
            <summary>
            按表名删除记录（不通过实体引擎)
            </summary>
            <param name="tableName"></param>
            <param name="tSqlWhereFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.DbDecipherInfo">
            <summary>
            数据连接对象的信息
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherInfo.EnableHttpContent">
            <summary>
            激活 HttpContent
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherInfo.EnableModelIdentity">
            <summary>
            激活 ModelIdentity 自动控制 id 模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherInfo.ProviderName">
            <summary>
            数据库提供程序名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherInfo.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherInfo.DecipherType">
            <summary>
            数据连接对象
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherInfo.IdentityFactoryName">
            <summary>
            控制自动递增的 IdentityFactory 名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherInfo.EnabledTraceOperate">
            <summary>
            激活监控操作
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.DbDecipherInsertType">
            <summary>
            插入模式,
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipherInsertType.Common">
            <summary>
            常规模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipherInsertType.Batch">
            <summary>
            批量高速模式
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager">
            <summary>
            管理整个系统的数据库连接
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.TraceOperate">
            <summary>
            监控操作
            </summary>
            <remarks>
            采用接口, 而不采用事件, 是为了照顾效率.分别测出的效率: 接口(6.6时间单位), 委托事件(41时间单位)
            </remarks>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.m_DataDirectory">
            <summary>
            数据库目录
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.m_DefaultDecipherName">
            <summary>
            默认对象名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.m_DecipherTypes">
            <summary>
            DbDecipher 对象
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.SetDbDecipherType(System.String,System.Type)">
            <summary>
            设置 DbDecipherType 类型
            </summary>
            <param name="name"></param>
            <param name="dbDecipherType"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.SetIdentityType(System.String,System.Type)">
            <summary>
            设置 IdentityFactory 类型对象
            </summary>
            <param name="name"></param>
            <param name="identityType"></param>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.FileFormat">
            <summary>
            文件格式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.Passwod">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.DataDirectory">
            <summary>
            数据库目录
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.DefaultDecipherName">
            <summary>
            默认对象名称
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.GetDecipher">
            <summary>
            获取数据库操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.GetDbDecipherInfo(System.String)">
            <summary>
            获取 DbDecipherInfo 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.GetIdentityFactory(System.String)">
            <summary>
            获取处理自动递增的处理工厂
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.GetDecipherOpen(System.String)">
            <summary>
            获取 DbDecipher 并打开数据链接
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.TryGetDecipherOpen(System.String,HWQ.Entity.Decipher.LightDecipher.DbDecipher@)">
            <summary>
            尝试获取 DbDecipher 并打开数据链接
            </summary>
            <param name="name"></param>
            <param name="decipher"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.GetDecipherOpen">
            <summary>
            获取 DbDecipher 并打开数据链接
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.GetConnectionString">
            <summary>
            获取连接字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.TryGetConnectionString(System.String,System.String@)">
            <summary>
            获取连接字符串
            </summary>
            <param name="name"></param>
            <param name="connString"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.GetConnectionString(System.String)">
            <summary>
            获取连接字符串
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.TryGetDecipher(System.String,HWQ.Entity.Decipher.LightDecipher.DbDecipher@)">
            <summary>
            调试获取数据仓库
            </summary>
            <param name="name"></param>
            <param name="decipher"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.GetDecipher(System.String)">
            <summary>
            获取数据库操作
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.InitDecipherType(HWQ.Entity.Decipher.LightDecipher.DbDecipherInfo)">
            <summary>
            初始化 DbDecipher Info 对象
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.Configure(System.String)">
            <summary>
            配置实体数据库
            </summary>
            <param name="filename">配置文件名</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherManager.Configure(HWQ.Entity.Configuration.ModelConfiguration)">
            <summary>
            配置
            </summary>
            <param name="mc"></param>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.OdbcDecipher">
            <summary>
            ODBC 数据库操作类
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OdbcDecipher.#ctor">
            <summary>
            OdbcDecipher 的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OdbcDecipher.#ctor(System.String)">
            <summary>
            OdbcDecipher 的构造方法
            </summary>
            <param name="connectionString">数据连接字符串</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OdbcDecipher.ToSqlDbType(HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            转换为 SQL Server 2000 数据库的数据类型 
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OdbcDecipher.GetConditionString(HWQ.Entity.LightModels.LightModelFilter,HWQ.Entity.Filter.ConditionGroup,System.Text.StringBuilder,System.Data.Common.DbCommand,System.Int32,HWQ.Entity.Filter.ExprTypes)">
            <summary>
            获取查询条件
            </summary>
            <param name="filter"></param>
            <param name="conditionGroup"></param>
            <param name="sb"></param>
            <param name="command"></param>
            <param name="n"></param>
            <param name="exprType"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OdbcDecipher.SelectCount(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OdbcDecipher.Create_InsertCommand(HWQ.Entity.LightModels.SModel,System.String,System.Boolean)">
            <summary>
            创建 SModel 的插入命令
            </summary>
            <param name="model"></param>
            <param name="tableName"></param>
            <param name="existIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OdbcDecipher.InsertSModel(System.String,HWQ.Entity.LightModels.SModel,System.Int32@)">
            <summary>
            插入 SModel 
            </summary>
            <param name="model"></param>
            <param name="tableName"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OdbcDecipher.InsertSModel(System.String,HWQ.Entity.LightModels.SModel)">
            <summary>
            插入 SModel 
            </summary>
            <param name="model"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher">
            <summary>
            OLE Database 数据库
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.SearchWildcard">
            <summary>
            模糊查询的通配符
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.DatabaseBuilder">
            <summary>
            数据库建筑师
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.#ctor">
            <summary>
            OLE Database 数据库的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.#ctor(System.String)">
            <summary>
            OLE Database 数据库的构造方法
            </summary>
            <param name="connectionString">查询字符串</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.ToSqlDbType(HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            转换为 SQL Server 2000 数据库的数据类型 
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.InsertModel(System.Object)">
            <summary>
            插入记录
            </summary>
            <param name="model">实体</param>
            <returns>插入成功的记录数量</returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.SelectCount(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按条件返回查询的数量
            </summary>
            <param name="filter"></param>
            <returns>查询的数量</returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.UpdatePropsCommand(System.Data.Common.DbCommand,HWQ.Entity.LightModels.LModelElement,System.Collections.Generic.SortedList{System.String,System.Object},HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="modelElem"></param>
             <param name="values"></param>
             <param name="filter"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.GetEntityIdentity(System.String)">
            <summary>
            (作废) 获取用户控制的id
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.ProOrderBy(System.String@,HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            专门针对 Access 数据库 top和order by 的问题
            </summary>
            <param name="tSqlOrderBy"></param>
            <param name="filter"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.GetCommonForFields(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取字段集合
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.Create_InsertCommand(HWQ.Entity.LightModels.SModel,System.String,System.Boolean)">
            <summary>
            创建 SModel 的插入命令
            </summary>
            <param name="model"></param>
            <param name="tableName"></param>
            <param name="existIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.InsertSModel(System.String,HWQ.Entity.LightModels.SModel,System.Int32@)">
            <summary>
            插入 SModel 
            </summary>
            <param name="model"></param>
            <param name="tableName"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleDbDecipher.InsertSModel(System.String,HWQ.Entity.LightModels.SModel)">
            <summary>
            插入 SModel 
            </summary>
            <param name="model"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.SqlServer8SysTable.SysColumn">
            <summary>
            列
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServer8SysTable.SysColumn.m_ColID">
            <summary>
            列或参数 ID。
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServer8SysTable.SysColumn.m_ID">
            <summary>
            object 的ID
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServer8SysTable.SysColumn.m_Scale">
            <summary>
            该列的小数位数。
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServer8SysTable.SysColumn.m_IsNullable">
            <summary>
            表示该列是否允许空值： 
            1 = 真。
            0 = 假。
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServer8SysTable.SysColumn.m_XType">
            <summary>
            systypes 中的物理存储类型。
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServer8SysTable.SysColumn.Scale">
            <summary>
            该列的小数位数。
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServer8SysTable.SysColumn.IsNullable">
            <summary>
            1 = 真。
            0 = 假。
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher">
            <summary>
            Sql Server 数据库操作
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.m_BufferInsertCmds">
            <summary>
            插入命令的缓冲区
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.m_Connection">
            <summary>
            作为允许回滚的数据链接
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.m_ConnectionForOther">
            <summary>
            作为不回滚的数据链接
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.m_SysModel">
            <summary>
            系统模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.m_BufferDB">
            <summary>
            缓冲数据库
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.m_MemoryDB">
            <summary>
            内存数据库
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.m_Busy">
            <summary>
            是否处于忙状态
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.m_Tasks">
            <summary>
            忙的作业
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.m_Locale">
            <summary>
            本地化
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.m_Culture">
            <summary>
            本地化代码
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.m_DefaultCulture">
            <summary>
            默认本地化代码
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.DebugWrite(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            调试输出
            </summary>
            <param name="opName">操作名称</param>
            <param name="command"></param>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.Busy">
            <summary>
            获取状态是否处于忙状态
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.Locale">
            <summary>
            本地化，默认关闭
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.Culture">
            <summary>
            本地化代码,默认 zh-CN
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.DefaultCulture">
            <summary>
            默认本地化代码
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.BufferDB">
            <summary>
            缓冲数据库
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.MemoryDB">
            <summary>
            内存数据库
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SysModel">
            <summary>
            系统模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.Connection">
            <summary>
            表示一个 Sql Server 打开的链接
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.ConnectionString">
            <summary>
            数据库链接字符串
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.InsertModel(System.Object)">
            <summary>
            插入一个新实体
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.InsertView(System.Object)">
            <summary>
            插入一个新实体
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.InsertModels``1(System.Collections.Generic.IList{``0})">
            <summary>
            插入模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.CreateInsertCommand(System.Data.SqlClient.SqlCommand,System.Object)">
            <summary>
            获取插入的 SqlCommand
            </summary>
            <param name="command"></param>
            <param name="model"></param>
            <returns>Exist System Identity</returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.CreateDBTable(System.Type)">
            <summary>
            创建数据表
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.DeleteModelForPk(System.Type,System.Object)">
             <summary>
            
             </summary>
             <param name="lightModelType"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.DeleteModelForPk``1(System.Object)">
            <summary>
            按关键字删除实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.DeleteAllModels(System.Type)">
            <summary>
            删除全部实体
            </summary>
            <param name="lightModelType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.DeleteAllModels``1">
            <summary>
            删除全部实体
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.DeleteModel(System.Object)">
            <summary>
            删除特定实体
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.DeleteModels(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            删除实体集合
            </summary>
            <param name="filter">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.DeleteModels``1(System.String)">
            <summary>
            删除实体集合
            </summary>
            <typeparam name="T">简单实体</typeparam>
            <param name="whereExpression">SQL Where 的表达式</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.DeleteModels``1(System.String,System.Object[])">
            <summary>
            删除实体集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="whereExpression"></param>
            <param name="args">包含零个或多个需要格式化的对象的 System.Object</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.CreateDeleteCommand(System.Data.SqlClient.SqlCommand,HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取删除数据库记录的命令行
            </summary>
            <param name="command"></param>
            <param name="filter"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.BeginTransaction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.TransactionCommit">
            <summary>
            事务提交
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.TransactionRollback">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.Open">
            <summary>
            打开数据库链接
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.Close">
            <summary>
            关闭数据库链接
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetNewIdByClassId(System.String)">
            <summary>
            按类编号获取新 ID
            </summary>
            <param name="classId">类模型</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetNewIdByTableName(System.String)">
            <summary>
            按表名称获取新 ID
            </summary>
            <param name="tableName">表名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetClassId(System.String)">
            <summary>
            获取类编号
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetTableName(System.String)">
            <summary>
            获取表名称
            </summary>
            <param name="classId"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.Dispose">
            <summary>
            释放内存
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetModelReader(System.String[],HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            提供一种从 SQL Server 数据库读取行的只进流的方式。
            </summary>
            <param name="fields"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetModelReader(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            提供一种从 SQL Server 数据库读取行的只进流的方式。
            </summary>
            <param name="filter">实体模型的筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetSqlOrderBy(HWQ.Entity.LightModels.LightModelFilter,HWQ.Entity.LightModels.LModelElement)">
            <summary>
            获取 T-SQL 的排序语句
            </summary>
            <param name="filter">实体模型的筛选条件</param>
            <param name="modelElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SortTypeToString(HWQ.Entity.Filter.SortTypes)">
            <summary>
            获取排序类型的字符串
            </summary>
            <param name="sortType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetSqlWhere(HWQ.Entity.LightModels.LightModelFilter,System.Type,System.Data.SqlClient.SqlCommand,System.Int32)">
            <summary>
            获取 T-SQL 预计的 Where 语句
            </summary>
            <param name="filter">实体模型的筛选条件</param>
            <param name="lightModelType"></param>
            <param name="command"></param>
            <param name="tempNum"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetSqlWhere(HWQ.Entity.LightModels.LightModelFilter,System.Type,System.Data.SqlClient.SqlCommand,System.Int32,System.Boolean)">
            <summary>
            获取 T-SQL 语句的 Where 子句
            </summary>
            <param name="filter"></param>
            <param name="lightModelType"></param>
            <param name="command"></param>
            <param name="tempNum"></param>
            <param name="includeWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetConditionString(HWQ.Entity.Filter.ConditionGroup,System.Text.StringBuilder,System.Type,System.Data.SqlClient.SqlCommand,System.Int32)">
            <summary>
            获取筛选预计的字符串
            </summary>
            <param name="conditionGroup"></param>
            <param name="sb"></param>
            <param name="lightModelType"></param>
            <param name="command"></param>
            <param name="n"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.LogicToString(HWQ.Entity.Filter.Logic)">
            <summary>
            逻辑运算符转换为字符串
            </summary>
            <param name="logic"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.ToSqlDbType(HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            转换为 SQL Server 2000 数据库的数据类型 
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModels``1(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取实体集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="filter">实体模型的筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModels``1(HWQ.Entity.LightModels.LightModelFilter,HWQ.Entity.LightModels.Limit)">
            <summary>
            获取实体集合
            </summary>
            <typeparam name="ModelT"></typeparam>
            <param name="filter">实体模型的筛选条件</param>
            <param name="limit">界限</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModels``1(System.String)">
            <summary>
            获取实体集合
            </summary>
            <typeparam name="T">T-SQL 的 Where 子句</typeparam>
            <param name="tSqlWhere">T-SQL 的 WHERE 子句</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModels``1(System.String,HWQ.Entity.LightModels.Limit)">
            <summary>
            获取实体集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhere"></param>
            <param name="limit">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModels(System.Type,System.String)">
            <summary>
            获取实体集合
            </summary>
            <param name="type"></param>
            <param name="tSqlWhere">T-SQL 的 WHERE 子句</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModels(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取集合
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModels(System.Type,System.String,HWQ.Entity.LightModels.Limit)">
            <summary>
            获取实体集合
            </summary>
            <param name="type"></param>
            <param name="tSqlWhere"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModels``1">
            <summary>
            获取实体集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModels``1(HWQ.Entity.LightModels.Limit)">
            <summary>
            获取实体集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModels``1(System.String,System.Object[])">
            <summary>
            获取实体集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="tSqlWhereFormat">T-SQL 的 Where 子句</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModelsIn``1(System.String,System.Data.DataTable)">
            <summary>
            获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propName"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModelsIn``1(System.String,System.Collections.IList)">
            <summary>
            获取模型集合
            </summary>
            <param name="propName">属性名称</param>
            <param name="args">包含零个或多个需要格式化的对象的 System.Object</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModelsNotIn``1(System.String,System.Collections.IList)">
            <summary>
            获取模型集合
            </summary>
            <param name="propName">属性名称</param>
            <param name="args">包含零个或多个需要格式化的对象的 System.Object</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectViewsIn``1(System.String,System.Data.DataTable)">
            <summary>
            获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propName"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectViewsIn``1(System.String,System.Collections.IList)">
            <summary>
            获取视图集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="propName">属性名称</param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModelsNotIn``1(System.String,System.Data.DataTable)">
            <summary>
            获取模型集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propName"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectViewsNotIn``1(System.String,System.Collections.IList)">
            <summary>
            获取视图集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="propName">属性名称</param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectViews``1(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取视图集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="filter">实体模型的筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectViews``1(System.String,System.Object[])">
            <summary>
            获取视图集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="tSqlWhereFormat">T-SQL 的 WHERE 子句，包含零个或多个的格式化项.</param>
            <param name="args">包含零个或多个需要格式化的对象的 System.Object</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectViews``1">
            <summary>
            获取视图集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectViews``1(HWQ.Entity.LightModels.Limit)">
            <summary>
            获取视图集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectViews``1(System.String)">
            <summary>
            获取视图集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="tSqlWhere">T-SQL 的 WHERE 子句</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectViews``1(System.String,HWQ.Entity.LightModels.Limit)">
            <summary>
            获取视图集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="tSqlWhere">T-SQL 的 WHERE 子句</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectToOneModel(System.Type,HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按条件返回一个实体
            </summary>
            <param name="modelT"></param>
            <param name="filter">实体模型的筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectToOneModel``1(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按条件返回一个实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="filter">实体模型的筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectToOneModel``1(System.String)">
            <summary>
            按条件返回一个实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="tSqlWhere">T-SQL 的 WHERE 子句</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectToOneView``1(System.String)">
            <summary>
            按条件返回一个实体视图
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="tSqlWhere">T-SQL 的 WHERE 子句</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectToOneView``1(System.String,System.Object[])">
            <summary>
            按条件返回一个实体视图
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="tSqlWhereFormat">T-SQL 的 WHERE 子句，包含零个或多个的格式化项.</param>
            <param name="args">包含零个或多个需要格式化的对象的 System.Object</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectToOneModel``1(System.String,System.Object[])">
            <summary>
            按条件返回一个实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="tSqlWhereFormat">T-SQL 的 WHERE 子句，包含零个或多个的格式化项.</param>
            <param name="args">包含零个或多个需要格式化的对象的 System.Object</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectToOneView``1(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按条件获取一个视图
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="filter">实体模型的筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModelByPk``1(System.Object)">
            <summary>
            按关键字获取实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="pkValue">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetBufferModel(System.Type,System.Object)">
            <summary>
            从缓冲池获取实体
            </summary>
            <param name="modelType">实体类型</param>
            <param name="pkValue">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.UpdateBufferModel(System.Object)">
            <summary>
            更新缓冲库中的实体
            </summary>
            <param name="model">实体</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.RemoveBufferData(System.Object)">
            <summary>
            删除缓冲池的实体
            </summary>
            <param name="model">实体</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.RemoveBufferData(System.Type,System.Object)">
            <summary>
            删除缓冲池的实体
            </summary>
            <param name="modelT">实体类型</param>
            <param name="pkValue">实体关键字</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectModelByPk(System.Type,System.Object)">
            <summary>
            按关键字获取实体
            </summary>
            <param name="modelType">实体类型</param>
            <param name="pkValue">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectViewByPk(System.Type,System.Object)">
            <summary>
            按主键获取视图
            </summary>
            <param name="modelType">实体类型</param>
            <param name="pkValue">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectViewByPk``1(System.Object)">
            <summary>
            按关键字获取视图
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="pkValue">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.FillViewData(System.Object)">
            <summary>
            填充视图的数据
            </summary>
            <param name="model">实体</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetDynVFFactoryInstantial(System.Type)">
            <summary>
            获取实例化的
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.FillDynViewData(System.Object)">
            <summary>
            填充动态视图字段
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.ExistsModelByPk``1(System.Object)">
            <summary>
            是否存在
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="pkValue">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.ExistsModels(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            判断是否存在集合
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.ExistsModels``1(System.String)">
            <summary>
            判断是否存在集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="tSqlWhere">T-SQL 的 WHERE 子句</param>
            <returns></returns>
            <remarks>(算法的速度有待改进)</remarks>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.ExistsModels``1(System.String,System.Object[])">
            <summary>
            判断是否存在集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="tSqlWhereFormat">T-SQL 的 WHERE 子句，包含零个或多个的格式化项.</param>
            <param name="args">包含零个或多个需要格式化的对象的 System.Object</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectCount``1">
            <summary>
            获取记录数量
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectCount``1(System.String,System.Object[])">
            <summary>
            按条件获取记录数量
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="tSqlWhereFormat">T-SQL 的 WHERE 子句，包含零个或多个的格式化项.</param>
            <param name="args">包含零个或多个需要格式化的对象的 System.Object</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectCount``1(System.String)">
            <summary>
            按条件获取记录数量
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="tSqlWhere">T-SQL 的 WHERE 子句</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectCount(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            按条件获取记录数量
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectCount(System.Type,System.String)">
            <summary>
            按条件获取记录数量
            </summary>
            <param name="modelT">实体类型</param>
            <param name="tSqlWhere">T-SQL 的 WHERE 子句</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetStringByPk``1(System.Object,System.String)">
            <summary>
            获取字符串
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="pkValue">主键值</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetStringByPk``1(System.Object)">
            <summary>
            获取字符串
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="pkValue">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetModelSet(System.Collections.IList)">
            <summary>
            多查询，返回一个结果
            </summary>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetDataTable``1(System.String[])">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="fields">需要显示的字段集合</param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetDataTable(System.String[],HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <param name="fields">需要显示的字段集合</param>
             <param name="filter">筛选条件</param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.GetDataTable(System.String)">
            <summary>
            获取表
            </summary>
            <param name="sql">Sql 语句</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectGroupBy(HWQ.Entity.LightModels.FilterVFieldCollection,System.String)">
            <summary>
            分组
            </summary>
            <param name="tableName"></param>
            <param name="vFields"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectGroupBy(HWQ.Entity.LightModels.FilterVFieldCollection,System.String,HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            分组
            </summary>
            <param name="tableName"></param>
            <param name="vFields"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectGroupBy``1(System.String[],HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取分组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectChildModels(System.Type,System.Object,System.String)">
            <summary>
            获取子模型集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="parentModel">父实体</param>
            <param name="childFieldName">子实体关联字段</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectChildModels``1(System.Object,System.String,System.String)">
            <summary>
            获取子模型集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="parentModel">父实体</param>
            <param name="parentFieldName">父实体关联字段</param>
            <param name="childFieldName">子实体关联字段</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectChildModels``1(System.Object)">
            <summary>
            获取子模型集合（按父实体的主键关联）
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="parentModel">父实体</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.SelectChildModels``1(System.Object,System.String)">
            <summary>
            获取子模型集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="parentModel">父实体</param>
            <param name="childFieldName">子实体关联字段</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.UpdateModel(System.Object,System.Object)">
            <summary>
            更新实体，连主键也一起更改
            </summary>
            <param name="model">实体</param>
            <param name="oldPkValue"></param>
            <returns></returns>
            <exception cref="!:"></exception>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.UpdateModelPropGroup(System.Object,System.String[])">
            <summary>
            更新字段组的字段
            </summary>
            <param name="model">模型</param>
            <param name="groups">组名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.UpdateModelProps(System.Object,System.String[])">
            <summary>
            更新模型属性
            </summary>
            <param name="model">实体</param>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.UpdateProps``1(HWQ.Entity.LightModels.LightModelFilter,System.Collections.IList)">
            <summary>
            更新模型属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <param name="angs"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.UpdateProps``1(System.String,System.Collections.IList)">
            <summary>
            更新属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tSqlWhere">T-SQL 的 WHERE 语句</param>
            <param name="angs"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.UpdateModel(System.Object)">
            <summary>
            更新实体
            </summary>
            <param name="model">实体</param>
            <returns></returns>
            <example>
            SqlServerDecipher decipher = new SqlServerDecipher(connectionString);
            decipher.Open();
            PARTY p = decipher.SelectModelByPk(20);
            p.NAME = "张飞";
            decipher.UpdateModel(p);
            </example>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.UpdateView(System.Object)">
            <summary>
            更新视图
            </summary>
            <param name="view"></param>
            <returns></returns>
            <example>
            SqlServerDecipher decipher = new SqlServerDecipher(connectionString);
            decipher.Open();
            PARTY p = decipher.SelectModelByPk(20);
            p.NAME = "张飞";
            decipher.UpdateView(p);
            </example>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.UpdateView(System.Object,System.Boolean)">
            <summary>
            更新视图
            </summary>
            <param name="view"></param>
            <param name="onlyUpdateChange"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.UpdateModel(System.Object,System.Boolean)">
            <summary>
            更新实体
            </summary>
            <param name="model">实体对象</param>
            <param name="onlyUpdateChange">是否只更新变化的值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.CreateUpdateOldValueCommand(System.Data.SqlClient.SqlCommand,System.Object,System.Object)">
            <summary>
            构造一条 SQL 语句
            </summary>
            <param name="command"></param>
            <param name="model">实体</param>
            <param name="oldPkValue"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.CreateUpdateCommand(System.Data.SqlClient.SqlCommand,System.Object,System.String[])">
            <summary>
            构造一条 SQL 语句
            </summary>
            <param name="command"></param>
            <param name="model">实体</param>
            <param name="changePropNames">已经弄脏的属性名称集合</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.ConversionDBValue(System.Object,HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            转换为数据库的值
            </summary>
            <param name="value"></param>
            <param name="fieldElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.CreateUpdatePropsCommand``1(System.Data.SqlClient.SqlCommand,HWQ.Entity.LightModels.LModelElement,System.Collections.Generic.SortedList{System.String,System.Object},HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            构造一条 SQL 语句，允许更改只读的字段
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <param name="modelElem"></param>
            <param name="values"></param>
            <param name="filter"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerDecipher.AddCommandParam(System.Text.StringBuilder,System.Data.SqlClient.SqlCommand,HWQ.Entity.LightModels.LModelFieldElement,System.Object,System.String)">
            <summary>
            添加命令参数
            </summary>
            <param name="sb"></param>
            <param name="command"></param>
            <param name="fieldElem"></param>
            <param name="value"></param>
            <param name="expFormat"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerHelper.ToEntitys``1(System.Data.SqlClient.SqlDataReader)">
            <summary>
            输出实体集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerHelper.ToEntitys``1(System.Data.SqlClient.SqlCommand)">
            <summary>
            输出实体集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerHelper.ToStringDictionarys``1(System.Data.SqlClient.SqlDataReader)">
            <summary>
            输出存字符串的字典集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServerHelper.GetString(System.Data.Common.DbDataReader,System.Int32)">
             <summary>
            
             </summary>
             <param name="index">字段索引</param>
             <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.MemoryDatabaseDecipher">
            <summary>
            内存数据库
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder">
            <summary>
            数据库建筑师
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.#ctor">
            <summary>
            数据库建筑师的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.#ctor(HWQ.Entity.Decipher.LightDecipher.DbDecipher)">
            <summary>
            数据库建筑师的构造方法
            </summary>
            <param name="decipher"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.AddPrimaryKey(System.String,System.String)">
            <summary>
            添加主键
            </summary>
            <param name="table"></param>
            <param name="field"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.DropPrimaryKey(System.String,System.String)">
            <summary>
            删除主键
            </summary>
            <param name="table"></param>
            <param name="field"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.ExistTable(System.String)">
            <summary>
            判断表是否存在
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.ExistColumn(System.String,System.String)">
            <summary>
            判断字段是否存在
            </summary>
            <param name="table">表名称</param>
            <param name="col">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.DropTable(System.String)">
            <summary>
            删除表
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.CreateTable(HWQ.Entity.LightModels.LModelElement,System.String)">
            <summary>
            创建数据表
            </summary>
            <param name="modelElem"></param>
            <param name="aliasTableName"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.CreateTable(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            创建数据表
            </summary>
            <param name="modelElem"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.Table_AddExtendedProperty(System.String,System.String)">
            <summary>
            添加表扩展属性
            </summary>
            <param name="tableName"></param>
            <param name="prop"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.Field_AddExtendedProperty(System.String,System.String,System.String)">
            <summary>
            添加字段扩展属性
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="propValue"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.Field_UpdateExtendedProperty(System.String,System.String,System.String)">
            <summary>
            更改扩展字段
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.Field_DropExtendedProperty(System.String,System.String)">
            <summary>
            删除扩展字段
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.GetFieldTxt(HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            获取字段类型
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.DeleteTable``1">
            <summary>
            删除表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.CreateDatabase(System.String)">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.CreateTable``1">
            <summary>
            创建表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.CreateTable(System.Type)">
            <summary>
            创建表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.RenameColumn(System.String,System.String,System.String)">
            <summary>
            重命名
            </summary>
            <param name="table"></param>
            <param name="oldColName"></param>
            <param name="newColName"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.DropColumn(System.String,System.String)">
            <summary>
            删除字段
            </summary>
            <param name="table"></param>
            <param name="colName"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.AlterColumnType(System.String,System.String,HWQ.Entity.LightModels.LMFieldDBTypes,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            改变字段名称
            </summary>
            <param name="table"></param>
            <param name="colName"></param>
            <param name="dbType"></param>
            <param name="mandatory"></param>
            <param name="defaultValue"></param>
            <param name="maxLen"></param>
            <param name="decimalDigits"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.AddColumn(System.String,System.String,HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            添加字段
            </summary>
            <param name="table"></param>
            <param name="colName"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.AddColumn(System.String,HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            添加字段
            </summary>
            <param name="table">表名</param>
            <param name="field">字段名</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.AddColumn(System.String,HWQ.Entity.Xml.XmlFieldElem)">
            <summary>
            添加字段
            </summary>
            <param name="table">表名称</param>
            <param name="field">字段名</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.AddColumn(System.String,System.String,HWQ.Entity.LightModels.LMFieldDBTypes,System.Boolean,System.Boolean,HWQ.Entity.LightModels.StringEncoding,System.String,System.Int32,System.Int32)">
            <summary>
            添加字段
            </summary>
            <param name="table">表名</param>
            <param name="colName">字段名</param>
            <param name="dbType">数据类型</param>
            <param name="mandatory">强制。必填。</param>
            <param name="isRemark">备注字段，或大数据字段。</param>
            <param name="strEncoding">字符串的编码</param>
            <param name="defaultValue">默认值</param>
            <param name="maxLen">数据长度</param>
            <param name="decimalDigits">小数点长度</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.GetTables">
            <summary>
            获取全部表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.GetViews">
            <summary>
            获取全部视图
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.GetModelElemByView(System.String)">
            <summary>
            按表获取实体定义
            </summary>
            <param name="viewName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.InitSysType">
            <summary>
            初始化系统的数据
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.GetModelElemsAll">
            <summary>
            获取所有实体定义
            </summary>
            <returns>实体元素集合</returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.SetDescription(System.String,System.String,System.String)">
            <summary>
            设置描述属性
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <param name="descValue"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.GetDescription(System.String,System.String)">
            <summary>
            获取字段的描述内容
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.GetDescription(System.String)">
            <summary>
            获取表的描述内容
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.GetModelElemByTable(System.String)">
            <summary>
            按表获取实体定义
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.GetTablePk(System.String)">
            <summary>
            获取表的主键
            </summary>
            <param name="tableName"></param>
            <returns>EXEC sp_pkeys @table_name = 'C_DICT_ITEM'  也可以</returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.GetTableIdentity(System.String)">
            <summary>
            获取表的标识
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.Convent(System.String)">
            <summary>
            数据库的类型 转换为 实体的数据类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.CreateTable(HWQ.Entity.Xml.XmlModelElem)">
            <summary>
            创建表
            </summary>
            <param name="xmlModelElem"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DatabaseBuilder.RenameTable(System.String,System.String)">
            <summary>
            数据表名重命名
            </summary>
            <param name="oldTableName">原表名</param>
            <param name="newTableName">新表名</param>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.DbDecipherAction">
            <summary>
            实体操作动作
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipherAction.m_Name">
            <summary>
            动作名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipherAction.m_StartTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherAction.Name">
            <summary>
            动作名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherAction.StartTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherAction.#ctor(System.String)">
            <summary>
            实体操作动作的构造方法
            </summary>
            <param name="name">动作名称</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherAction.#ctor(System.String,System.DateTime)">
            <summary>
            实体操作动作的构造方法
            </summary>
            <param name="name">动作名称</param>
            <param name="dateBegin">开始时间</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherAction.NewAction(System.String)">
            <summary>
            新动作
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.DbDecipherActionCollecton">
            <summary>
            实体操作动作集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.DbDecipherActionCollecton.m_FlashTime">
            <summary>
            最后操作的时间
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherActionCollecton.FlashTime">
            <summary>
            最后操作的时间
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.DbDecipherActionCollecton.Count">
            <summary>
            任务长度
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherActionCollecton.Remove(HWQ.Entity.Decipher.LightDecipher.DbDecipherAction)">
            <summary>
            移除并返回位于 System.Collections.Generic.Stack顶部的对象。
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherActionCollecton.Remove(System.Guid)">
            <summary>
            移除并返回位于 System.Collections.Generic.Stack顶部的对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherActionCollecton.Peed(System.Guid)">
            <summary>
            返回位于 System.Collections.Generic.Stack 顶部的对象但不将其移除。
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherActionCollecton.Add(HWQ.Entity.Decipher.LightDecipher.DbDecipherAction)">
            <summary>
            将对象插入  的顶部。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherActionCollecton.Add(System.String)">
            <summary>
            将对象插入  的顶部。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.DbDecipherActionCollecton.Clear">
            <summary>
            移除所有键和值
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleBuilder.ExistTable(System.String)">
            <summary>
            判断表是否存在
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleBuilder.CreateDatabase(System.String)">
            <summary>
            创建数据库
            </summary>
            <param name="databaseName"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleBuilder.RenameColumn(System.String,System.String,System.String)">
            <summary>
            重命名字段
            </summary>
            <param name="table"></param>
            <param name="oldColName"></param>
            <param name="newColName"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleBuilder.DropPrimaryKey(System.String,System.String)">
            <summary>
            取消主键
            </summary>
            <param name="table"></param>
            <param name="field"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleBuilder.AddPrimaryKey(System.String,System.String)">
            <summary>
            创建主键
            </summary>
            <param name="table"></param>
            <param name="field"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleBuilder.ExistColumn(System.String,System.String)">
            <summary>
            判断表中的字段是否存在
            </summary>
            <param name="table"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.OleBuilder.AddColumn(System.String,System.String,HWQ.Entity.LightModels.LMFieldDBTypes,System.Boolean,System.Boolean,HWQ.Entity.LightModels.StringEncoding,System.String,System.Int32,System.Int32)">
            <summary>
            添加字段
            </summary>
            <param name="table"></param>
            <param name="colName"></param>
            <param name="dbType"></param>
            <param name="mandatory"></param>
            <param name="defaultValue"></param>
            <param name="maxLen"></param>
            <param name="decimalDigits"></param>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder">
            <summary>
            SQL 2005 数据库设计器
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.InitSysType">
            <summary>
            初始化系统的数据
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.GetTables">
            <summary>
            获取全部表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.GetViews">
            <summary>
            获取所有视图表的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.GetModelElemByView(System.String)">
            <summary>
            获取视图表的实体元素
            </summary>
            <param name="viewName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.GetViewElemsAll">
            <summary>
            获取全部视图表元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.ProSchema(System.String,System.String@)">
            <summary>
            处理架构的表
            </summary>
            <param name="tableName"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.SetDescription(System.String,System.String,System.String)">
            <summary>
            设置数据表的描述字段
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <param name="descValue"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.GetDescription(System.String,System.String)">
            <summary>
            获取数据表的描述字段 
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.SetDescription(System.String,System.String)">
            <summary>
            设置表的扩展属性值
            </summary>
            <param name="tableName"></param>
            <param name="descValue"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.GetModelElemByTable(System.String)">
            <summary>
            按表名获取实体定义
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.GetFieldElems(System.Int32)">
            <summary>
            获取字段元素
            </summary>
            <param name="objId"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.CreateTable(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            创建数据表
            </summary>
            <param name="modelElem"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.Table_AddExtendedProperty(System.String,System.String)">
            <summary>
            添加表扩展属性
            </summary>
            <param name="tableName">表名</param>
            <param name="propValue">扩展属性值</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.Table_UpdateExtendedProperty(System.String,System.String)">
            <summary>
            更新表的扩展信息
            </summary>
            <param name="tableName">表名</param>
            <param name="propValue">扩展属性值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.Field_AddExtendedProperty(System.String,System.String,System.String)">
            <summary>
            添加字段扩展属性
            </summary>
            <param name="tableName">表名</param>
            <param name="fieldName">字段名</param>
            <param name="propValue">扩展属性值</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.Field_UpdateExtendedProperty(System.String,System.String,System.String)">
            <summary>
            更改扩展字段
            </summary>
            <param name="tableName">表名</param>
            <param name="fieldName">字段名</param>
            <param name="propValue">扩展属性值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.Field_DropExtendedProperty(System.String,System.String)">
            <summary>
            删除扩展字段
            </summary>
            <param name="tableName">表名</param>
            <param name="fieldName">字段名</param>
            <returns>删除的记录数</returns>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.TableProperty.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.TableProperty.Schema">
            <summary>
            架构名称
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.GetTableDetails">
            <summary>
            获取表的属性信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Builder.GetModelElemByTable(System.Int32)">
            <summary>
            按表名获取实体定义
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServerVFieldFactory.Decipher">
            <summary>
            数据库
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.WebDecipherManage">
            <summary>
            针对 ASP.NET 网站上的 Session 链接管理，防止没有释放连接池
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.LightDecipher.WebDecipherManage.Name">
            <summary>
            HWQ.WebDecipherManage
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.WebDecipherManage.Create">
            <summary>
            创建 WebDecipherManage
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.WebDecipherManage.#ctor">
            <summary>
            网站上的链接管理构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.WebDecipherManage.DisposeAll">
            <summary>
            释放用户当前的全部链接
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Decipher">
            <summary>
            SqlServer2005 实体操作
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Decipher.#ctor">
            <summary>
            (构造函数) SqlServer2005 实体操作 
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Decipher.#ctor(System.String)">
            <summary>
            (构造函数) SqlServer2005 实体操作 
            </summary>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="P:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Decipher.DatabaseBuilder">
            <summary>
            数据库建筑师
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer2005Decipher.GetCommand_Limit(HWQ.Entity.LightModels.LModelElement,HWQ.Entity.LightModels.LightModelFilter,System.Data.Common.DbCommand,System.String[],System.String)">
            <summary>
            处理有分页模式的 Command 对象
            </summary>
            <param name="modelElem">实体元素</param>
            <param name="filter">过滤对象</param>
            <param name="command"></param>
            <param name="fields">字段集合</param>
            <param name="strFields">字符串字段集合</param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher">
            <summary>
            Sql Server 2000/Sql Server 8.0
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.#ctor">
            <summary>
            Sql Server 2000/Sql Server 8.0 的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.#ctor(System.String)">
            <summary>
            Sql Server 2000/Sql Server 8.0 的构造方法
            </summary>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.UpdateModelProps(System.Object,System.String[])">
            <summary>
            更新实体特定字段.
            </summary>
            <param name="model">实体</param>
            <param name="props">字段集合</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.InsertModels``1(System.Collections.Generic.IList{``0},HWQ.Entity.Decipher.LightDecipher.DbDecipherInsertType)">
            <summary>
            插入实体集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="models">实体集合</param>
            <param name="insertType">插入类型,普通类型 | 高速类型</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.InsertModel(System.Object)">
            <summary>
            插入模型对象
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.AddCommandParam(System.Text.StringBuilder,System.Data.Common.DbCommand,HWQ.Entity.LightModels.LModelFieldElement,System.Object,System.String)">
             <summary>
            
             </summary>
             <param name="sb"></param>
             <param name="command"></param>
             <param name="fieldElem"></param>
             <param name="value"></param>
             <param name="expFormat"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.SelectCount(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取记录的总数量
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.DebugWrite(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            调试输出
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.GetConditionString(HWQ.Entity.LightModels.LightModelFilter,HWQ.Entity.Filter.ConditionGroup,System.Text.StringBuilder,System.Data.Common.DbCommand,System.Int32,HWQ.Entity.Filter.ExprTypes)">
            <summary>
            获取条件的连接字符串
            </summary>
            <param name="filter"></param>
            <param name="conditionGroup"></param>
            <param name="sb"></param>
            <param name="command"></param>
            <param name="n"></param>
            <param name="exprType"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.GetEntityIdentity(System.String)">
            <summary>
            获取用户控制的id
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.UpdateSModel(HWQ.Entity.LightModels.SModel,System.String,System.String)">
            <summary>
            更新 SModel 
            </summary>
            <param name="model">实体</param>
            <param name="tableName">表名</param>
            <param name="tSqlWhere">T-SQL 的 Where 语句</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.Create_InsertCommand(HWQ.Entity.LightModels.SModel,System.String,System.Boolean)">
            <summary>
            创建 SModel 的插入命令
            </summary>
            <param name="model"></param>
            <param name="tableName"></param>
            <param name="existIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.InsertSModel(System.String,HWQ.Entity.LightModels.SModel,System.Int32@)">
            <summary>
            插入 SModel 
            </summary>
            <param name="model"></param>
            <param name="tableName"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.InsertSModel(System.String,HWQ.Entity.LightModels.SModel)">
            <summary>
            插入 SModel 
            </summary>
            <param name="model"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.SqlServer8Decipher.InsertTable(System.String,System.Data.DataTable,HWQ.Entity.Decipher.LightDecipher.DbDecipherInsertType)">
            <summary>
            批量插入模型集合
            </summary>
            <param name="tableName">表名</param>
            <param name="table">数据表</param>
            <param name="insertType">插入模式</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.LightDecipher.XmlEntityFile.Open(System.String)">
            <summary>
            打开文件
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:HWQ.Entity.Decipher.ModelBuffer">
            <summary>
            这个缓冲区必须支持多关键字
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.ModelBuffer.m_ModelBuffer">
            <summary>
            缓冲区
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.ModelReader">
            <summary>
            返回按顺序读取的数据流
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.ModelReader.m_PkFields">
            <summary>
            主键字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.ModelReader.m_LocaleFields">
            <summary>
            需要本地化的字段集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.ModelReader.Culture">
            <summary>
            本地化语言代码
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.ModelReader.Locale">
            <summary>
            本地化
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.ModelReader.Item(System.Int32)">
            <summary>
            获取记录的值
            </summary>
            <param name="ordinal">索引好</param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.Decipher.ModelReader.Item(System.String)">
            <summary>
            获取记录的值
            </summary>
            <param name="fieldName">字段名称</param>
            <returns>字段值</returns>
        </member>
        <member name="P:HWQ.Entity.Decipher.ModelReader.IsClosed">
            <summary>
            获取一个值,该值指示 ModelReader 是否已经关闭
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.ModelReader.RecordsAffected">
            <summary>
            获取一个值，该值指示 RecordsAffected 是否包含一行或多行。
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.ModelReader.#ctor(System.Data.Common.DbDataReader,System.String)">
            <summary>
            ModelReader 构造方法
            </summary>
            <param name="dataReader"></param>
            <param name="modelName"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.ModelReader.#ctor(System.Data.Common.DbDataReader,System.Type)">
            <summary>
            ModelReader 构造方法
            </summary>
            <param name="dataReader"></param>
            <param name="modelType"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.ModelReader.SetLocale(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            设置本地化参数
            </summary>
            <param name="culture">本地化语言代码</param>
            <param name="conn">数据链接</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.ModelReader.BuilderLocaleSql(HWQ.Entity.Common.DataModelElement)">
            <summary>
            开始构造本地化的 Sql 参数
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.ModelReader.Read">
            <summary>
            将读取器前进到结果集中的下一个记录。
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.ModelReader.ToDataRow(System.Data.DataRow)">
            <summary>
            转换成为数据行
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.ModelReader.GetModel``1">
            <summary>
            获取记录当前的模型实例
            </summary>
            <typeparam name="ModelT"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.ModelReader.GetModel">
            <summary>
            (作废)获取记录当前的模型实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.ModelReader.Close">
            <summary>
            关闭 ModelReader 对象
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.ModelReader.NextResult">
            <summary>
            读取批处理语句的结果时，使读取器前进到下一个结果。
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.ModelReader.Dispose">
            <summary>
            系统垃圾处理
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.DataTableByFilterDPack">
            <summary>
            [Type:9]
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.DataTableByFilterDPack.TYPE">
            <summary>
            [Type:9]
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.DataTableByFilterDPack.m_CommandName">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.DataTableByFilterDPack.m_ModelFullName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.DataTableByFilterDPack.m_Joins">
            <summary>
            关联查询
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.DataTableByFilterDPack.LimitMaxRows">
            <summary>
            每页显示的记录数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.DataTableByFilterDPack.LimitStartRowIndex">
            <summary>
            开始记录的位置
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.DataTableByFilterDPack.Percent">
            <summary>
            百分比
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.DataTableByFilterDPack.CondElems">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.DataTableByFilterDPack.Joins">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.DataTableByFilterDPack.CommandName">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.DataTableBySqlDPack">
            <summary>
            获取数据表
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.DataTableBySqlDPack.TYPE">
            <summary>
            [Type:8]
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.DeleteDPack">
            <summary>
            删除命令的数据包
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.DeleteDPack.TYPE">
            <summary>
            [Type:7]
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.DeleteDPack.m_CommandName">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.DeleteDPack.m_ModelFullName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.DeleteDPack.CondElems">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.DeleteDPack.CommandName">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.InsertDPack">
             <summary>
            
             </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.InsertDPack.TYPE">
            <summary>
            [Type:5]
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.InsertDPack.State">
            <summary>
            状态  1=开始，2=结束 ,3 =成功 ,5 =失败
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.MultiSelectDPack">
            <summary>
            多查询
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.MultiSelectDPack.TYPE">
            <summary>
            [Type:11]
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.MultiSelectDPack.SelectCmd">
            <summary>
            查询的命令
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.NetDataConnectDPack">
            <summary>
            Net 的数据通道链接
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetDataConnectDPack.TYPE">
            <summary>
            [Type:4]
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetDataConnectDPack.ConnectionGuid">
            <summary>
            安全链接的GUID
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.NetModelDPack">
            <summary>
            网络实体
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetModelDPack.TYPE">
            <summary>
            [Type:3]网络实体
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetModelDPack.#ctor">
            <summary>
            网络实体的构造方法
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.NextResultDPack">
            <summary>
            下一条记录
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NextResultDPack.TYPE">
            <summary>
            [Type:12]下一条记录
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NextResultDPack.IsReturnData">
            <summary>
            是否需要返回数据
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NextResultDPack.Success">
            <summary>
            操作成功与否
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NextResultDPack.#ctor">
            <summary>
            [Type:12]网络实体的构造方法
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.ResultCloseDPack">
            <summary>
            ResultCloseDPack
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.ResultCloseDPack.TYPE">
            <summary>
            [Type:13]
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.ReturnDPack">
            <summary>
            返回的数据包
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.ReturnDPack.TYPE">
            <summary>
            [Type:2]
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.ReturnDPack.RowCount">
            <summary>
            返回的数据通道的记录数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.ReturnDPack.Fields">
            <summary>
            DataTable 的字段集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.ReturnDPack.FieldTypes">
            <summary>
            DataTable 的数据类型
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.ReturnDPack.#ctor">
            <summary>
            返回的数据包
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.ReturnDPack.SetFieldTypes(System.String[])">
            <summary>
            DataTable 的字段类型
            </summary>
            <param name="fieldTypes"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.ReturnDPack.GetFieldTypes">
            <summary>
            获取字段的数据类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.ReturnDPack.SetFields(System.String[])">
            <summary>
            设置字段的数据类型
            </summary>
            <param name="fields"></param>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.SelectDPack">
            <summary>
            查询内容
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.SelectDPack.TYPE">
            <summary>
            [Type:1]
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.SelectDPack.m_CommandName">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.SelectDPack.m_ModelFullName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.SelectDPack.m_Joins">
            <summary>
            关联查询
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.SelectDPack.LimitMaxRows">
            <summary>
            每页显示的记录数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.SelectDPack.LimitStartRowIndex">
            <summary>
            开始记录的位置
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.SelectDPack.Percent">
            <summary>
            百分比
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.SelectDPack.ReturnType">
            <summary>
            返回的对象类型,默认 DataTable
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.SelectDPack.Fields">
            <summary>
            只返回的字段
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.SelectDPack.CondElems">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.SelectDPack.Joins">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.SelectDPack.CommandName">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.TransactionDPack">
            <summary>
            事务的数据包
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.TransactionDPack.TYPE">
            <summary>
            [Type:10]
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.TransactionDPack.TranType">
            <summary>
            事务命令
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.UpdateDPack">
            <summary>
            更新数据包
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.UpdateDPack.TYPE">
            <summary>
            [Type:6]
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.UpdateDPack.m_CommandName">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.UpdateDPack.m_Fields">
            <summary>
            字段名称集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.UpdateDPack.m_ModelFullName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.UpdateDPack.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.UpdateDPack.Fields">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.UpdateDPack.CommandName">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.TranType.BeginTran">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.TranType.Commit">
            <summary>
            事务提交
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.TranType.Rollback">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.NetDataReader">
             <summary>
            
             </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetDataReader.m_Table">
            <summary>
            临时定义
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetDataReader.m_SendReadPackCount">
            <summary>
            发送的命令
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetDataReader.m_GetReadDataCount">
            <summary>
            获取数据包的
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetDataReader.FieldCount">
            <summary>
            字段数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetDataReader.IsClosed">
            <summary>
            是否已经关闭
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetDataReader.Item(System.String)">
            <summary>
            索引
            </summary>
            <param name="name">字段名称</param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetDataReader.Item(System.Int32)">
            <summary>
            索引
            </summary>
            <param name="ordinal">字段索引</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetDataReader.IsDBNull(System.Int32)">
            <summary>
            是否为空字段
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetDataReader.NextResult">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetDataReader.Read">
            <summary>
            向下读取
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.NetClientDecipher">
            <summary>
            网络客户端
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetClientDecipher.m_NetCmd">
            <summary>
            net 命令传送通道
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetClientDecipher.m_NetData">
            <summary>
            net 数据传送通道
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetClientDecipher.m_NetDataGuid">
            <summary>
            数据通道的 GUID
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetClientDecipher.m_ConnectionGuid">
            <summary>
            链接 GUID
            </summary>
        </member>
        <member name="E:HWQ.Entity.Decipher.Net.NetClientDecipher.Closed">
            <summary>
            关闭服务器触发的事件
            </summary>
        </member>
        <member name="E:HWQ.Entity.Decipher.Net.NetClientDecipher.Opened">
            <summary>
            打开服务器触发的事件
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetClientDecipher.ConnectionGuid">
            <summary>
            链接 GUID
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetClientDecipher.State">
            <summary>
            链接状态
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.OnClosed">
            <summary>
            关闭服务器触发的事件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.OnOpened">
            <summary>
            打开服务器触发的事件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.Open(System.String)">
             <summary>
            
             </summary>
             <param name="ip"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.Open">
             <summary>
            
             </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.InitRemoteID">
            <summary>
            初始化远程 GUID
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.SelectModels``1(HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="filter"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.GetSelectDPack(HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <param name="filter"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.SelectModels(HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <param name="filter"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.GetModels(HWQ.Entity.LightModels.LightModelFilter,HWQ.Entity.Decipher.Net.ReturnDPack)">
             <summary>
            
             </summary>
             <param name="filter"></param>
             <param name="returnPack"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.GetFilters(System.Collections.IList)">
             <summary>
            
             </summary>
             <param name="filters"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.GetModelSet(System.Collections.IList)">
             <summary>
            
             </summary>
             <param name="filters"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.InsertModel(System.Object)">
             <summary>
            
             </summary>
             <param name="model"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.DeleteModels(HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <param name="filter"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.Wait(System.UInt16,System.Int32)">
            <summary>
            等待
            </summary>
            <param name="typeID"></param>
            <param name="overtime"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.WaitData(System.UInt16,System.Int32,HWQ.Entity.Decipher.Net.NextResultDPack)">
            <summary>
            等待
            </summary>
            <param name="typeID"></param>
            <param name="overtime"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.Wait(System.UInt16,System.Int32,HWQ.Entity.Decipher.Net.ReturnDPack)">
            <summary>
            等待
            </summary>
            <param name="typeID"></param>
            <param name="overtime"></param>
            <param name="returnDPack"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.BeginTransaction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.TransactionCommit">
            <summary>
            事务提交
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.TransactionRollback">
            <summary>
            会滚事务
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.SelectCount(HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <param name="filter"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.SelectToOneModel(HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <param name="filter"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.SelectToOneModel``1(HWQ.Entity.LightModels.LightModelFilter)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="filter"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.GetDataTable(System.String)">
             <summary>
            
             </summary>
             <param name="sql"></param>
             <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.GetDataTable(System.String[],HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            获取 DataTable
            </summary>
            <param name="fields"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.IsConnent">
            <summary>
            判断是否链接
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.UpdateCommand(System.String[],HWQ.Entity.LightModels.LModelElement,System.Data.Common.DbCommand,HWQ.Entity.LightModels.LightModelFilter,System.Type,System.Object)">
            <summary>
            无效
            </summary>
            <param name="updateFields"></param>
            <param name="modelElem"></param>
            <param name="command"></param>
            <param name="filter"></param>
            <param name="modelT"></param>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.UpdatePropsCommand(System.Data.Common.DbCommand,HWQ.Entity.LightModels.LModelElement,System.Collections.Generic.SortedList{System.String,System.Object},HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            无效
            </summary>
            <param name="command"></param>
            <param name="modelElem"></param>
            <param name="values"></param>
            <param name="filter"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetClientDecipher.GetConditionString(HWQ.Entity.LightModels.LightModelFilter,HWQ.Entity.Filter.ConditionGroup,System.Text.StringBuilder,System.Data.Common.DbCommand,System.Int32,HWQ.Entity.Filter.ExprTypes)">
            <summary>
            无效
            </summary>
            <param name="filter"></param>
            <param name="group"></param>
            <param name="sb"></param>
            <param name="command"></param>
            <param name="n"></param>
        </member>
        <member name="T:HWQ.Entity.Decipher.Net.NetServerDecipher">
            <summary>
            网络服务器 Decipher
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetServerDecipher.m_ConnectionGuid">
            <summary>
            链接 GUID
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetServerDecipher.m_RealtimeClose">
            <summary>
            即时关闭。快速释放连接池
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetServerDecipher.m_Overtime">
            <summary>
            超时就自动断开链接
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetServerDecipher.m_OuputNDPackCount">
            <summary>
            已经处理的数据包数据量
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetServerDecipher.m_CurrentOuputNDPackCount">
            <summary>
            当前处理的数据量
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.Net.NetServerDecipher.m_LastProOvertime">
            <summary>
            最后处理超时的连接
            </summary>
        </member>
        <member name="E:HWQ.Entity.Decipher.Net.NetServerDecipher.ServerClosed">
            <summary>
            关闭服务器触发的事件
            </summary>
        </member>
        <member name="E:HWQ.Entity.Decipher.Net.NetServerDecipher.ServerOpen">
            <summary>
            打开服务器触发的事件
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetServerDecipher.ConnectionGuid">
            <summary>
            链接 GUID ,默认 f95a1d9c-ae6b-4c37-96dd-b76ccb0d2f37
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetServerDecipher.RealtimeClose">
            <summary>
            即时关闭。快速释放连接池
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetServerDecipher.ConnectionPoolCount">
            <summary>
            连接池数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetServerDecipher.Overtime">
            <summary>
            超时就自动断开链接
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetServerDecipher.OuputNDPackCount">
            <summary>
            已经处理的数据包数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetServerDecipher.DecipherType">
             <summary>
            
             </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetServerDecipher.DbConnectionString">
            <summary>
            数据链接字符串
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetServerDecipher.ClientCount">
            <summary>
            获取客户端数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetServerDecipher.InputCount">
            <summary>
            获取网络接收的字节数据量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.Net.NetServerDecipher.OuputCount">
            <summary>
            获取发送的字节数据量
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.OnMulitiSelect(HWQ.Entity.Net.NetServer.Client,HWQ.Entity.Decipher.Net.MultiSelectDPack)">
            <summary>
            多查询
            </summary>
            <param name="client"></param>
            <param name="pack"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.OnTran(HWQ.Entity.Net.NetServer.Client,HWQ.Entity.Decipher.Net.TransactionDPack)">
            <summary>
            事务
            </summary>
            <param name="client"></param>
            <param name="pack"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.OnInsert(HWQ.Entity.Net.NetServer.Client,HWQ.Entity.Decipher.Net.InsertDPack)">
            <summary>
            处理插入预计
            </summary>
            <param name="client"></param>
            <param name="pack"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.OnSelectModels(HWQ.Entity.Net.NetServer.Client,HWQ.Entity.Decipher.Net.SelectDPack)">
            <summary>
            选择实体
            </summary>
            <param name="client"></param>
            <param name="pack"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.OnSelectCount(HWQ.Entity.Net.NetServer.Client,HWQ.Entity.Decipher.Net.SelectDPack)">
            <summary>
            获取数量
            </summary>
            <param name="client"></param>
            <param name="pack"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.SendDataTable(HWQ.Entity.Net.NetServer.Client,HWQ.Entity.Net.NetServer.Client,System.Data.DataTable,System.Byte)">
            <summary>
            发送 DataTable 给客户端
            </summary>
            <param name="client"></param>
            <param name="netData"></param>
            <param name="table"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.GetDataTunnel(System.Guid)">
            <summary>
            获取数据通道
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.OnServerClosed">
            <summary>
            关闭服务器触发的事件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.OnServerOpen">
            <summary>
            打开服务器触发的事件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.Clear">
            <summary>
            清除玩家
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.#ctor">
            <summary>
            网络 Decipher 的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.ProClientOvertime">
            <summary>
            处理超时的链接
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.ProClient">
            <summary>
            处理数据包
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.ProDataPack">
            <summary>
            处理接收到的信息
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.GetClientDecipher(System.Guid)">
            <summary>
            获取客户端 Decipher
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.InitDbDecipher(System.Guid)">
            <summary>
            初始化 Decipher
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.ProClientNews">
            <summary>
            处理新链接的客户
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.ProClientExits">
            <summary>
            处理退出的客户
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.Stop">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.Start(System.Int32)">
            <summary>
            启动服务器
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.Net.NetServerDecipher.ProDataPackItem(HWQ.Entity.Net.NetServer.Client,HWQ.Entity.Net.NetDataPack)">
            <summary>
            处理数据包
            </summary>
            <param name="c"></param>
            <param name="pack"></param>
            <returns></returns>
        </member>
        <member name="F:HWQ.Entity.Decipher.SqlServerDecipher.m_Connection">
            <summary>
            作为允许会滚的数据链接
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.SqlServerDecipher.m_ConnectionForOther">
            <summary>
            作为不回滚的数据链接
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.SqlServerDecipher.m_SysModel">
            <summary>
            系统模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.SqlServerDecipher.m_Locale">
            <summary>
            本地化
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.SqlServerDecipher.m_Culture">
            <summary>
            本地化代码
            </summary>
        </member>
        <member name="F:HWQ.Entity.Decipher.SqlServerDecipher.m_DefaultCulture">
            <summary>
            默认本地化代码
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.SqlServerDecipher.Locale">
            <summary>
            本地化，默认关闭
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.SqlServerDecipher.Culture">
            <summary>
            本地化代码,默认 zh-CN
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.SqlServerDecipher.DefaultCulture">
            <summary>
            默认本地化代码
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.SqlServerDecipher.SysModel">
            <summary>
            系统模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.SqlServerDecipher.Connection">
            <summary>
            表示一个 Sql Server 打开的链接
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.SqlServerDecipher.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:HWQ.Entity.Decipher.SqlServerDecipher.ConnectionString">
            <summary>
            数据库链接字符串
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.UpdateModel(HWQ.Entity.EntityModel.IModel)">
            <summary>
            更新实体
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.UpdateModel(HWQ.Entity.EntityModel.IModel,System.Boolean)">
            <summary>
            更新实体
            </summary>
            <param name="model"></param>
            <param name="updateChangeFieldOnly">是否只更新更改的字段</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.UpdateModels(HWQ.Entity.EntityModel.ModelArray)">
            <summary>
            集体更新实体
            </summary>
            <param name="models"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.UpdateModels(HWQ.Entity.EntityModel.ModelArray,System.Boolean)">
            <summary>
            集体更新实体
            </summary>
            <param name="models"></param>
            <param name="updateChangeFieldOnly"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.InsertModel(HWQ.Entity.EntityModel.IModel)">
            <summary>
            插入实体
            </summary>
            <param name="model">实体对象</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.InsertModelRow(HWQ.Entity.EntityModel.IModel,System.Data.SqlClient.SqlCommand,HWQ.Entity.EntityModel.FieldElementArray@)">
            <summary>
            构造插入实体的字段值
            </summary>
            <param name="model"></param>
            <param name="command"></param>
            <param name="fieldElems"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.InsertInheritModel(HWQ.Entity.EntityModel.IModel)">
            <summary>
            插入继承的实体(已经取消)
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.InsertModels(HWQ.Entity.EntityModel.ModelArray)">
            <summary>
            插入实体集合
            </summary>
            <param name="models"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.InsertChildModels(HWQ.Entity.EntityModel.IModel,System.String,System.Object[])">
            <summary>
            插入子实体
            </summary>
            <param name="model"></param>
            <param name="childModelName">子模型的名称</param>
            <param name="childPkValues">子模型主键值</param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.InsertChildModel(HWQ.Entity.EntityModel.IModel,HWQ.Entity.EntityModel.IModel)">
            <summary>
            插入子实体
            </summary>
            <param name="model"></param>
            <param name="childModel"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.InsertChildModels(HWQ.Entity.EntityModel.IModel,HWQ.Entity.EntityModel.ModelArray)">
            <summary>
            插入子实体集合
            </summary>
            <param name="model"></param>
            <param name="childModels"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.BeginTransaction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.TransactionCommit">
            <summary>
            事务提交
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.TransactionRollback">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.Open">
            <summary>
            打开数据库链接
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.Close">
            <summary>
            关闭数据库链接
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.GetNewIdByClassId(System.String)">
            <summary>
            按类编号获取新 ID
            </summary>
            <param name="classId">类模型</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.GetNewIdByModel(HWQ.Entity.EntityModel.IModel)">
            <summary>
            按表名称获取新 ID
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.GetNewIdByModel(System.String)">
            <summary>
            按模型名称获取新 ID
            </summary>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.GetNewIdByTableName(System.String)">
            <summary>
            按表名称获取新 ID
            </summary>
            <param name="tableName">表名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.GetClassId(System.String)">
            <summary>
            获取类编号
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.GetTableName(System.String)">
            <summary>
            获取表名称
            </summary>
            <param name="classId"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.Exist(HWQ.Entity.Filter.ModelFilter)">
            <summary>
            是否存在(有待改进算法)
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.ExistByModel(HWQ.Entity.EntityModel.IModel)">
            <summary>
            是否存在
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.ExistByPk(System.String,System.Object)">
            <summary>
            是否存在
            </summary>
            <param name="modelName"></param>
            <param name="pkValue">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.CreateDatabase">
            <summary>
            创建数据库，初始化表
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.CreateDatabase(System.Collections.Generic.IList{HWQ.Entity.Common.DataModelElement})">
            <summary>
            创建数据库，初始化表
            </summary>
            <param name="modelElems"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.CreateDatabaseTabel(HWQ.Entity.Common.DataModelElement)">
            <summary>
            创建数据库，初始化表
            </summary>
            <param name="modelElem"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.CreateSysEmable">
            <summary>
            创建id号
            </summary>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.DeleteModel(HWQ.Entity.EntityModel.IModel)">
            <summary>
            删除模型
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.DeleteModels(HWQ.Entity.EntityModel.ModelArray)">
            <summary>
            删除模型集合
            </summary>
            <param name="models"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.DeleteAllModels(System.String)">
            <summary>
            删除模型的全部数据
            </summary>
            <param name="modelName"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.DeleteModelsForPk(System.String,System.Object[])">
            <summary>
            按关键字删除实体
            </summary>
            <param name="modelName"></param>
            <param name="pkValues"></param>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.DeleterChildModels(HWQ.Entity.EntityModel.IModel,System.String,System.Object[])">
            <summary>
            删除子模型.按子模型关键字
            </summary>
            <param name="model"></param>
            <param name="childModelName"></param>
            <param name="childPkValues"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.DeleterAllChildModels(HWQ.Entity.EntityModel.IModel,System.String)">
            <summary>
            删除所有子模型
            </summary>
            <param name="model"></param>
            <param name="childModelName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.DeleterChildModel(HWQ.Entity.EntityModel.IModel,HWQ.Entity.EntityModel.IModel)">
            <summary>
            删除单个子模型
            </summary>
            <param name="model"></param>
            <param name="childModel"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.GetModelReader(System.String)">
            <summary>
            返回按顺序读取的模型对象流
            </summary>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.GetModelReader(System.Type)">
            <summary>
            返回按顺序读取的模型对象流
            </summary>
            <param name="modelType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.GetModelReader(HWQ.Entity.Filter.ModelFilter)">
            <summary>
            返回按顺序读取的模型对象流
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.GetChildModelReader(HWQ.Entity.EntityModel.IModel,HWQ.Entity.Filter.ModelFilter)">
            <summary>
            获取子模型
            </summary>
            <param name="model"></param>
            <param name="childModelFilter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.CountModels(HWQ.Entity.Filter.ModelFilter)">
            <summary>
            获取记录数量
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectModelsForPage(HWQ.Entity.Filter.ModelFilter,System.Int32,System.Int32)">
            <summary>
            按页显示
            </summary>
            <param name="filter"></param>
            <param name="start"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectModels(System.String)">
            <summary>
            选择模型，返回所有记录
            </summary>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectModels(System.String,System.String)">
            <summary>
            选择模型，返回筛选的记录
            </summary>
            <param name="modelName"></param>
            <param name="tSqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectModels(System.Type)">
            <summary>
            选择模型，返回所有记录
            </summary>
            <param name="modelType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectModels(HWQ.Entity.Filter.ModelFilter)">
            <summary>
            选择模型，按条件筛选
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectModelByPk(System.String,System.Object)">
            <summary>
            按主键查找模型
            </summary>
            <param name="modelName"></param>
            <param name="pkValue">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectModelByPk(System.Type,System.Object)">
            <summary>
            按主键查找模型
            </summary>
            <param name="modelType"></param>
            <param name="pkValue">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectModelByPk``1(System.Object)">
            <summary>
            按主键查找模型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValue">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectToOneModel(System.String,HWQ.Entity.Filter.ModelFilter)">
            <summary>
            按条件返回一个实体
            </summary>
            <param name="modelName"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectToOneModel(System.Type,HWQ.Entity.Filter.ModelFilter)">
            <summary>
            按条件返回一个实体
            </summary>
            <param name="modelType"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectToOneModel(HWQ.Entity.Filter.ModelFilter)">
            <summary>
            按条件返回一个实体
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectToOneModel``1(HWQ.Entity.Filter.ModelFilter)">
            <summary>
            按条件返回一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectToOneModel(System.String,System.String,System.Object)">
            <summary>
            按条件返回一个实体
            </summary>
            <param name="modelName"></param>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectToOneModel(System.Type,System.String,System.Object)">
            <summary>
            按条件返回一个实体
            </summary>
            <param name="modelType"></param>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectChildModels(System.String,System.Object,System.String)">
            <summary>
            获取子模型集合
            </summary>
            <param name="modelName">父模型名称</param>
            <param name="pkValue">父关键值</param>
            <param name="childModelName">子模型名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectRelationModelPk(System.String,System.Object,System.String)">
            <summary>
            获取关联表子元素的键值
            </summary>
            <param name="modelName"></param>
            <param name="pkValue">主键值</param>
            <param name="childModelName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectRelationModelPk(HWQ.Entity.EntityModel.IModel,System.String)">
            <summary>
            获取关联子表的主键集合
            </summary>
            <param name="model">父模型实例</param>
            <param name="childModelName">子模型名称</param>
            <returns>子表主键集合</returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectRelationModels(System.String,System.Object,System.String)">
            <summary>
            获取中间表的集合
            </summary>
            <param name="modelName">父模型名称</param>
            <param name="pkValue">父模型的主键值</param>
            <param name="childModelName">子模型名称</param>
            <returns>子模型集合</returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectRelationModels(HWQ.Entity.EntityModel.IModel,System.String)">
            <summary>
            获取中间表的集合
            </summary>
            <param name="model">父模型实例</param>
            <param name="childModelName">子模型名称</param>
            <returns>关联表的实例集合</returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectChildModels(HWQ.Entity.EntityModel.IModel,System.String)">
            <summary>
            获取子模型集合
            </summary>
            <param name="model">父模型实例</param>
            <param name="childModelName">子模型名称</param>
            <returns>子模型集合</returns>
        </member>
        <member name="M:HWQ.Entity.Decipher.SqlServerDecipher.SelectChildModels(HWQ.Entity.EntityModel.IModel,HWQ.Entity.Filter.ModelFilter)">
            <summary>
            获取子模型集合
            </summary>
            <param name="model">父模型实例</param>
            <param name="childFilter">子模型的筛选条件</param>
            <returns>子模型集合</returns>
        </member>
        <member name="T:HWQ.Entity.Diagnostics.TraceExecType">
            <summary>
            执行的类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.Diagnostics.TraceExecType.Model">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.Diagnostics.TraceExecType.TSql">
            <summary>
            TSql 语句
            </summary>
        </member>
        <member name="T:HWQ.Entity.Diagnostics.TraceOperateEventArgs">
            <summary>
            操作函数
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOperateEventArgs.OpMethod">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOperateEventArgs.OpTime">
            <summary>
            操作的时间
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOperateEventArgs.ExecTimeSpan">
            <summary>
            操作的时间间隔(毫秒)Elapsed.TotalMilliseconds
            </summary>
        </member>
        <member name="T:HWQ.Entity.Diagnostics.TraceOpListEventArgs">
            <summary>
            操作数组
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpListEventArgs.Data">
            <summary>
            操作的数据
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpListEventArgs.IsBatchCopy">
            <summary>
            批次操作
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpListEventArgs.Count">
            <summary>
            操作的记录数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpListEventArgs.Table">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpListEventArgs.TSqlWhere">
            <summary>
            自定义的 T-SQL Where 子句
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpListEventArgs.UpdateFields">
            <summary>
            更新操作的字段集合
            </summary>
        </member>
        <member name="T:HWQ.Entity.Diagnostics.TraceOpModelEventArgs">
            <summary>
            操作数组
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpModelEventArgs.Data">
            <summary>
            操作的数据
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpModelEventArgs.Table">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpModelEventArgs.TSqlWhere">
            <summary>
            自定义的 T-SQL Where 子句
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpModelEventArgs.UpdateFields">
            <summary>
            更新操作的字段集合
            </summary>
        </member>
        <member name="T:HWQ.Entity.Diagnostics.TraceOpTSqlEventArgs">
            <summary>
            执行 SQL 语句
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpTSqlEventArgs.UpdateData">
            <summary>
            更新的对象, 
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpTSqlEventArgs.UpdateFields">
            <summary>
            更新的字段集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpTSqlEventArgs.Table">
            <summary>
            更新的表名
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpTSqlEventArgs.TSql">
            <summary>
            T-SQL 语句
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpTSqlEventArgs.Params">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:HWQ.Entity.Diagnostics.TraceOpTSqlEventArgs.Count">
            <summary>
            操作的记录数量
            </summary>
        </member>
        <member name="T:HWQ.Entity.Diagnostics.TraceOperateMethod">
            <summary>
            跟踪操作的类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.Diagnostics.TraceOperateMethod.Insert">
            <summary>
            插入操作
            </summary>
        </member>
        <member name="F:HWQ.Entity.Diagnostics.TraceOperateMethod.Update">
            <summary>
            更新操作
            </summary>
        </member>
        <member name="F:HWQ.Entity.Diagnostics.TraceOperateMethod.Delete">
            <summary>
            删除操作
            </summary>
        </member>
        <member name="F:HWQ.Entity.Diagnostics.TraceOperateMethod.Select">
            <summary>
            查询操作
            </summary>
        </member>
        <member name="T:HWQ.Entity.Diagnostics.TraceOperateDelegate">
            <summary>
            操作跟踪
            </summary>
        </member>
        <member name="T:HWQ.Entity.Diagnostics.ITraecOperate">
            <summary>
            操作跟踪
            </summary>
        </member>
        <member name="M:HWQ.Entity.Diagnostics.ITraecOperate.Send(System.Object,HWQ.Entity.Diagnostics.TraceOperateEventArgs)">
            <summary>
            发送
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:HWQ.Entity.EntityAction.ActionModel">
            <summary>
            动作模型（业务模型）
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityAction.ActionModel.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityAction.ActionModel.Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityAction.ActionModel.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityAction.ChangeCondition.m_ListenIn">
            <summary>
            获取或设置监听字段的值
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityAction.MIsletsDataTypes">
            <summary>
            数据岛节点的数据类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityAction.MIsletsDataTypes.Model">
            <summary>
            模型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityAction.MIsletsDataTypes.Models">
            <summary>
            模型集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityAction.MIsletsDataTypes.Auto">
            <summary>
            自动检测
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityAction.ModelIslets">
            <summary>
            模型岛（数据集）
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityAction.ModelIsletsNode">
            <summary>
            模型岛节点
            </summary>
        </member>
        <member name="E:HWQ.Entity.EntityAction.ModelIsletsNode.MIsletsDataChange">
            <summary>
            模型数据发生变化的事件
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityAction.ModelIsletsNode.m_Nodes">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityAction.ModelIsletsNode.m_DataModelName">
            <summary>
            数据的模型名称
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityAction.ModelIsletsNode.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityAction.ModelIsletsNode.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityAction.ModelIsletsNode.Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityAction.ModelIsletsNode.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityAction.ModelIsletsNode.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityAction.ModelIsletsNode.DataModelName">
            <summary>
            数据岛的模型名称
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.DefaultFieldDisplayType">
            <summary>
            字段默认显示类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.DefaultFieldDisplayType.TypeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.DefaultFieldDisplayType.DisplayText">
            <summary>
            显示内容
            </summary>
            <![CDATA[
            单项框
            v1=男;v2=女;
            ]]>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ChildModelElement">
            <summary>
            数据模型的子关联表
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ChildModelElement.m_ChildModelName">
            <summary>
            目标模型名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ChildModelElement.m_ChildFieldName">
            <summary>
            目标模型的字段名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ChildModelElement.m_RelationModelName">
            <summary>
            中间关联表，当有多对多关系的时候才使用这个字段
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ChildModelElement.#ctor(System.String)">
            <summary>
            数据模型的子关联表
            </summary>
            <param name="childModelName">子模型名称</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ChildModelElement.#ctor(System.String,HWQ.Entity.EntityModel.RelationTypes)">
            <summary>
            数据模型的子关联表
            </summary>
            <param name="childModelName">子表名称</param>
            <param name="relationType">关联类型</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ChildModelElement.#ctor(System.String,System.String)">
            <summary>
            数据模型的子关联表
            </summary>
            <param name="childModelName">数据模型的子关联表</param>
            <param name="relationModelName">中间关联模型名称，当属于多对多使用就必须使用。</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ChildModelElement.#ctor(System.String,System.String,HWQ.Entity.EntityModel.RelationTypes)">
            <summary>
            数据模型的子关联表
            </summary>
            <param name="childModelName">数据模型的子关联表</param>
            <param name="relationModelName">中间关联模型名称，当属于多对多使用就必须使用。</param>
            <param name="realationType">关联类型</param>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ChildModelElement.ParentModelName">
            <summary>
            父模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ChildModelElement.ChildModelName">
            <summary>
            子模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ChildModelElement.RelationModelName">
            <summary>
            关联模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ChildModelElement.RelationType">
            <summary>
            关联方式
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ChildModelElement.ChildFieldName">
            <summary>
            目标模型的字段名称
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ChildModelElementArray">
            <summary>
            子元素集合
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.RelationModel">
            <summary>
            关联模型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.RelationModel.m_SourceFieldName">
            <summary>
            源字段名称
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.RelationModel.#ctor(System.String,System.String)">
            <summary>
            关系模型构造方法
            </summary>
            <param name="modelName">模型名称</param>
            <param name="fieldName">字段名称</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.RelationModel.#ctor(System.String)">
            <summary>
            关系模型的构造方法，使用目标模型的主编号
            </summary>
            <param name="modelName">模型名称</param>
        </member>
        <member name="P:HWQ.Entity.EntityModel.RelationModel.ModelName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.RelationModel.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.RelationTypes">
            <summary>
            关联类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.RelationTypes.OonToOne">
            <summary>
            一对一关系，一个数据模型只有一个子模型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.RelationTypes.OneToMany">
            <summary>
            一对多关系，一个数据模型有多个子模型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.RelationTypes.ManyToMany">
            <summary>
            多对多模式，两个模型中间有一个关联表
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.FieldDbType">
            <summary>
            字段数据类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.ID">
            <summary>
            内部使用ID
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.CzScript">
            <summary>
            脚本类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.String">
            <summary>
            字符串类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Character">
            <summary>
            字符
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Bytes">
            <summary>
            字节集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Byte">
            <summary>
            字节
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Decimal">
            <summary>
            表示十进制数。
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Currency">
            <summary>
            货币
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Int">
            <summary>
            整形
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Long">
            <summary>
            长整形
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.DateTime">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Date">
            <summary>
            日期部分
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Boolean">
            <summary>
            布尔值。
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Double">
            <summary>
            表示一个双精度浮点数字。
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Guid">
            <summary>
            唯一编号(未启用!)
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Image">
            <summary>
            图像(未启用!)
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldDbType.Color">
            <summary>
            颜色 RGB 值(未启用!)
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.JoinType">
            <summary>
            关联方式
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.JoinType.None">
            <summary>
            没有任何关联
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.JoinType.Right">
            <summary>
            右向外联接 (RIGHT JOIN 或 RIGHT OUTER JOIN)
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.JoinType.Left">
            <summary>
            左向外联接 (LEFT JOIN 或 LEFT OUTER JOIN)
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.JoinType.Full">
            <summary>
            完整外部联接 (FULL JOIN 或 FULL OUTER JOIN)
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.JoinType.Inner">
            <summary>
            内联接,默认的关联方式
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ModelIdentityRule">
            <summary>
            id 规则
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelIdentityRule.Auto">
            <summary>
            自动状态,当用户不指定Id,则由系统指定一个
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelIdentityRule.System">
            <summary>
            系统状态,由系统管理ID
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelIdentityRule.User">
            <summary>
            由用户指定Id
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ModelTypes">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelTypes.Model">
            <summary>
            模型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelTypes.View">
            <summary>
            视图
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelTypes.RelatingModel">
            <summary>
            关联模型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelTypes.Enum">
            <summary>
            枚据类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelTypes.Label">
            <summary>
            标签
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelTypes.UserModel">
            <summary>
            用户模型，指后期绑定的模型
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.FieldCulture">
            <summary>
            字段多文化
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.FieldElementArray">
            <summary>
            字段元素集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.FieldElementArray.m_FieldElements">
            <summary>
            字段元素的集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.FieldElementArray.#ctor">
            <summary>
            字段元素的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.FieldElementArray.#ctor(System.Int32)">
            <summary>
            字段元素的构造方法
            </summary>
            <param name="capacity">初始容量</param>
        </member>
        <member name="P:HWQ.Entity.EntityModel.FieldElementArray.Item(System.Int32)">
            <summary>
            索引
            </summary>
            <param name="index">索引编号</param>
            <returns>字段元素</returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.FieldElementArray.Item(System.String)">
            <summary>
            索引
            </summary>
            <param name="fieldName">字段名称</param>
            <returns>字段元素</returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.FieldElementArray.Add(HWQ.Entity.EntityModel.ModelFieldElement)">
            <summary>
            添加字段元素
            </summary>
            <param name="fieldElement">字段元素</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.FieldElementArray.GetFieldElement(System.String)">
            <summary>
            获取字段元素
            </summary>
            <param name="fieldName">字段名称</param>
            <returns>字段元素</returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.FieldElementArray.Remove(System.String)">
            <summary>
            删除字段元素
            </summary>
            <param name="fieldName">字段名称</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.FieldElementArray.Contains(System.String)">
            <summary>
            确定集合中是否包含相关字段
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.FieldElementArray.GetList">
            <summary>
            获取字段元素的集合
            </summary>
            <returns>元素集合</returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.FieldElementArray.GetByNot(System.String)">
            <summary>
            获取不等于
            </summary>
            <param name="aTag"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.FieldElementArray.GetBy(System.String)">
            <summary>
            获取等于的
            </summary>
            <param name="aTag"></param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.FieldElementArray.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.IModel">
            <summary>
            模型接口
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.Item(System.String)">
            <summary>
            字段值索引
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.PrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.PrimaryKeyValue">
            <summary>
            主键值
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.ModelNamespace">
            <summary>
            模型命名空间
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.ModelName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.ClassId">
            <summary>
            类编号
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.Locale">
            <summary>
            本地化
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.ModelCaption">
            <summary>
            模型显示的标题
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.ModelDescription">
            <summary>
            模型描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.IncludeSysField">
            <summary>
            是否包含系统字段
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.ModelType">
            <summary>
            模型类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.Fields">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.Keys">
            <summary>
            主键集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.IModel.CopyTo(HWQ.Entity.EntityModel.IModel)">
            <summary>
            拷贝模型
            </summary>
            <remarks>把模型的数据拷贝一次</remarks>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.IModel.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.IModel.GetStamrtTagForFields(System.String)">
            <summary>
            获取跟智能标记相关的字段集合
            </summary>
            <param name="aTag"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.IModel.GetStamrtTagForField(System.String)">
            <summary>
            获取跟智能标记相关的字段
            </summary>
            <param name="aTag"></param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.ChildModelElements">
            <summary>
            
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.IModel.IsInherit">
            <summary>
            是否为继承
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.InheritModel">
            <summary>
            继承的数据模型
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.IdentityRule">
            <summary>
            ID 规则
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.Value">
            <summary>
            模型的值
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.Text">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.MValue">
            <summary>
            模型值
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.IModel.MDescription">
            <summary>
            模型描述
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.IModel.CopyDataRow(System.Data.DataRow)">
            <summary>
            拷贝数据到 DataRow 里面
            </summary>
            <param name="row"></param>
        </member>
        <member name="T:HWQ.Entity.EntityModel.JoinGroup">
            <summary>
            关联组合（表与表之间的关联查询）
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.JoinGroup.AddOuteJoin(HWQ.Entity.EntityModel.JoinType,System.String,System.String)">
            <summary>
            添加关联的表和字段
            </summary>
            <param name="modelName"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.JoinGroup.AddOuteJoin(HWQ.Entity.EntityModel.JoinGroup)">
            <summary>
            添加关联的表和字段
            </summary>
            <param name="joinGroup"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.JoinGroup.GetModelNames">
            <summary>
            获取关联的模型名称列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.JoinGroup.#ctor(System.String,System.String,System.String,System.String,HWQ.Entity.EntityModel.JoinType)">
            <summary>
            构造方法
            </summary>
            <param name="modelName1"></param>
            <param name="fieldName1"></param>
            <param name="modelName2"></param>
            <param name="fieldName2"></param>
            <param name="joinType"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.JoinGroup.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="modelName1"></param>
            <param name="fieldName1"></param>
            <param name="modelName2"></param>
            <param name="fieldName2"></param>
        </member>
        <member name="P:HWQ.Entity.EntityModel.JoinGroup.JoinType">
            <summary>
            关联连接方式
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.JoinGroup.ModelName">
            <summary>
            左模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.JoinGroup.FieldName">
            <summary>
            左模型字段名称
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.Model">
            <summary>
            模型的基本类
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.GET_DATE">
            <summary>
            获取当前系统时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.Equals(System.Object)">
            <summary>
            指定的 obj 与当前的 Model 是否相同
            </summary>
            <param name="obj">目标对象</param>
            <returns></returns>
        </member>
        <member name="F:HWQ.Entity.EntityModel.Model.SysField_DateCreate">
            <summary>
            记录创建时间
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.Model.SysField_DateUpdate">
            <summary>
            记录修改时间
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.Model.SysField_DateRemove">
            <summary>
            删除记录日期
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.Model.SysField_AuthorCreate">
            <summary>
            记录创建者
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.Model.SysField_AuthorUpdate">
            <summary>
            记录修改者
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.Model.SysField_AuthorRemove">
            <summary>
            记录删除者
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.Model.SysField_Fixed">
            <summary>
            固定记录,记录是否允许修改
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.Model.SysField_Disable">
            <summary>
            记录是否无效,指已经被删除的状态
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.Model.m_ModelElement">
            <summary>
            模型元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.Model.m_Fields">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.Model.m_DatasheetMapped">
            <summary>
            映射为数据库的表
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.Model.m_IsInsert">
            <summary>
            是否为插入的数据记录
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.Model.m_IsUpdate">
            <summary>
            是否为插入的数据记录
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.CreateModelElement(HWQ.Entity.EntityModel.ModelElement)">
            <summary>
            创建模型的元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.CreateModelFieldElement(HWQ.Entity.EntityModel.FieldElementArray)">
            <summary>
            创建元素集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="modelName">模型名称</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.#ctor(HWQ.Entity.EntityModel.ModelElement)">
            <summary>
            构造方法
            </summary>
            <param name="modelElement">模型元素</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.#ctor(HWQ.Entity.Common.DataModelElement)">
            <summary>
            构造方法
            </summary>
            <param name="dataModelElement"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.#ctor(System.String,HWQ.Entity.EntityModel.ModelTypes)">
            <summary>
            构造方法
            </summary>
            <param name="modelName">模型名称</param>
            <param name="modelType">模型类型</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.CreateModelDna(System.String)">
            <summary>
            创建模型 DNA
            </summary>
            <param name="modelName"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.CreateFields">
            <summary>
            创建字段
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.GetStamrtTagForFields(System.String)">
            <summary>
            获取智能标签的字段
            </summary>
            <param name="aTag">智能标记</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.GetStamrtTagForField(System.String)">
            <summary>
            
            </summary>
            <param name="aTag"></param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.ModelNamespace">
            <summary>
            模型命名空间
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.ModelName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.ClassId">
            <summary>
            类编号
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.ModelDescription">
            <summary>
            模型描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.ModelType">
            <summary>
            模型类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.Keys">
            <summary>
            模型名称集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.Fields">
            <summary>
            模型字段集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.ErrorMessage">
            <summary>
            返回当前模型的所有错误信息（未实现）
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.ErrorClear">
            <summary>
            清除所有的错误信息
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.IsNull(System.String)">
            <summary>
            判断字段值是否为空
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.IsNull(System.Int32)">
            <summary>
            判断字段值是否为空
            </summary>
            <param name="index">索引值</param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.ModelElement">
            <summary>
            模型元素
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.CopyTo(HWQ.Entity.EntityModel.IModel)">
            <summary>
            拷贝模型
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.Clone(System.Type)">
            <summary>
            克隆
            </summary>
            <param name="modelType">模型类型</param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.ModelCaption">
            <summary>
            模型显示的名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.ChildModelElements">
            <summary>
            子关联
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.IsInsert">
            <summary>
            是否为新插入的数据
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.IsUpdate">
            <summary>
            是否为更新的数据记录
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.IncludeSysField">
            <summary>
            是否包含系统字段
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.DatasheetMapped">
            <summary>
            映射为数据表
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.Dispose">
            <summary>
            释放由数据模型所使用的内存.
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.Inherit(HWQ.Entity.EntityModel.ModelElement)">
            <summary>
            继承
            </summary>
            <param name="modelElement"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.Inherit(System.String)">
            <summary>
            继承
            </summary>
            <param name="modelName"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.IsInherit">
            <summary>
            是否为继承的数据模型(已经取消)
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.InheritFieldName">
            <summary>
            继承的字段名称(已经取消)
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.InheritModel">
            <summary>
            获取继承的模型(已经取消)
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.Locale">
            <summary>
            本地化语言
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.CreateSystemField(HWQ.Entity.EntityModel.FieldElementArray)">
            <summary>
            创建系统字段
            </summary>
            <param name="fields"></param>
        </member>
        <member name="P:HWQ.Entity.EntityModel.Model.IdentityRule">
            <summary>
            ID 规则
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.Model.CopyDataRow(System.Data.DataRow)">
            <summary>
            拷贝到 DataRow
            </summary>
            <param name="row"></param>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelArray`1.m_AllowDisaffinity">
            <summary>
            是否允许一个集合存放不同名称的模型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelArray`1.m_ModelName">
            <summary>
            存储单一模型的名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelArray`1.m_Models">
            <summary>
            模型集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelArray`1.#ctor">
            <summary>
            模型集合构造方法
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray`1.TotalCount">
            <summary>
            合计数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray`1.PageLimit">
            <summary>
            页显示的数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray`1.PageIndex">
            <summary>
            当前页索引
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray`1.ModelName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray`1.AllowDisaffinity">
            <summary>
            是否允许不相同的模型
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelArray`1.GetFieldValues``1(System.String)">
            <summary>
            获取字段值的集合
            </summary>
            <typeparam name="FiledT"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelArray`1.Add(`0)">
            <summary>
            添加模型到集合中
            </summary>
            <param name="item">模型对象</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelArray`1.Clear">
            <summary>
            清空集合中的所有模型
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelArray`1.Contains(HWQ.Entity.EntityModel.IModel)">
            <summary>
            为定义(不能使用)
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray`1.Count">
            <summary>
            集合包含的模型数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray`1.IsReadOnly">
            <summary>
            是否为只读
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ModelArray">
            <summary>
            模型集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelArray.m_AllowDisaffinity">
            <summary>
            是否允许一个集合存放不同名称的模型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelArray.m_ModelName">
            <summary>
            存储单一模型的名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelArray.m_Models">
            <summary>
            模型集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelArray.#ctor(System.String)">
            <summary>
            模型集合的构造方法
            </summary>
            <param name="modelName"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelArray.#ctor">
            <summary>
            模型集合构造方法
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray.TotalCount">
            <summary>
            合计数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray.PageLimit">
            <summary>
            页显示的数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray.PageIndex">
            <summary>
            当前页索引
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray.ModelName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray.AllowDisaffinity">
            <summary>
            是否允许不相同的模型
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelArray.GetDataTable">
            <summary>
            获取数据表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelArray.GetFieldValues``1(System.String)">
            <summary>
            获取字段值的集合
            </summary>
            <typeparam name="FiledT"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelArray.Add(HWQ.Entity.EntityModel.IModel)">
            <summary>
            添加模型到集合中
            </summary>
            <param name="item">模型对象</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelArray.Update(HWQ.Entity.EntityModel.IModel)">
            <summary>
            更新模型
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelArray.Clear">
            <summary>
            清空集合中的所有模型
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelArray.Contains(HWQ.Entity.EntityModel.IModel)">
            <summary>
            为定义(不能使用)
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray.Count">
            <summary>
            集合包含的模型数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelArray.IsReadOnly">
            <summary>
            是否为只读
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ModelDna">
            <summary>
            模型 DNA 集合,静态类
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelDna.m_WebMode">
            <summary>
            Web 模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelDna.m_IsWebInit">
            <summary>
            web 模式.的数据是否已经初始化
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.SpareWheel">
            <summary>
            备份数据
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.Affranchise">
            <summary>
            释放备份的数据
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelDna.WebModel">
            <summary>
            Web 模式 
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.Restitute">
            <summary>
            恢复备份的数据
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.Clear">
            <summary>
            清除模型元素
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.Add(HWQ.Entity.Common.DataModelElement)">
            <summary>
            添加模型元素
            </summary>
            <param name="modelElement">模型元素</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.GetModelElements">
            <summary>
            获取所有模型元素的集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.Remove(System.String)">
            <summary>
            删除模型元素
            </summary>
            <param name="modelName">模型名称</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.GetModelElement(System.String)">
            <summary>
            模型元素集合
            </summary>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.InitWebApp">
            <summary>
            初始化 Web 数据
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelDna.Count">
            <summary>
            模型数量
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.GetEnumerator">
            <summary>
            枚举
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.ContainsModel(System.String)">
            <summary>
            是否包含模型
            </summary>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.Validate">
            <summary>
            验证
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ModelDna.ValidateModelElement">
            <summary>
            验证模型的正确性
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.ValidateModelElement.Validate(System.Collections.Generic.IList{HWQ.Entity.Common.DataModelElement})">
            <summary>
            验证
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelDna.ValidateModelElement.ValidStandardChecks(HWQ.Entity.EntityModel.ModelFieldElement,System.Text.StringBuilder)">
            <summary>
            验证约束
            </summary>
            <param name="fieldElem"></param>
            <param name="errBuilder"></param>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ModelElement">
            <summary>
            模型元素
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ModelField">
            <summary>
            模型字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelField.m_ModelFieldElement">
            <summary>
            字段元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelField.m_ParentModel">
            <summary>
            父模型实例化
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelField.m_IsValueChange">
            <summary>
            值是否发生变化
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelField.m_ErrorMessage">
            <summary>
            验证的错误信息
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelField.m_Value">
            <summary>
            字段值
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelField.#ctor(HWQ.Entity.EntityModel.ModelFieldElement)">
            <summary>
            模型字段的构造方法
            </summary>
            <param name="fieldElement">字段元素</param>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.ParentModel">
            <summary>
            父容器
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.IsValueChange">
            <summary>
            值是否已经发生变化
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.CzScript">
            <summary>
            脚本
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.GroupName">
            <summary>
            字段所属的组
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.TableFieldName">
            <summary>
            数据库字段名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.DbType">
            <summary>
            字段数据类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.Mandatory">
            <summary>
            是否强制性
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.DefaultValue">
            <summary>
            字段的默认值
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.DefaultNullValue">
            <summary>
            默认的空值,一般情况下不会使用到。
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.DecimalDigits">
            <summary>
            数字类型的小数位数
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.ParentModelName">
            <summary>
            父模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.Sequence">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.Byname">
            <summary>
            字段别名
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.FieldDescription">
            <summary>
            字段的描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.Value">
            <summary>
            字段的值
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelField.GetValue">
            <summary>
            获取字段值
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelField.SetValue(System.Object)">
            <summary>
            放进去的值一定要正确(未完成)
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelField.GetValueForCzScript">
            <summary>
            获取脚本产生的值
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.MaxLength">
            <summary>
            字符串长度
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.StandardChecks">
            <summary>
            约束
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.SmartTag">
            <summary>
            智能标签
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.DefaultDisplayType">
            <summary>
            默认显示类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.Caption">
            <summary>
            字段标题
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.InheritModelName">
            <summary>
            继承的字段名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.Culture">
            <summary>
            本地化
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.ErrorMessage">
            <summary>
            验证的错误信息
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelField.IsError">
            <summary>
            是否的值
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelField.ErrorClear">
            <summary>
            清除错误信息
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelField.IsNull">
            <summary>
            判断字段值是否为空
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ModelFieldArray">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.Add(HWQ.Entity.EntityModel.ModelField)">
            <summary>
            添加字段
            </summary>
            <param name="modelField"></param>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldArray.Item(System.String)">
            <summary>
            字段索引
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.Remove(System.String)">
            <summary>
            删除字段
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.GetByNot(System.String)">
            <summary>
            获取不等于
            </summary>
            <param name="aTag"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.GetBy(System.String)">
            <summary>
            获取等于的
            </summary>
            <param name="aTag"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.GetEnumerator">
            <summary>
            获取模型的枚举集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取模型的枚举集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.IndexOf(HWQ.Entity.EntityModel.ModelField)">
            <summary>
            确定项目中的索引
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.Insert(System.Int32,HWQ.Entity.EntityModel.ModelField)">
            <summary>
            按索引插入 Model
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.RemoveAt(System.Int32)">
            <summary>
            按索引删除模型
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldArray.Item(System.Int32)">
            <summary>
            索引
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.Clear">
            <summary>
            移除所有元素
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.Contains(HWQ.Entity.EntityModel.ModelField)">
            <summary>
            确定是否包含特定值
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.Contains(System.String)">
            <summary>
            确定是否包含特定值
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.CopyTo(HWQ.Entity.EntityModel.ModelField[],System.Int32)">
            <summary>
            拷贝模型到新集合中
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldArray.Count">
            <summary>
            模型数目
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldArray.IsReadOnly">
            <summary>
            集合是否只读
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.Remove(HWQ.Entity.EntityModel.ModelField)">
            <summary>
            删除模型
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldArray.Dispose">
            <summary>
            自动释放内存
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ModelFieldElement">
            <summary>
            模型字段元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_TableFieldName">
            <summary>
            数据库的字段名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_ReadOnly">
            <summary>
            是否为只读
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_DbType">
            <summary>
            字段数据类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_Mandatory">
            <summary>
            是否强制性
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_DefaultNullValue">
            <summary>
            默认空值
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_MaxLength">
            <summary>
            默认长度
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_DecimalDigits">
            <summary>
            数字类型的小数位数
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_Sequence">
            <summary>
            排序
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_Byname">
            <summary>
            别名
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_CzScript">
            <summary>
            脚本
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_FieldDescription">
            <summary>
            字段描述
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_StandardChecks">
            <summary>
            约束
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_GroupName">
            <summary>
            字段所属的组
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_SmartTag">
            <summary>
            智能标签
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_DefaultDisplayType">
            <summary>
            默认显示类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelFieldElement.m_Culture">
            <summary>
            本地化
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldElement.#ctor(System.String,HWQ.Entity.EntityModel.FieldDbType)">
            <summary>
            字段元素
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="dbType">字段的数据类型</param>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.Byname">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.Culture">
            <summary>
            本地化
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.DbType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.DecimalDigits">
            <summary>
            小数位数
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.DefaultNullValue">
            <summary>
            默认空值
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.ReadOnly">
            <summary>
            是否可编辑
            </summary>
            <remarks>
            如果使用了 IdEntity，一般情况下就为不可编辑.
            </remarks>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.FieldDescription">
            <summary>
            字段描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.InheritModelName">
            <summary>
            继承的模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.TableFieldName">
            <summary>
            数据库字段名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.Mandatory">
            <summary>
            强制,不能为 null
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.MaxLength">
            <summary>
            字段长度
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.Sequence">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.GroupName">
            <summary>
            获取或设置字段的组
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.StandardChecks">
            <summary>
            约束
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.ParentModelName">
            <summary>
            父模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.CzScript">
            <summary>
            脚本
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldElement.ContainsSmartTag(System.String)">
            <summary>
            判断是否存在智能标签
            </summary>
            <param name="aTag"></param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.SmartTag">
            <summary>
            智能标签
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelFieldElement.DefaultDisplayType">
            <summary>
            默认显示类型
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelFieldElement.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ModelGroup">
            <summary>
            数据模型组
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelGroup.Item(System.Object)">
            <summary>
            索引
            </summary>
            <param name="key">关键值</param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelGroup.KeyName">
            <summary>
            组的关键字
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelGroup.Add(HWQ.Entity.EntityModel.IModel)">
            <summary>
            添加
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelGroup.GetEnumerator">
            <summary>
            获取枚据的实体集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ModelIdentity">
            <summary>
            [作废]实体种子
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelIdentity.m_IncrementSeed">
            <summary>
            种子
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.ModelIdentity.m_IncrementStep">
            <summary>
            增量值
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelIdentity.#ctor(System.Decimal,System.Decimal)">
            <summary>
            种子构造方法
            </summary>
            <param name="pip">种子</param>
            <param name="increment">增量值</param>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelIdentity.IncrementSeed">
            <summary>
            种子
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelIdentity.IncrementStep">
            <summary>
            增量值
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ModelValue">
            <summary>
            模型特殊值
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelValue.IsFunction">
            <summary>
            是否为函数
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.EntityModel.ModelView">
            <summary>
            实体模型视图
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelView.#ctor(HWQ.Entity.EntityModel.MViewElement)">
            <summary>
            构造方法
            </summary>
            <param name="modelElement">模型元素</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelView.CreateModelDna(System.String)">
            <summary>
            创建模型 DNA
            </summary>
            <param name="modelName"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelView.CreateFields">
            <summary>
            创建字段
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelView.ModelNamespace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelView.Locale">
            <summary>
            本地化语言
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelView.ModelName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelView.ClassId">
            <summary>
            类编号
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelView.ModelCaption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelView.ModelDescription">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelView.IncludeSysField">
            <summary>
            继承系统字段
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelView.ModelType">
            <summary>
            模型类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelView.Fields">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.ModelView.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelView.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelView.CreateModelElement(HWQ.Entity.EntityModel.MViewElement)">
            <summary>
            创建模型的元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelView.CreateModelFieldElement(HWQ.Entity.EntityModel.FieldElementArray)">
            <summary>
            创建元素集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityModel.ModelView.CreateSystemField(HWQ.Entity.EntityModel.FieldElementArray)">
            <summary>
            创建系统字段
            </summary>
            <param name="fields"></param>
        </member>
        <member name="T:HWQ.Entity.EntityModel.MViewBase">
            <summary>
            实体模型视图
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.MViewBase.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.EntityModel.MViewElement">
            <summary>
            视图元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.MViewElement.m_SortList">
            <summary>
            排序
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.MViewElement.m_Condition">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.MViewElement.GetModelNames">
            <summary>
            获取关联的模型名称
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.EntityModel.MViewElement.Sorts">
            <summary>
            排序集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.MViewElement.JoinGroup">
            <summary>
            关联组和
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.MViewElement.Condition">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="T:HWQ.Entity.EntityModel.StandardChecks">
            <summary>
            约束
            </summary>
            <remarks>
            1.当有 Values 值集合的时候,就不能拥有"最小值"和最大值,和正则表达式
            2."最小值"和"最大值"可以同时赋予值,也可以只赋予其中一个.
            </remarks>
        </member>
        <member name="F:HWQ.Entity.EntityModel.StandardChecks.m_Minimun">
            <summary>
            最小值
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.StandardChecks.m_Maximun">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:HWQ.Entity.EntityModel.StandardChecks.m_Values">
            <summary>
            值范围
            </summary>
            <remarks>
            不管是数字类型还是日期类型,都采用字符串类型记录.当要判断的时候,
            再进行转换
            </remarks>
        </member>
        <member name="F:HWQ.Entity.EntityModel.StandardChecks.m_RegularExpressions">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.StandardChecks.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            约束的构造方法
            </summary>
            <param name="minimun">最小值</param>
            <param name="maximun">最大值</param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.StandardChecks.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            约束的构造方法
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:HWQ.Entity.EntityModel.StandardChecks.#ctor(System.String)">
            <summary>
            约束的构造方法
            </summary>
            <param name="regularExpressions">正则表达式</param>
        </member>
        <member name="P:HWQ.Entity.EntityModel.StandardChecks.Minimun">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.StandardChecks.Maximun">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.StandardChecks.Values">
            <summary>
            值范围
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityModel.StandardChecks.RegularExpressions">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityModel.StandardChecks.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Extensions.MODEL_TABLE_DEFINE">
            <summary>
            实体表定义
            </summary>
        </member>
        <member name="P:HWQ.Entity.Extensions.MODEL_TABLE_DEFINE.TABLE_NAME">
            <summary>
            
            </summary>
        </member>
        <member name="P:HWQ.Entity.Extensions.MODEL_TABLE_DEFINE.NAMESPACE">
            <summary>
            
            </summary>
        </member>
        <member name="P:HWQ.Entity.Extensions.MODEL_TABLE_DEFINE.CAPTION">
            <summary>
            
            </summary>
        </member>
        <member name="P:HWQ.Entity.Extensions.MODEL_TABLE_DEFINE.DESCRIPTION">
            <summary>
            
            </summary>
        </member>
        <member name="P:HWQ.Entity.Extensions.MODEL_TABLE_DEFINE.XML">
            <summary>
            
            </summary>
        </member>
        <member name="T:HWQ.Entity.Extensions.SqlServer8IdentityShareFactory">
            <summary>
            获取自动递增的键值 (只在数据库共享模式下有效)
            </summary>
        </member>
        <member name="T:HWQ.Entity.Extensions.SqlServer8IdentityShareFactory.ShareItem">
            <summary>
            共享的项目
            </summary>
        </member>
        <member name="F:HWQ.Entity.Extensions.SqlServer8IdentityShareFactory.ShareItem.Start">
            <summary>
            起始值
            </summary>
        </member>
        <member name="F:HWQ.Entity.Extensions.SqlServer8IdentityShareFactory.ShareItem.Cur">
            <summary>
            当前值
            </summary>
        </member>
        <member name="F:HWQ.Entity.Extensions.SqlServer8IdentityShareFactory.ShareItem.Count">
            <summary>
            总数量
            </summary>
        </member>
        <member name="F:HWQ.Entity.Extensions.SqlServer8IdentityShareFactory.ShareItem.End">
            <summary>
            结束值
            </summary>
        </member>
        <member name="M:HWQ.Entity.Extensions.SqlServer8IdentityShareFactory.GetNewBatchIdentity(System.String,System.String,System.Int32)">
            <summary>
            获取一批 id 号
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Extensions.SqlServer8IdentityShareFactory.GetNewIdentity(System.String,System.String)">
            <summary>
            获取自动递增值
            </summary>
            <param name="tableName">表名</param>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Extensions.SqlServer8IdentityShareFactory.GetIDForStart(System.Data.SqlClient.SqlConnection,System.String,System.String,System.Int32)">
            <summary>
            获取一组自动 ID , 返回的是最大值, 最小值需要自己计算。  max-count
            </summary>
            <param name="conn"></param>
            <param name="table"></param>
            <param name="field"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Extensions.DynVFFactoryParamCollection">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:HWQ.Entity.Extensions.DynVFieldFactory">
            <summary>
            动态视图字段的工厂
            </summary>
        </member>
        <member name="P:HWQ.Entity.Extensions.DynVFieldFactory.Params">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:HWQ.Entity.Extensions.DynVFieldFactory.GetFields">
            <summary>
            获取动态视图字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Extensions.DynVFieldFactory.GetValues">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.Extensions.DynVFieldFactory.OwnerModel">
            <summary>
            模型对象
            </summary>
        </member>
        <member name="P:HWQ.Entity.Extensions.DynVFieldFactory.ModelT">
            <summary>
            元素的类型
            </summary>
        </member>
        <member name="T:HWQ.Entity.Extensions.EnumLightModel">
            <summary>
            枚举类型的轻量级实体
            </summary>
        </member>
        <member name="T:HWQ.Entity.Extensions.LModelConvert">
            <summary>
            轻量级实体的转换
            </summary>
        </member>
        <member name="M:HWQ.Entity.Extensions.LModelConvert.Convert(System.Object,System.Object,HWQ.Entity.Extensions.LModelConvert)">
            <summary>
            转换对象
            </summary>
            <param name="sourceModel">源实体</param>
            <param name="targetModel">目标实体</param>
            <param name="convertEqual">转换的条件</param>
        </member>
        <member name="T:HWQ.Entity.Extensions.LModelConvertCondition">
            <summary>
            转换的条件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Extensions.LModelConvertCondition.CreateAtoB">
            <summary>
            创建 A to B 的索引
            </summary>
        </member>
        <member name="M:HWQ.Entity.Extensions.LModelConvertCondition.CreateBtoA">
            <summary>
            创建 B to A 的索引
            </summary>
        </member>
        <member name="P:HWQ.Entity.Extensions.LModelConvertCondition.TypeA">
            <summary>
            对象类型 A 
            </summary>
        </member>
        <member name="P:HWQ.Entity.Extensions.LModelConvertCondition.TypeB">
            <summary>
            对象类型 B
            </summary>
        </member>
        <member name="T:HWQ.Entity.Extensions.MemoryDynVFFactory">
            <summary>
            内存
            </summary>
        </member>
        <member name="M:HWQ.Entity.Extensions.MemoryDynVFFactory.GetFields">
            <summary>
            获取字段集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Extensions.OleDbIdentityFactory">
            <summary>
            OleDb 递增的 ID 工厂
            </summary>
        </member>
        <member name="M:HWQ.Entity.Extensions.OleDbIdentityFactory.#ctor">
            <summary>
            OleDb 递增的 ID 工厂
            </summary>
        </member>
        <member name="M:HWQ.Entity.Extensions.OleDbIdentityFactory.#ctor(System.String)">
            <summary>
            OleDb 递增的 ID 工厂
            </summary>
            <param name="connectionString">数据库连接字符串</param>
        </member>
        <member name="M:HWQ.Entity.Extensions.OleDbIdentityFactory.GetNewIdentity(System.String)">
            <summary>
            按表名，获取递增键值
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Extensions.OleDbIdentityFactory.GetNewIdentity(System.String,System.String)">
            <summary>
            获取自动递增值
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Extensions.OleDbIdentityFactory.Init(System.Data.OleDb.OleDbConnection)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:HWQ.Entity.Extensions.SqlServer8IdentityFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:HWQ.Entity.Extensions.SqlServer8IdentityFactory.GetNewIdentity(System.String,System.String)">
            <summary>
            获取自动递增值
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Extensions.SqlServer_ModelIdentityMgr">
            <summary>
            实体自动递增 ID 
            </summary>
        </member>
        <member name="M:HWQ.Entity.Extensions.SqlServer_ModelIdentityMgr.GetSerTableMaxId(System.Data.SqlClient.SqlConnection,System.String,System.String)">
            <summary>
            获取原始表的递增最大值
            </summary>
            <param name="table">表名</param>
            <param name="field">字段名</param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Extensions.SqlServerDynVFFactory">
            <summary>
            Sql Server 数据库
            </summary>
        </member>
        <member name="T:HWQ.Entity.Filter.ConditionElement">
            <summary>
            过滤的元素
            </summary>
            <remarks>
            2006-3-25 : 在这些构造方法中,当"字段值"为字符串的时候,
            只能用"等于"、"不等于"、“like”、“leftLike”、“RightLike”
            同样数字类型也必须有这样的限制。（以后必须加进去）[已经加了 2016-6-21]
            </remarks>
        </member>
        <member name="F:HWQ.Entity.Filter.ConditionElement.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:HWQ.Entity.Filter.ConditionElement.#ctor(System.String,System.Object)">
            <summary>
            过滤的元素构造方法
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段值</param>
        </member>
        <member name="M:HWQ.Entity.Filter.ConditionElement.#ctor(System.String,System.Object,HWQ.Entity.Filter.Logic)">
            <summary>
            过滤的元素构造方法
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段值</param>
            <param name="logic"></param>
        </member>
        <member name="F:HWQ.Entity.Filter.ConditionElement.m_ModelName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ConditionElement.m_FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ConditionElement.m_TempVarFieldName">
            <summary>
            临时的变量名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ConditionElement.m_FieldValue">
            <summary>
            字段值
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ConditionElement.m_FieldValue2">
            <summary>
            数值2 配合 T-SQL 的 Between
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ConditionElement.m_Logic">
            <summary>
            逻辑运输符号
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ConditionElement.ExprType">
            <summary>
            And | OR
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ConditionElement.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ConditionElement.FieldValue">
            <summary>
            字段值
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ConditionElement.Logic">
            <summary>
            逻辑运输符号
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ConditionElement.ModelName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="T:HWQ.Entity.Filter.ConditionGroup">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ConditionGroup.m_ExprType">
            <summary>
            组合逻辑
            </summary>
        </member>
        <member name="M:HWQ.Entity.Filter.ConditionGroup.GetConditionList">
            <summary>
            获取筛选条件的列表集合(注意:返回的列表是并行的,没有任何嵌套.)
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.Filter.ConditionGroup.ExprType">
            <summary>
            组合逻辑
            </summary>
        </member>
        <member name="T:HWQ.Entity.Filter.ConditionTypes">
            <summary>
            条件组合类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ConditionTypes.None">
            <summary>
            没有
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ConditionTypes.ConditionElem">
            <summary>
            条件元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ConditionTypes.ConditionGroup">
            <summary>
            条件组
            </summary>
        </member>
        <member name="T:HWQ.Entity.Filter.ExprTypes">
            <summary>
            条件类型 ExpressionTypes
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ExprTypes.And">
            <summary>
            与类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ExprTypes.Or">
            <summary>
            或类型
            </summary>
        </member>
        <member name="T:HWQ.Entity.Filter.Logic">
            <summary>
            逻辑运算符
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.Equality">
            <summary>
            等于符号
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.GreaterThan">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.GreaterThanOrEqual">
            <summary>
            大于或等于
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.Inequality">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.LessThan">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.LessThanOrEqual">
            <summary>
            小于或等于
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.Like">
            <summary>
            模糊查询
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.LeftLike">
            <summary>
            左模糊查询
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.RightLike">
            <summary>
            右模糊查询
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.In">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.NotIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.NotLike">
            <summary>
            
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.Is">
            <summary>
            
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.IsNot">
            <summary>
            
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.Between">
            <summary>
            选取介于两个值之间的数据范围。
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.Logic.NotBetween">
            <summary>
            选取不介于两个值之间的数据范围。
            </summary>
        </member>
        <member name="T:HWQ.Entity.Filter.SortTypes">
            <summary>
            排序方式
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.SortTypes.Ascending">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.SortTypes.Descend">
            <summary>
            降序
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.LOrder.SortStr">
            <summary>
            排序的字符串
            </summary>
        </member>
        <member name="T:HWQ.Entity.Filter.ModelFilter">
            <summary>
            模型的查询结构体
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ModelFilter.m_ModelName">
            <summary>
            准备筛选的模型名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ModelFilter.m_ModelJoinGroup">
            <summary>
            模型关联组
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ModelFilter.m_Top">
            <summary>
            返回的数量
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ModelFilter.m_Distinct">
            <summary>
            消除重复行
            </summary>
        </member>
        <member name="F:HWQ.Entity.Filter.ModelFilter.m_SysMode">
            <summary>
            系统模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ModelFilter.SysMode">
            <summary>
            系统模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ModelFilter.ModelType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ModelFilter.TSqlWhere">
            <summary>
            筛选语句
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ModelFilter.TSqlOrderBy">
            <summary>
            排序的语句
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ModelFilter.Distinct">
            <summary>
            消除重复行
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ModelFilter.Top">
            <summary>
            筛选的记录数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ModelFilter.ModelName">
            <summary>
            筛选的模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ModelFilter.Percent">
            <summary>
            百分比模式
            </summary>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.AddSort(System.String)">
            <summary>
            添加排序
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.AddSort(System.String,HWQ.Entity.Filter.SortTypes)">
            <summary>
            添加排序
            </summary>
            <param name="fieldName"></param>
            <param name="sortType"></param>
        </member>
        <member name="P:HWQ.Entity.Filter.ModelFilter.SortList">
            <summary>
            排序集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.ModelFilter.FilterElems">
            <summary>
            过滤元素集
            </summary>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.ExistSorts">
            <summary>
            存在排序
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.ExistCondition">
            <summary>
            是否存在筛选条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.AddFilter(System.String)">
            <summary>
            添加过滤条件;例:  abc >= 0
            </summary>
            <param name="filterItem"></param>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.AddFilter(System.String,System.Object)">
            <summary>
            添加过滤条件
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.AddFilter(System.String,System.Object,HWQ.Entity.Filter.ExprTypes)">
            <summary>
            添加过滤条件
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <param name="exprType">表达式 [ AND | OR ]</param>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.AddFilter(System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            添加过滤条件
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValues"></param>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.AddFilter(System.String,System.Collections.Generic.List{System.Object},HWQ.Entity.Filter.ExprTypes)">
            <summary>
            添加过滤条件
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValues"></param>
            <param name="exprType"></param>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.And(System.String,System.Object)">
            <summary>
            添加过滤条件
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.And(System.String,System.Object,HWQ.Entity.Filter.Logic)">
            <summary>
            添加过滤条件
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="logic"></param>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.AndBetween(System.String,System.Object,System.Object)">
            <summary>
            添加过滤条件
            </summary>
            <param name="fieldName"></param>
            <param name="fromValue"></param>
            <param name="toValue"></param>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.OpAnd(System.String,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <param name="logicValue">逻辑运算符</param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.Or(System.String,System.Object)">
            <summary>
            添加过滤条件
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Filter.ModelFilter.Dispose">
            <summary>
            释放内存
            </summary>
        </member>
        <member name="T:HWQ.Entity.Filter.SortElement">
            <summary>
            排序元素
            </summary>
        </member>
        <member name="M:HWQ.Entity.Filter.SortElement.#ctor(System.String,HWQ.Entity.Filter.SortTypes)">
            <summary>
            排序元素的构造方法
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="sortType">排序方式</param>
        </member>
        <member name="M:HWQ.Entity.Filter.SortElement.#ctor(System.String)">
            <summary>
            排序元素的构造方法
            </summary>
            <param name="fieldName">字段名称</param>
        </member>
        <member name="P:HWQ.Entity.Filter.SortElement.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Filter.SortElement.SortType">
            <summary>
            排序方式
            </summary>
        </member>
        <member name="T:HWQ.Entity.Filter.SortList">
            <summary>
            排序清单
            </summary>
        </member>
        <member name="M:HWQ.Entity.Filter.SortList.#ctor(System.String,HWQ.Entity.Filter.SortTypes)">
            <summary>
            排序清单的构造方法
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="sortType">排序方式</param>
        </member>
        <member name="M:HWQ.Entity.Filter.SortList.#ctor(System.String,HWQ.Entity.Filter.SortTypes,System.String,HWQ.Entity.Filter.SortTypes)">
            <summary>
            排序清单的构造方法
            </summary>
            <param name="name1">字段名称1</param>
            <param name="type1">排序方式1</param>
            <param name="name2">字段名称2</param>
            <param name="type2">排序方式2</param>
        </member>
        <member name="M:HWQ.Entity.Filter.SortList.#ctor(System.String,HWQ.Entity.Filter.SortTypes,System.String,HWQ.Entity.Filter.SortTypes,System.String,HWQ.Entity.Filter.SortTypes)">
            <summary>
            排序清单的构造方法
            </summary>
            <param name="name1">字段名称1</param>
            <param name="type1">排序方式1</param>
            <param name="name2">字段名称2</param>
            <param name="type2">排序方式2</param>
            <param name="name3">字段名称3</param>
            <param name="type3">排序方式3</param>
        </member>
        <member name="M:HWQ.Entity.Filter.SortList.Add(System.String,HWQ.Entity.Filter.SortTypes)">
            <summary>
            添加排序
            </summary>
            <param name="fieldName"></param>
            <param name="sortType">排序方式</param>
        </member>
        <member name="M:HWQ.Entity.Filter.SortList.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Filter.TSqlTools">
            <summary>
            T-SQL 语句工具 (以下解释器不够完美,不建议使用)
            </summary>
        </member>
        <member name="M:HWQ.Entity.Filter.TSqlTools.ToConditionGrid(System.String)">
            <summary>
            字符串转换为筛选条件 ConditionGroup 类
            </summary>
            <param name="conditionString"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.EntityElement.ValueNameEntity">
            <summary>
            DoubleFace
            </summary>
            <example>
            DoubleFace dou = "a1 := 星球大战";
            或者
            DoubleFace dou = new DoubleFace("Monday := 星期一")
            </example>
            <remarks>区分大小写</remarks>
        </member>
        <member name="M:HWQ.Entity.EntityElement.ValueNameEntity.op_Implicit(System.String)~HWQ.Entity.EntityElement.ValueNameEntity">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityElement.ValueNameEntity.op_Implicit(HWQ.Entity.EntityElement.ValueNameEntity)~System.String">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.EntityElement.ValueNameEntity.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="text"></param>
        </member>
        <member name="M:HWQ.Entity.EntityElement.ValueNameEntity.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="text"></param>
        </member>
        <member name="M:HWQ.Entity.EntityElement.ValueNameEntity.#ctor(System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="text"></param>
        </member>
        <member name="M:HWQ.Entity.EntityElement.ValueNameEntity.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="expression">a1 := 星球大战</param>
        </member>
        <member name="P:HWQ.Entity.EntityElement.ValueNameEntity.Value">
            <summary>
            值内容
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityElement.ValueNameEntity.Text">
            <summary>
            显示内容
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityElement.ValueNameEntity.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.EntityElement.NameValueGroup">
            <summary>
            DoubleFace 对象的集合
            </summary>
            <remarks>一般情况下不对集合中的数据进行更改。</remarks>
            <example>
            public class DoubleFaceArray_Example:HF.ModelElement.DoubleFaceArray
            {
                public override void Initialize()
                {
                    this.Add(new DoubleFace("MSSJ","魔兽世界"));
                    this.Add(new DoubleFace("XJZB","星级争霸"));
                }
            }
            </example>
        </member>
        <member name="M:HWQ.Entity.EntityElement.NameValueGroup.#ctor(System.Int32)">
            <summary>
            初始化组单元数量
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:HWQ.Entity.EntityElement.NameValueGroup.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityElement.NameValueGroup.GroupName">
            <summary>
            组名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityElement.NameValueGroup.GroupDescription">
            <summary>
            组描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityElement.NameValueGroup.IsBuffer">
            <summary>
            是否进行缓冲
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityElement.NameValueGroup.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="M:HWQ.Entity.EntityElement.NameValueGroup.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:HWQ.Entity.EntityElement.NameValueGroup.DefaultText">
            <summary>
            找不到值的情况下，默认显示的内容。
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.FilterTypes">
            <summary>
            过滤类型. Auto | SQL | SqlWhere
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.FilterTypes.Auto">
            <summary>
            自动模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.FilterTypes.SQL">
            <summary>
            SQL 语句模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.FilterTypes.SqlWhere">
            <summary>
            只有 Sql 的 Where 语句
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.FitlerReturnTypes">
            <summary>
            筛选返回的对象类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.FitlerReturnTypes.None">
            <summary>
            不定
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.FitlerReturnTypes.Model">
            <summary>
            模型对象
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.FitlerReturnTypes.ModelT">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.FitlerReturnTypes.DataTable">
            <summary>
            DataTable 对象
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.FitlerReturnTypes.DataTableT">
            <summary>
            泛型的 DataTable
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LightModel">
            <summary>
            轻量级实体
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LightModel.m_TakeChange">
            <summary>
            捕获值发生编号
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LightModel.m_InitValues">
            <summary>
            初始化值
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LightModel.m_InitValueChanges">
            <summary>
            值状态
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LightModel.m_DynVFields">
            <summary>
            动态视图的字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LightModel.m_Values">
            <summary>
            值集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LightModel.m_ModelElem">
            <summary>
            模型元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LightModel.m_IsLModel">
            <summary>
            是否为 LModel
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LightModel.m_ExpandParams">
            <summary>
            扩展参数
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.HasExpandParam">
            <summary>
            存在扩展参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetExpandParam(System.String)">
            <summary>
            获取扩展属性
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.TryGetExpandParam(System.String,System.Object@)">
            <summary>
            获取扩展属性
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetExpandParam(System.String,System.Object)">
            <summary>
            设置扩展属性
            </summary>
            <param name="paramName"></param>
            <param name="value"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetExpandParamNames">
            <summary>
            获取扩展属性的参数名
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.LightModel.Item(System.String)">
            <summary>
            索引属性
            </summary>
            <param name="fieldName"></param>
            <returns>字段值</returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.LightModel.Item(HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            索引属性
            </summary>
            <param name="fieldElem">字段元素</param>
            <returns>字段值</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetValue(HWQ.Entity.LightModels.LModelFieldElement,System.Object)">
            <summary>
            设置字段值
            </summary>
            <param name="fieldElem">字段元素</param>
            <param name="value">字段值</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetValue(System.String,System.Object)">
            <summary>
            设置字段值
            </summary>
            <param name="name">字段名</param>
            <param name="value">字段值</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetValue(HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            获取字段值
            </summary>
            <param name="fieldElem">字段元素</param>
            <returns>字段值</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetCode">
            <summary>
            获取记录编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetValue(System.String)">
            <summary>
            获取字段值
            </summary>
            <param name="name">字段名</param>
            <returns>字段值</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetDynValues">
            <summary>
            动态字段的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetDynValue(System.String)">
            <summary>
            获取动态字段的值
            </summary>
            <param name="dynName">动态字段名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetDynValue(System.String,System.Object)">
            <summary>
            设置动态字段的值
            </summary>
            <param name="dynName"></param>
            <param name="value"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.StartTakeChange">
            <summary>
            开始捕获(未启用)
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.StopTakeChange">
            <summary>
            停止捕获
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetTakeChange(System.Boolean)">
            <summary>
            设置是否捕获字段值发生编号
            </summary>
            <param name="take">true=启动捕获, false=禁止捕获</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetTakeChange(System.Boolean,System.Boolean)">
            <summary>
            设置是否捕获字段值发生编号
            </summary>
            <param name="take">true=启动捕获, false=禁止捕获</param>
            <param name="restate">是否重置捕获字段:true=重置,false=保留旧值.</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetTakeChange">
            <summary>
            获取是否捕获字段值发生编号
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetBlemishAll(System.Boolean)">
            <summary>
            设置全部字段为改变状态.
            </summary>
            <param name="blemish"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetBlemish(System.String,System.Boolean)">
            <summary>
            获取值是否弄脏
            </summary>
            <param name="propName"></param>
            <param name="blemish"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetOriginalValue(System.String)">
            <summary>
            获取原始字段值
            </summary>
            <param name="field">字段名</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetOriginalValue(System.String,System.Object)">
            <summary>
            设置原始值
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetBlemish(System.String)">
            <summary>
            设置值是否弄脏
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.CopyTo(System.Object)">
            <summary>
            拷贝实体
            </summary>
            <param name="obj">目标对象</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.CopyTo(HWQ.Entity.LightModels.SModel)">
            <summary>
            拷贝实体
            </summary>
            <param name="obj">目标对象</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.CopyTo(System.Object,System.Boolean)">
            <summary>
            拷贝实体
            </summary>
            <param name="obj">目标对象</param>
            <param name="skipBlanks"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.IsNullProp(System.String)">
            <summary>
            判断值是否为空
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.IsNull(System.String)">
            <summary>
            判断字段是否为空
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.Clone">
            <summary>
            克隆实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.Clone``1">
            <summary>
            克隆实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.ToString(System.String)">
            <summary>
            格式化输出
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.HasField(System.String)">
            <summary>
            判断是否有这个字段名称
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetFieldElem(System.String)">
            <summary>
            获取字段元素
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="F:HWQ.Entity.LightModels.LightModel.DefaultVFieldFactoryT">
            <summary>
            默认视图工厂
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetTableName(System.Type)">
            <summary>
            获取数据库表名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetPropGroups(System.Type)">
            <summary>
            获取属性组集合
            </summary>
            <param name="type">数据模型实体的 Type</param>
            <returns>字段组集合</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetOrderBy(System.Type)">
            <summary>
            获取数据库默认排序的字段
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetIdentityField(System.Type)">
            <summary>
            或者自动编号的字段名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetIdentity(System.Type)">
            <summary>
            获取实体的自动
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetLModelElement``1">
            <summary>
            获取轻量级实体的元素
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetLModelElement(System.Type)">
            <summary>
            获取轻量级实体的元素
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetLModelElement(System.String)">
            <summary>
            获取轻量级实体的元素
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetCodeField(System.Type)">
            <summary>
            获取实体的编码字段
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetPropKeys(System.Type)">
            <summary>
            获取属性的主键值
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetKeys(System.Type)">
            <summary>
            获取字段的主键
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetDefaultFieldValue(System.Object,System.String)">
            <summary>
            获取字段的默认值
            </summary>
            <param name="model"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetFieldValue(System.Object,HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            获取字段值
            </summary>
            <param name="model">实体对象，</param>
            <param name="fieldElem">字段元素</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetFieldValue(System.Object,System.String)">
            <summary>
            获取字段的值
            </summary>
            <param name="model"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetFieldValue``1(System.Object,HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            获取字段的值
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="model"></param>
            <param name="fieldElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetFieldValue``1(System.Object,System.String)">
            <summary>
            获取字段的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetFieldValue(System.Object,HWQ.Entity.LightModels.LModelFieldElement,System.Object)">
            <summary>
            设置字段的值
            </summary>
            <param name="model"></param>
            <param name="fieldElem"></param>
            <param name="value"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            设置字段的值
            </summary>
            <param name="model"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.CreateElement(System.Type)">
            <summary>
            创建元素
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SortByLevel(HWQ.Entity.LightModels.LModelFieldElement[])">
            <summary>
            按 Level 属性排序字段
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetUserVFieldFactory(HWQ.Entity.LightModels.VFieldAttribute)">
            <summary>
            获取自定义处理的视图字段
            </summary>
            <param name="vFieldAttr"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.CreateViewFields(HWQ.Entity.LightModels.LModelFieldElement[])">
            <summary>
            创建视图字段
            </summary>
            <param name="viewFields"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetDescription(System.Type)">
            <summary>
            获取类的描述
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetRelationals(System.Type)">
            <summary>
            获取关联的集合
            </summary>
            <param name="modelT"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.IsOnlyRead(System.Reflection.PropertyInfo)">
            <summary>
            判读属性是否为只读专题
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.CreateFieldElement(System.Reflection.PropertyInfo)">
            <summary>
            创建字段的基本元素
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetPropNames(System.Type)">
            <summary>
            获取字段属性的名称集合
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetProps(System.Type)">
            <summary>
            获取普通字段的属性的集合
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetProps(System.Type,System.Type)">
            <summary>
            获取对象属性集
            </summary>
            <param name="type"></param>
            <param name="fieldType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetPkValue(System.Object)">
            <summary>
            获取主键值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetPkValue(System.Object,System.Object)">
            <summary>
            设置主键值
            </summary>
            <param name="model"></param>
            <param name="value"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetDescPropName(System.Type)">
            <summary>
            获取实体的描述属性
            </summary>
            <param name="type"></param>
            <returns>属性的名称</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetDbNamespace(System.Type)">
            <summary>
            获取数据表的命名空间
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetValuePropName(System.Type)">
            <summary>
            获取实体的值属性
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetIdentityPropName(System.Type)">
            <summary>
            或者自动实体的属性名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetIdentityProp(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetPropValue(System.Object,System.String)">
            <summary>
            获取属性值
            </summary>
            <param name="obj"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetPropValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            获取属性值
            </summary>
            <param name="obj"></param>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetPropValue``1(System.Object,System.String)">
            <summary>
            获取属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetPropValue``1(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            获取属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetPropValue(System.Object,System.String,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="obj"></param>
            <param name="propName"></param>
            <param name="value"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetPropValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="obj"></param>
            <param name="prop"></param>
            <param name="value"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetPropValue(System.Boolean,System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="autoConvert">自动转换</param>
            <param name="obj"></param>
            <param name="prop"></param>
            <param name="value"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetBlemishPropNames(System.Object)">
            <summary>
            获取已经弄污的字段名称
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetPropDBType(System.Type,System.String)">
            <summary>
            获取属性的数据库字段类型
            </summary>
            <param name="type"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetPropDBType(System.Reflection.PropertyInfo)">
            <summary>
            获取属性的数据类型
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.IsNullProp(System.Object,System.String)">
            <summary>
            值是否为空
            </summary>
            <param name="obj"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.ConversionDBType(System.Type)">
            <summary>
            [作废，采用 ModelConvert.ToDbType(...) ] 数据类型转换
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.Clone(System.Object)">
            <summary>
            克隆对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.Clone``1(System.Object)">
            <summary>
            克隆对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.CopyTo(System.Object,HWQ.Entity.LightModels.SModel)">
            <summary>
            拷贝
            </summary>
            <param name="sourceObj"></param>
            <param name="targetObj"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.CopyTo(System.Object,System.Object)">
            <summary>
            拷贝
            </summary>
            <param name="sourceObj"></param>
            <param name="targetObj"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.CopyTo(System.Object,System.Object,System.Boolean)">
            <summary>
            拷贝
            </summary>
            <param name="sourceObj"></param>
            <param name="targetObj"></param>
            <param name="skipBlanks">是否忽略不存在的字段</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.FromDataRow(System.Object,System.Data.DataRow)">
            <summary>
            从 DataRow 复制字段值到实体字段
            </summary>
            <param name="model"></param>
            <param name="row"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.ToDataRow(HWQ.Entity.LightModels.SModel,System.Data.DataRow)">
            <summary>
            从实体字段值复制到 DataRow 字段上
            </summary>
            <param name="model"></param>
            <param name="row"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.ToDataRow(System.Object,System.Data.DataRow)">
            <summary>
            从实体字段值复制到 DataRow 字段上
            </summary>
            <param name="model"></param>
            <param name="row"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SaveXml(System.String,System.Object)">
            <summary>
            (不建议使用:改为 ModelHelper.SaveXmlFile() )序列化后保存
            </summary>
            <param name="filename"></param>
            <param name="obj"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.OpenXml``1(System.String)">
            <summary>
            (不建议使用:改为 ModelHelper.OpenXmlFile() ) 打开 XML 的序列化文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetPropOneAttr``1(System.Reflection.PropertyInfo)">
            <summary>
            获取属性的属性
            </summary>
            <typeparam name="AttrT"></typeparam>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetPropOneAttr(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            
            </summary>
            <param name="prop"></param>
            <param name="attrType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetObjectOneAttr``1(System.Type)">
            <summary>
            
            </summary>
            <typeparam name="AttrT"></typeparam>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetTakeChange(System.Object,System.Boolean,System.Boolean)">
            <summary>
            设置是否捕获字段值发生编号
            </summary>
            <param name="model"></param>
            <param name="take"></param>
            <param name="restate"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetTakeChange(System.Object,System.Boolean)">
            <summary>
            设置是否捕获字段值发生编号
            </summary>
            <param name="model"></param>
            <param name="take"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetTakeChange(System.Object)">
            <summary>
            获取是否捕获字段值发生编号
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetBlemishAll(System.Object,System.Boolean)">
            <summary>
            获取值是否弄脏
            </summary>
            <param name="model"></param>
            <param name="blemish"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.SetBlemish(System.Object,System.String,System.Boolean)">
            <summary>
            获取值是否弄脏
            </summary>
            <param name="propName"></param>
            <param name="blemish"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetBlemish(System.Object,System.String)">
            <summary>
            设置值是否弄脏
            </summary>
            <param name="model"></param>
            <param name="propName"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetDefaultValue``1(System.String)">
            <summary>
            获取属性的默认值
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetDefalutValue(System.Type,System.String)">
            <summary>
            获取实体属性的默认值
            </summary>
            <param name="type"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetDefaultValue(System.Reflection.PropertyInfo)">
            <summary>
            获取属性的默认值
            </summary>
            <param name="model"></param>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.IsValid(HWQ.Entity.LightModels.LModelFieldElement,System.Object)">
            <summary>
            验证值是否有效
            </summary>
            <param name="fieldElem"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetErrorMessage(HWQ.Entity.LightModels.LModelFieldElement,System.Object)">
            <summary>
            获取验证失败的信息
            </summary>
            <param name="fieldElem"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.ConvertModel(System.Object,System.Object,System.String[])">
            <summary>
            实体转换 ( "B对象" 转换为 "A对象" , 条件 左边是 A 的属性名称，右边是 B 的属性名称)
            </summary>
            <param name="modelA">实体 A </param>
            <param name="modelB">实体 B</param>
            <param name="conditions">转换条件</param>
            <remarks></remarks>
            <example>例子：new string[]{"A1=B1","A2=B2"}</example>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.ConvertModel(System.Object,System.Object,System.Collections.Generic.SortedList{System.String,System.String})">
            <summary>
            实体转换 ( "B对象" 转换为 "A对象" , 条件 左边是 A 的属性名称，右边是 B 的属性名称)
            </summary>
            <param name="modelA">实体 A</param>
            <param name="modelB">实体 B</param>
            <param name="conditions">例子：new string[]{"A1=B1","A2=B2"}</param>
            <example>例子：new string[]{"A1=B1","A2=B2"}</example>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetNotEquals(System.Object,System.Object)">
            <summary>
            对比两个实体的不同字段
            </summary>
            <param name="modelA"></param>
            <param name="modelB"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.Format(System.String,System.Collections.IDictionary)">
            <summary>
            格式化显示
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.LoadModelDNA(System.Reflection.Assembly)">
            <summary>
            加载轻量级实体 DNA
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.ExistEntity(System.Reflection.Assembly)">
            <summary>
            加载轻量级实体 DNA
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.GetBlemishFields">
            <summary>
            获取已经弄脏的字段名
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModel.Format(System.String,System.Object)">
            <summary>
            格式化 例:LightModel.Format("{Field1} - {Field2}",model);
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <returns></returns>
            <example>LightModel.Format("{Field1} - {Field2}",model);</example>
        </member>
        <member name="T:HWQ.Entity.LightModels.DBCodeAttribute">
            <summary>
            编码字段
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMAttribute.DBGroupAttribute">
            <summary>
            分组
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LMAttribute.DBGroupAttribute.#ctor(System.String)">
            <summary>
            分组
            </summary>
            <param name="groupName">组名</param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LMAttribute.DBGroupAttribute.GroupName">
            <summary>
            组名
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.DBViewAttribute">
            <summary>
            数据库视图
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DBViewAttribute.m_ViewTSql">
            <summary>
            实体的 SQL 语句
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBViewAttribute.#ctor(System.String)">
            <summary>
            数据库视图
            </summary>
            <param name="viewTSQL"></param>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMDefaultValueAttribute">
            <summary>
            默认值
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModel">
            <summary>
            用户自定义实体
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModel.Item(System.String)">
            <summary>
            索引属性
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.#ctor">
            <summary>
            用户自定义实体的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.#ctor(System.String)">
            <summary>
            用户自定义实体的构造方法
            </summary>
            <param name="modelName"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.#ctor(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            用户自定义实体的构造方法
            </summary>
            <param name="modelElem"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.GetPk">
            <summary>
            获取主键
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.GetPk``1">
            <summary>
            获取主键值
            </summary>
            <typeparam name="ValueT"></typeparam>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModel.Item(System.Int32)">
            <summary>
            索引属性
            </summary>
            <param name="fieldIndex"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.Get``1(System.Int32)">
            <summary>
            获取字段值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldIndex"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.TrySetValues(HWQ.Entity.LightModels.SModel)">
            <summary>
            尝试设置值
            </summary>
            <param name="sModel"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.TrySetValues(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            尝试设置值
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.TrySetValue(System.String,System.Object)">
            <summary>
            尝试设置值
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.TrySetValue(System.String,System.Object,System.Object)">
            <summary>
            尝试设置值
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.TryGetValue(System.String,System.Object@)">
            <summary>
            尝试获取值
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.Get``1(System.String)">
            <summary>
            获取字段值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.Field``1(System.Int32)">
            <summary>
            [作废]获取字段值.建议采用  Get
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldIndex"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.Field``1(System.String)">
            <summary>
            [作废]获取字段值.建议采用  Get
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.SetModelName(System.String)">
            <summary>
            设置实体名称
            </summary>
            <param name="modelName"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.GetModelName">
            <summary>
            获取实体名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.SetModelElement(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            设置实体元素或定义
            </summary>
            <param name="modelElem"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.GetModelElement">
            <summary>
            获取实体元素的定义
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModel.Clone(System.String)">
            <summary>
            克隆一个新对象出来
            </summary>
            <param name="newTable">新对象的表名</param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelElementGroup">
            <summary>
            模型组
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElementGroup.m_ItemsForFullPath">
            <summary>
            全路径索引的实体元素
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElementGroup.IsEdit">
            <summary>
            是否为编辑状态
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElementGroup.Count">
            <summary>
            获取元素的数量
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.Clear">
            <summary>
            清除所有
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.Add(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            添加
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.IsLightModel(System.Type)">
            <summary>
            判断对象是否为轻量级实体
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.Contains(System.Type)">
            <summary>
            判断是否包含
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.ContainsByFullName(System.String)">
            <summary>
            包含全名
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.GetElementByFullName(System.String)">
            <summary>
            获取元素
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.TryGetElementByFullName(System.String,HWQ.Entity.LightModels.LModelElement@)">
            <summary>
            获取元素
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.GetElement(System.Type)">
            <summary>
            获取元素
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.TryGetElement(System.Type,HWQ.Entity.LightModels.LModelElement@)">
            <summary>
            尝试通过 objType 获取实体元素
            </summary>
            <param name="objType"></param>
            <param name="modelElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.GetElementAll">
            <summary>
            获取所有元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.BeginEdit">
            <summary>
            开始修改
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.EndEdit">
            <summary>
            结束修改
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.ContainsByName(System.String)">
            <summary>
            模型名称是否存在
            </summary>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.GetElementByName(System.String)">
            <summary>
            按模型名称获取元素
            </summary>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElementGroup.TryGetElementByName(System.String,HWQ.Entity.LightModels.LModelElement@)">
            <summary>
            尝试通过 objType 获取实体元素
            </summary>
            <param name="objType"></param>
            <param name="modelElem"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelPagesInfo">
            <summary>
            实体分页信息
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelPagesInfo.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            实体分页信息
            </summary>
            <param name="maxRows">每页显示的行数</param>
            <param name="startRowIndex">起始行</param>
            <param name="rowTotal">每页显示的行数</param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelPagesInfo.MaxRows">
            <summary>
            每页显示的行数
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelPagesInfo.StartRowIndex">
            <summary>
            起始行
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelPagesInfo.RowTotal">
            <summary>
            总行数
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LockType">
            <summary>
            锁类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LockType.HoldLock">
            <summary>
            持有共享锁，直到整个事务完成，应该在被锁对象不需要时立即释放，
            等于SERIALIZABLE事务隔离级别 
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LockType.NoLock">
            <summary>
            语句执行时不发出共享锁，允许脏读 ，等于 READ UNCOMMITTED事务隔离级别 
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LockType.PagLock">
            <summary>
            在使用一个表锁的地方用多个页锁 
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LockType.ReadPast">
            <summary>
            让sql server跳过任何锁定行，执行事务，适用于READ UNCOMMITTED事务隔离级别只跳过RID锁，不跳过页，区域和表锁 
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LockType.RowLock">
            <summary>
            强制使用行锁 
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LockType.TabLockX">
            <summary>
            强制使用独占表级锁，这个锁在事务期间阻止任何其他事务使用这个表 
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LockType.UpdLock">
            <summary>
            强制在读表时使用更新而不用共享锁 
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LockTypeCollection">
            <summary>
            锁集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LockTypeCollection.Add(HWQ.Entity.LightModels.LockType,HWQ.Entity.LightModels.LockType)">
            <summary>
            添加锁
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LockTypeCollection.Add(HWQ.Entity.LightModels.LockType,HWQ.Entity.LightModels.LockType,HWQ.Entity.LightModels.LockType[])">
            <summary>
            添加锁
            </summary>
            <param name="item0"></param>
            <param name="item1"></param>
            <param name="items"></param>
        </member>
        <member name="T:HWQ.Entity.LightModels.SModel">
            <summary>
            简单实体 SampleModel
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.SModel.m_Identity">
            <summary>
            自动递增键值
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.SModel.m_Table">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetSModelElement">
            <summary>
            获取 SModel 元素实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.SetSModelElement(HWQ.Entity.LightModels.SModelElement)">
            <summary>
            设置 SModel 元素设置
            </summary>
            <param name="value">实体元素对象</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.#ctor">
            <summary>
            (构造函数)简单实体 SampleModel
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.#ctor(HWQ.Entity.LightModels.SModelElement)">
            <summary>
            (构造函数)简单实体 SampleModel
            </summary>
            <param name="sModelElem"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.#ctor(System.String)">
            <summary>
            (构造函数)简单实体 SampleModel
            </summary>
            <param name="table">表名</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.#ctor(System.String,System.Object,System.String,System.Object)">
            <summary>
            (构造函数)简单实体 SampleModel
            </summary>
            <param name="field0">字段名0</param>
            <param name="value0">字段值0</param>
            <param name="field1">字段名1</param>
            <param name="value1">字段值1</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.#ctor(System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            (构造函数)简单实体 SampleModel
            </summary>
            <param name="field0">字段名0</param>
            <param name="value0">字段值0</param>
            <param name="field1">字段名1</param>
            <param name="value1">字段值1</param>
            <param name="field2">字段名2</param>
            <param name="value2">字段值2</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.#ctor(System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            (构造函数)简单实体 SampleModel
            </summary>
            <param name="field0">字段名0</param>
            <param name="value0">字段值0</param>
            <param name="field1">字段名1</param>
            <param name="value1">字段值1</param>
            <param name="field2">字段名2</param>
            <param name="value2">字段值2</param>
            <param name="field3">字段名3</param>
            <param name="value3">字段值3</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.#ctor(System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.Object[])">
            <summary>
            (构造函数)简单实体 SampleModel
            </summary>
            <param name="field0">字段名0</param>
            <param name="value0">字段值0</param>
            <param name="field1">字段名1</param>
            <param name="value1">字段值1</param>
            <param name="field2">字段名2</param>
            <param name="value2">字段值2</param>
            <param name="field3">字段名3</param>
            <param name="value3">字段值3</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetTable">
            <summary>
            获取表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetIdentity">
            <summary>
            获取自动递增值
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.SetIdentity(System.Int32)">
            <summary>
            设置自动递增值
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.SetTable(System.String)">
            <summary>
            设置表名
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.Remove(System.String)">
            <summary>
            删除某个字段值
            </summary>
            <param name="field">字段名</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetFieldType(System.Int32)">
            <summary>
            获取字段类型
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetOrdinal(System.String)">
            <summary>
            获取字段所在的索引
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetField(System.Int32)">
            <summary>
            获取字段名
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.Get``1(System.String,``0)">
            <summary>
            获取字段值
            </summary>
            <typeparam name="ValueT">值类型</typeparam>
            <param name="fieldName">字段名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.Get(System.String)">
            <summary>
            根据字段名获取值
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.Get(System.String,System.Object)">
            <summary>
            根据字段名获取值
            </summary>
            <param name="fieldName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.Get``1(System.String)">
            <summary>
            获取字段值
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.Get``1(System.Int32)">
            <summary>
            获取字段值
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.Get``1(System.Int32,``0)">
            <summary>
            获取数值
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="index">字段索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.IsNull(System.Int32)">
            <summary>
            字段值是否为空
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.IsNull(System.String)">
            <summary>
            字段值是否为空
            </summary>
            <param name="fieldName">字段名</param>
            <returns>是否为空</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.HasField(System.String)">
            <summary>
            是否有这个字段存在
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.Add(System.String,System.Object)">
            <summary>
            添加键值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="value">字段值</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.DeserializeObject``1">
            <summary>
            序列化为对象
            </summary>
            <typeparam name="ObjectT"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.ToJson">
            <summary>
            输出 Json 数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.ToJson(System.Text.StringBuilder)">
            <summary>
            视图实体转换为 Json
            </summary>
            <param name="sb"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.Dispose">
            <summary>
            释放内存
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetEnumerator">
            <summary>
            返回键值对
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetFieldCount">
            <summary>
            获取字段数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetFields">
            <summary>
            获取字段名集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.SaveJson(System.String)">
            <summary>
            保存 json 文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.SaveJson(System.String,System.Text.Encoding)">
            <summary>
            保存 json 文件
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.OpenJson(System.String)">
            <summary>
            打开 json 文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.OpenJson(System.String,System.Text.Encoding)">
            <summary>
            打开 json 文件
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.ToJson(System.Object)">
            <summary>
            转换为 Json 数据
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.ToJson(System.Text.StringBuilder,System.Object)">
            <summary>
            转换为 Json 数据
            </summary>
            <param name="sb"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.Parse(System.Object)">
            <summary>
            把对象转移为 SModel 
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.CreateSModelElement">
            <summary>
            根据当前数据，创建实体元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.TryGetValue(System.String,System.Object@)">
            <summary>
            尝试返回值, 如果有这个字段
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.TryGet``1(System.String,``0@)">
            <summary>
            尝试返回值, 如果有这个字段
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化获取对象数据
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.ToString">
            <summary>
            实体的字符串格式
            </summary>
            <returns>默认输出 json 格式</returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.SModel.Item(System.String)">
            <summary>
            获取或设置索引值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.SModel.Item(System.Int32)">
            <summary>
            获取或设置索引的值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.ParseJson(System.String)">
            <summary>
            把 Json 数据转换为 SModel 对象
            </summary>
            <param name="jsonData"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetByte(System.String,System.Byte)">
            <summary>
            获取字节值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetByte(System.String)">
            <summary>
            获取字节值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetInt(System.String,System.Int32)">
            <summary>
            获取整形
            </summary>
            <param name="fieldName">字段名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetInt(System.String)">
            <summary>
            获取整形值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetLong(System.String,System.Int64)">
            <summary>
            获取长整型值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetLong(System.String)">
            <summary>
            获取长整型值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetDouble(System.String,System.Double)">
            <summary>
            获取双浮点值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetDouble(System.String)">
            <summary>
            获取双浮点值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetFlow(System.String,System.Single)">
            <summary>
            获取浮点数
            </summary>
            <param name="fieldName">字段名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetFlow(System.String)">
            <summary>
            获取浮点数
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetString(System.String,System.String)">
            <summary>
            获取字符串值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetString(System.String)">
            <summary>
            获取字符串值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetDateTime(System.String,System.DateTime)">
            <summary>
            获取时间值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetDateTime(System.String)">
            <summary>
            获取时间值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetBool(System.String,System.Boolean)">
            <summary>
            获取布尔值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetBool(System.String)">
            <summary>
            获取布尔值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetDecimal(System.String,System.Decimal)">
            <summary>
            获取数值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetDecimal(System.String)">
            <summary>
            获取数值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetGuid(System.String,System.Guid)">
            <summary>
            获取 GUID
            </summary>
            <param name="fieldName">字段名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModel.GetGuid(System.String)">
            <summary>
            获取 GUID
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.LightModels.SModelElement">
            <summary>
            简单实体元素
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.SModelElement.TableName">
            <summary>
            数据表名
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelElement.Remove(System.String)">
            <summary>
            删除某个字段
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelElement.Clear">
            <summary>
            清理字段
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelElement.Has(System.String)">
            <summary>
            判断是否存在这个字段
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.SModelElement.Count">
            <summary>
            字段数量
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelElement.TryGetValue(System.String,HWQ.Entity.LightModels.SModelFieldElement@)">
            <summary>
            根据字段获取字段元素
            </summary>
            <param name="dbField"></param>
            <param name="fieldElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelElement.Dispose">
            <summary>
            释放内存
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.SModelFieldElement">
            <summary>
            SModel 字段元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.SModelFieldElement.DBTYPE_STRINT">
            <summary>
            字符串类型
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelFieldElement.#ctor">
            <summary>
            (构造函数)SModel 字段元素
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelFieldElement.#ctor(System.String,System.Type)">
            <summary>
            (构造函数)SModel 字段元素
            </summary>
            <param name="dbField">字段名</param>
            <param name="dbType">字段类型</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelFieldElement.#ctor(System.String)">
            <summary>
            (构造函数)SModel 字段元素
            </summary>
            <param name="dbField"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.SModelFieldElement.DBField">
            <summary>
            字段名
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.SModelFieldElement.DBType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.SModelFieldElement.Mandatory">
            <summary>
            必填
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.SModelFieldElement.Len">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.SModelFieldElement.DecimalDigits">
            <summary>
            小数位
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.SModelFieldElement.IsRemark">
            <summary>
            大数据字段
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.SModelFieldElement.Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.SModelFieldPropertyDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelFieldPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            对实体进行赋值
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="T:HWQ.Entity.LightModels.SModelList">
            <summary>
            简单实体的集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.Create">
            <summary>
            创建一个子元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.GetSModelElement">
            <summary>
            (构造函数)简单实体的集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.SetSModelElement(HWQ.Entity.LightModels.SModelElement)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.#ctor(HWQ.Entity.LightModels.SModelElement)">
            <summary>
            (构造函数)简单实体的集合
            </summary>
            <param name="sModelElem"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.#ctor">
            <summary>
            (构造函数) 简单实体的集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.#ctor(System.Int32)">
            <summary>
            (构造函数) 简单实体的集合
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.#ctor(System.Collections.Generic.IEnumerable{HWQ.Entity.LightModels.SModel})">
            <summary>
            (构造函数) 简单实体的集合
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.ToJson">
            <summary>
            输出 Json 数据格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.ToJson(System.Text.StringBuilder)">
            <summary>
            输出 Json 数据格式
            </summary>
            <param name="sb"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.SaveJson(System.String)">
            <summary>
            保存 json 文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.SaveJson(System.String,System.Text.Encoding)">
            <summary>
            保存 json 文件
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.OpenJson(System.String)">
            <summary>
            打开 json 文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.OpenJson(System.String,System.Text.Encoding)">
            <summary>
            打开 json 文件
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.ParseJson(System.String)">
            <summary>
            将字符串 Json 转换为特定的实体
            </summary>
            <param name="jsonData">字符串 Json 数据</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.BatchSet(System.String,System.Object)">
            <summary>
            批量设置字段属性
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <returns>修改的数量</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.BatchSet(System.String,System.Object,System.String,System.Object)">
            <summary>
            批量设置字段属性
            </summary>
            <param name="field0">字段0</param>
            <param name="value0">值0</param>
            <param name="field1">字段1</param>
            <param name="value1">值1</param>
            <returns>修改数量</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.BatchSet(System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            批量设置字段属性
            </summary>
            <param name="field0">字段0</param>
            <param name="value0">值0</param>
            <param name="field1">字段1</param>
            <param name="value1">值1</param>
            <param name="field2">字段2</param>
            <param name="value2">值2</param>
            <returns>修改数量</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.BatchSet(HWQ.Entity.LightModels.SModel)">
            <summary>
            批量设置字段属性
            </summary>
            <param name="updateValues">更新的值</param>
            <returns>修改数量</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.SModelList.Dispose">
            <summary>
            释放内存
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.SModelReader">
            <summary>
            模拟的数据读取流
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.SModelReader.m_CurIndex">
            <summary>
            当前索引
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.SModelReader.m_CurItem">
            <summary>
            当前项目
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.SModelReader.SModelList">
            <summary>
            获取实体集合
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.DBFieldAttribute">
            <summary>
            简单实体字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DBFieldAttribute.m_FieldName">
            <summary>
            数据库字段名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DBFieldAttribute.m_IsRemark">
            <summary>
            是否为大字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DBFieldAttribute.m_Encoding">
            <summary>
            字符串编码
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DBFieldAttribute.m_DecimalDigits">
            <summary>
            小数位数
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DBFieldAttribute.m_Len">
            <summary>
            字段长度
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBFieldAttribute.#ctor">
            <summary>
            简单实体字段的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBFieldAttribute.#ctor(System.String)">
            <summary>
            简单实体字段的构造方法
            </summary>
            <param name="fieldName">数据表字段名称</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBFieldAttribute.#ctor(System.String,HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            简单实体字段的构造方法
            </summary>
            <param name="fieldName">数据表字段名称</param>
            <param name="dbType">数据表字段的数据类型</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBFieldAttribute.#ctor(HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            简单实体字段的构造方法
            </summary>
            <param name="dbType"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBFieldAttribute.#ctor(HWQ.Entity.LightModels.StringEncoding)">
            <summary>
            简单实体字段的构造方法
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBFieldAttribute.#ctor(HWQ.Entity.LightModels.StringEncoding,System.Boolean)">
            <summary>
            简单实体字段的构造方法
            </summary>
            <param name="encoding"></param>
            <param name="isRemark"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBFieldAttribute.#ctor(System.Int32,System.Int32,HWQ.Entity.LightModels.StringEncoding,System.Boolean)">
            <summary>
            简单实体字段的构造方法
            </summary>
            <param name="len">字段长度</param>
            <param name="decimalDigits"></param>
            <param name="encoding"></param>
            <param name="isRemark"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBFieldAttribute.#ctor(System.Int32,HWQ.Entity.LightModels.StringEncoding,System.Boolean)">
            <summary>
            简单实体字段的构造方法
            </summary>
            <param name="len">字段长度</param>
            <param name="encoding"></param>
            <param name="isRemark"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBFieldAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            简单实体字段的构造方法
            </summary>
            <param name="len">字段长度</param>
            <param name="decimalDigits">小数位数</param>
        </member>
        <member name="P:HWQ.Entity.LightModels.DBFieldAttribute.Encoding">
            <summary>
            编码类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.DBFieldAttribute.IsRemark">
            <summary>
            是否为大字段
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.DBFieldAttribute.FieldName">
            <summary>
            数据表字段名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.DBFieldAttribute.DbType">
            <summary>
            数据表字段的数据类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.DBFieldAttribute.DecimalDigits">
            <summary>
            小数位数
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.DBFieldAttribute.Len">
            <summary>
            精度、长度
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.DBKeyAttribute">
            <summary>
            关键字
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.DBTableAttribute">
            <summary>
            简单实体数据表
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DBTableAttribute.m_Schema">
            <summary>
            架构名称
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBTableAttribute.#ctor">
            <summary>
            简单实体数据表构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBTableAttribute.#ctor(System.String)">
            <summary>
            简单实体数据表构造方法
            </summary>
            <param name="tableName">数据库表名</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBTableAttribute.#ctor(System.String,HWQ.Entity.LightModels.DBTableMode)">
            <summary>
            简单实体数据表构造方法
            </summary>
            <param name="tableName">数据库表名</param>
            <param name="mode"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBTableAttribute.#ctor(System.String,System.String)">
            <summary>
            简单实体数据表构造方法
            </summary>
            <param name="schema">架构名,默认 dbo</param>
            <param name="tableName">数据库表名</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBTableAttribute.#ctor(System.String,System.String,HWQ.Entity.LightModels.DBTableMode)">
            <summary>
            简单实体数据表构造方法
            </summary>
            <param name="schema">架构名,默认 dbo</param>
            <param name="tableName">数据库表名</param>
            <param name="mode"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.DBTableAttribute.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.DBTableAttribute.Schema">
            <summary>
            架构名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.DBTableAttribute.Mode">
            <summary>
            数据表类型
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelReader">
            <summary>
            从数据源读取行的一个只进流
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelReader.m_ModelType">
            <summary>
            实体类型T
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelReader.m_SrcModelName">
            <summary>
            原实体名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelReader.DataReader">
            <summary>
            从数据源读取行的一个只进流。
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelReader.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name">列的名称</param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelReader.VisibleFieldCount">
            <summary>
            获取返回的字段数量
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.GetName(System.Int32)">
            <summary>
            获取字段名称
            </summary>
            <param name="ordinal">列序号</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.GetFieldType(System.Int32)">
            <summary>
            获取字段类型
            </summary>
            <param name="ordinal">列序号</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.#ctor(System.Data.Common.DbDataReader,System.Type)">
            <summary>
            ModelReader 构造方法
            </summary>
            <param name="dataReader"></param>
            <param name="lightModelType"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.GetModel(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            
            </summary>
            <param name="modelElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.GetModel``1">
            <summary>
            获取模型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.GetModel``1(System.String[])">
            <summary>
            获取模型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields">只获此字段</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.GetSModel">
            <summary>
            获取 SModel
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.GetModel``1(System.Boolean)">
            <summary>
            获取模型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ignoreNotField">是否忽略不存在的字段</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.GetModel(System.Type)">
            <summary>
            获取模型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.GetModel(System.Type,System.String[])">
            <summary>
            获取模型
            </summary>
            <param name="type"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.Read">
            <summary>
            将读取器前进到结果集中的下一个记录。
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.Close">
            <summary>
            关闭 ModelReader 对象
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelReader.IsClosed">
            <summary>
            获取一个值,该值指示 ModelReader 是否已经关闭
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.NextResult">
            <summary>
            读取批处理语句的结果时，使读取器前进到下一个结果。
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelReader.RecordsAffected">
            <summary>
            获取一个值，该值指示 RecordsAffected 是否包含一行或多行。
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.GetSchemaTable">
            <summary>
            返回一个 System.Data.DataTable，它描述 System.Data.Common.DbDataReader 的列元数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.IsDBNull(System.Int32)">
            <summary>
            获取一个值，该值指示列中是否包含不存在的或已丢失的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelReader.Dispose">
            <summary>
            释放内存
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.FilterSQL">
            <summary>
            SQL 语句的 LightModelFilter 对象
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.FilterSQL.#ctor(System.String)">
            <summary>
            SQL 语句的 LightModelFilter 对象
            </summary>
            <param name="tSql"></param>
        </member>
        <member name="T:HWQ.Entity.LightModels.LightModelFilter">
            <summary>
            轻量级实体的筛选方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.Dispose">
            <summary>
            释放内存
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.LightModels.LightModelFilter.JoinCollection">
            <summary>
            对象的关联集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.JoinCollection.Add(System.Type)">
            <summary>
            添加关联对象
            </summary>
            <param name="modelT"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.JoinCollection.Add(System.Type,System.String)">
            <summary>
            添加关联对象
            </summary>
            <param name="modelT">关联实体的类型</param>
            <param name="on">两个表之间的连接语句（on 表1.字段1 = 表2.字段2）</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.JoinCollection.Add(HWQ.Entity.LightModels.JoinTypes,System.Type,System.String)">
            <summary>
            添加关联对象
            </summary>
            <param name="joinType">关联类型（Full=全关联，Left=左关联，Rigth=右关联）</param>
            <param name="modelT">关联实体的类型</param>
            <param name="on">两个表之间的连接语句（on 表1.字段1 = 表2.字段2）</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.JoinCollection.Add(HWQ.Entity.LightModels.JoinTypes,System.String,System.String)">
            <summary>
            添加关联对象
            </summary>
            <param name="joinType"></param>
            <param name="modelName"></param>
            <param name="on"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.JoinCollection.Add(System.String,System.String)">
            <summary>
            添加关联对象
            </summary>
            <param name="modelName"></param>
            <param name="on"></param>
        </member>
        <member name="F:HWQ.Entity.LightModels.LightModelFilter.m_JoinPk">
            <summary>
            关联查询的主键
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LightModelFilter.m_Joins">
            <summary>
            对象的关联集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LightModelFilter.m_Locks">
            <summary>
            锁类型
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.#ctor(HWQ.Entity.LightModels.FilterTypes)">
            <summary>
            轻量级实体的筛选的构造方法
            </summary>
            <param name="filterType"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.#ctor(System.String)">
            <summary>
            轻量级实体的筛选的构造方法
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.#ctor(System.Type)">
            <summary>
            轻量级实体的筛选的构造方法
            </summary>
            <param name="modelType"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.#ctor(System.Type,System.String)">
            <summary>
            轻量级实体的筛选的构造方法
            </summary>
            <param name="modelType"></param>
            <param name="TSqlWhere"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.#ctor(System.String,System.String)">
            <summary>
            轻量级实体的筛选的构造方法
            </summary>
            <param name="tableName"></param>
            <param name="TSqlWhere"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LightModelFilter.Locks">
            <summary>
            锁集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.HasLcok">
            <summary>
            判断是否有锁
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.LightModelFilter.DefalutModel">
            <summary>
            默认输出的模型字段内容
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LightModelFilter.TSql">
            <summary>
            最原始的单独 T-SQL 语句
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LightModelFilter.JoinPk">
            <summary>
            关联查询的主键
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.IsJoin">
            <summary>
            是否属于关联查询的筛选方法
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.LightModelFilter.Joins">
            <summary>
            对象的关联集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.GetModelNames">
            <summary>
            获取实体的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.Or(System.String,HWQ.Entity.LightModels.FilterSQL,HWQ.Entity.Filter.Logic)">
            <summary>
            添加过滤条件
            </summary>
            <param name="fieldName"></param>
            <param name="filterSql"></param>
            <param name="logic"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.Or(System.String,System.String,HWQ.Entity.Filter.Logic,HWQ.Entity.LightModels.FilterTypes)">
            <summary>
            添加过滤条件
            </summary>
            <param name="fieldName"></param>
            <param name="sql"></param>
            <param name="logic"></param>
            <param name="filterType"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.And(System.String,HWQ.Entity.LightModels.FilterSQL,HWQ.Entity.Filter.Logic)">
            <summary>
            添加过滤条件
            </summary>
            <param name="fieldName"></param>
            <param name="filterSql"></param>
            <param name="logic"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LightModelFilter.And(System.String,System.String,HWQ.Entity.Filter.Logic,HWQ.Entity.LightModels.FilterTypes)">
            <summary>
            添加过滤条件
            </summary>
            <param name="fieldName"></param>
            <param name="sql"></param>
            <param name="logic"></param>
            <param name="filterType"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LightModelFilter.Limit">
            <summary>
            分页的界限
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LightModelFilter.FilterType">
            <summary>
            过滤类型。 Auto | SQL | SqlWhere
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LightModelFilter.ReturnType">
            <summary>
            返回的对象类型,默认 DataTable
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LightModelFilter.Fields">
            <summary>
            只返回的字段
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelFieldElement">
            <summary>
            轻量级字段元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_Parent">
            <summary>
            所属的实体元素
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Parent">
            <summary>
            所属的实体元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_FieldState">
            <summary>
            LModelFieldElement 字段元素的对象的状态。
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_GroupName">
            <summary>
            字段组
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_DBField">
            <summary>
            跟数据库对应的字段名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_PropName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_Prop">
            <summary>
            实体对象的 Property
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_DBType">
            <summary>
            实体的数据类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_IsRemark">
            <summary>
            是否为大字段类型 ntext，text
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_Encoding">
            <summary>
            字符串编码类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_Ui">
            <summary>
            界面的字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_IsKey">
            <summary>
            是否为主键
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_ReadOnly">
            <summary>
            只读
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_Mandatory">
            <summary>
            牵制
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_DefalutValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_ViewParams">
            <summary>
            普通视图字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_DynVFieldParams">
            <summary>
            动态视图字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_DecimalDigits">
            <summary>
            数字类型的小数位数
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_Index">
            <summary>
            排序
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_Guid">
            <summary>
            字段 Guid
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_Mapping">
            <summary>
            映射
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_Category">
            <summary>
            类别
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldElement.m_IsNumbuer">
            <summary>
            是否为数字类型
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElement.#ctor">
            <summary>
            轻量级字段元素的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElement.#ctor(System.String,HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            轻量级字段元素的构造方法
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="dbType">字段类型</param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.IsNumber">
            <summary>
            是否为数字类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Category">
            <summary>
            类别
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.FieldState">
            <summary>
            LModelFieldElement 字段元素的对象的状态。
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.IsRemakr">
            <summary>
            是否为大字段类型 ntext，text ，备注字段
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Encoding">
            <summary>
            编码类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Mapping">
            <summary>
            映射
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Guid">
            <summary>
            字段 Guid
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.DBField">
            <summary>
            数据库字段名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.PropName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Prop">
            <summary>
            属性
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.DBType">
            <summary>
            字段数据类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.UI">
            <summary>
            默认界面的定义
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.IsKey">
            <summary>
            是否为主键
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.ReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Mandatory">
            <summary>
            强制,默认：true
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.DefalutValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.DecimalDigits">
            <summary>
            小数点位数
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Index">
            <summary>
            排序序号
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.MaxLen">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.MinLen">
            <summary>
            最小长度
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Maximum">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Minimum">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.RegExp">
            <summary>
            验证字符串的正则表达式
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Type">
            <summary>
            字段的类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.ViewParams">
            <summary>
            视图字段的参数
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.DynVFieldParams">
            <summary>
            动态视图字段
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Example">
            <summary>
            填写的例子
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.GroupName">
            <summary>
            组名称 (暂时没用上)
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElement.Tag">
            <summary>
            用户自定义参数
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelFieldElementCollection">
            <summary>
            字段元素的集合，
            支持快速索引
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.#ctor">
            <summary>
            字段元素的集合（构造方法）
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.#ctor(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            字段元素的集合（构造方法）
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.#ctor(System.Collections.Generic.IEnumerable{HWQ.Entity.LightModels.LModelFieldElement})">
            <summary>
            字段元素的集合（构造方法）
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.FindByProp(System.String)">
            <summary>
            按 Property 名称查找字段元素
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.FindByField(System.String)">
            <summary>
            按 Field 名称查找字段元素
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.TryGetField(System.String,HWQ.Entity.LightModels.LModelFieldElement@)">
            <summary>
            获取字段元素
            </summary>
            <param name="fieldName"></param>
            <param name="fieldElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.ContainsField(System.String)">
            <summary>
            是否包含特定的 Field 名称
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.ContainsProp(System.String)">
            <summary>
            是否包含特定的 Property 名称
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElementCollection.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index">索引值</param>
            <returns>字段元素</returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElementCollection.Item(System.String)">
            <summary>
            索引器
            </summary>
            <param name="fieldName">数据库字段的名称</param>
            <returns>字段元素</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.Add(System.String,HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            添加字段元素
            </summary>
            <param name="fieldName"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.Add(System.String)">
            <summary>
            添加字段元素
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.Add(HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            添加字段元素
            </summary>
            <param name="fieldElem"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelFieldElementCollection.Count">
            <summary>
            获取字段的数量
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.GetMapping">
            <summary>
            获取映射的字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.ToArray(HWQ.Entity.LightModels.LModelFieldTypes)">
            <summary>
            将字段元素复制到新的数组中
            </summary>
            <param name="type">字段类型</param>
            <returns>新数组</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.ToGeneralArray">
            <summary>
            普通字段，跟数据库的字段一一对应。
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.ToStringArray">
            <summary>
            输出字段名集合，以逗号作为分隔符。格式: 字段1,字段2,字段3,...
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.ToStringArray(HWQ.Entity.LightModels.LModelFieldTypes)">
            <summary>
            输出字段名集合，以逗号作为分隔符。格式: 字段1,字段2,字段3,...
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.CreateStrArray(System.Collections.Generic.IList{HWQ.Entity.LightModels.LModelFieldElement})">
            <summary>
            创建字符串数组
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.Remove(HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            删除字段元素
            </summary>
            <param name="item">字段元素</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldElementCollection.Remove(System.String)">
            <summary>
            删除字段元素
            </summary>
            <param name="dbField">数据库字段名称</param>
        </member>
        <member name="T:HWQ.Entity.LightModels.MemoryData.LModelDatabase">
            <summary>
            简单实体数据库
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelDatabase.#ctor">
            <summary>
            简单实体数据库的构造方法
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.MemoryData.LModelDatabase.Tables">
            <summary>
            表集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.MemoryData.LModelDatabase.RowCountAll">
            <summary>
            所有行的数量
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelDatabase.SelectModelByPk(System.String,System.Object)">
            <summary>
            按关键字获取实体
            </summary>
            <param name="tableName"></param>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelDatabase.SelectModelByPk(System.Type,System.Object)">
            <summary>
            按主键获取记录
            </summary>
            <param name="modelT"></param>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelDatabase.SelectModelByPk``1(System.Object)">
            <summary>
            按主键获取记录
            </summary>
            <typeparam name="ModelT"></typeparam>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelDatabase.InsertModel(System.Object)">
            <summary>
            插入模型
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelDatabase.ExistsModelByPk(System.Type,System.Object)">
            <summary>
            是否存在
            </summary>
            <param name="modelT"></param>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelDatabase.ExistsModelByPk``1(System.Object)">
            <summary>
            是否存在
            </summary>
            <typeparam name="ModelT"></typeparam>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelDatabase.SelectModelsByExp(System.String,System.String)">
            <summary>
            (未实现)查找表达式
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelDatabase.SelectModels(HWQ.Entity.LightModels.LightModelFilter)">
            <summary>
            （未实现）按条件搜索
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.LightModels.MemoryData.LModelRowCollection">
            <summary>
            行集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.MemoryData.LModelRowCollection.m_PkType">
            <summary>
            主键的数据类型
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelRowCollection.#ctor">
            <summary>
            (构造函数)行集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelRowCollection.#ctor(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            (构造函数)行集合
            </summary>
            <param name="modelElem">实体元素</param>
        </member>
        <member name="F:HWQ.Entity.LightModels.MemoryData.LModelRowCollection.m_ClearTime">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.MemoryData.LModelRowCollection.Item(System.Int32)">
            <summary>
            行集合的缩影
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelRowCollection.Contains(System.Object)">
            <summary>
            判断是否存在这个值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.MemoryData.LModelRowCollection.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelRowCollection.Clear">
            <summary>
            清楚全部缓冲
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelRowCollection.Find(System.Object)">
            <summary>
            按主键查找
            </summary>
            <param name="value">主键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelRowCollection.FindByExp(System.String)">
            <summary>
            查找表达式
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelRowCollection.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelRowCollection.Update(System.Object)">
            <summary>
            更新缓冲 
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.MemoryData.LModelRowCollection.Remove(System.Object)">
            <summary>
            删除
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:HWQ.Entity.LightModels.MemoryData.LModelTable">
            <summary>
            模型表
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.MemoryData.LModelTable.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.MemoryData.LModelTable.Rows">
            <summary>
            行集合
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.MemoryData.LModelTableCollection">
            <summary>
            表集合
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.DBOrderByAttribute">
            <summary>
            默认排序字段
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBOrderByAttribute.#ctor(System.String)">
            <summary>
            (构造函数)默认排序字段
            </summary>
            <param name="orderBy"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.DBOrderByAttribute.OrderBy">
            <summary>
            默认排序 T-Sql 的 Order by 子句
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMValidateAttribute">
            <summary>
            验证功能
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMValidateAttribute.maxLen">
            <summary>
            设置输入的最大数量
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMValidateAttribute.minLen">
            <summary>
            设置输入的最小数量
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMValidateAttribute.maximum">
            <summary>
            最大数值
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMValidateAttribute.minimum">
            <summary>
            最小数值
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMValidateAttribute.regExp">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMValidateAttribute.example">
            <summary>
            填写的例子
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMValidateAttribute.mandatory">
            <summary>
            强制
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelGroup`2">
            <summary>
            轻量级模型组
            </summary>
            <typeparam name="ModelT"></typeparam>
            <typeparam name="FieldT"></typeparam>
        </member>
        <member name="T:HWQ.Entity.LightModels.UIFieldAttribute">
            <summary>
            界面属性
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.UIFieldAttribute.visible">
            <summary>
            用户可视
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.UIFieldAttribute.index">
            <summary>
            排列索引
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.UIFieldAttribute.defaultWidth">
            <summary>
            默认宽度
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.UIFieldAttribute.format">
            <summary>
            显示格式化
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.UIFieldAttribute.alignment">
            <summary>
            对齐方式
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.UIFieldAttribute.ControlType">
            <summary>
            控件类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.UIFieldAttribute.search">
            <summary>
            查询字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.UIFieldAttribute.visibleColumn">
            <summary>
            表格可视的列
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.UIFieldAttribute.tag">
            <summary>
            用户自定义属性
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.UIAlignment">
            <summary>
            对齐方式
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.UIAlignment.None">
            <summary>
            空
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.UIAlignment.Left">
            <summary>
            左对齐
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.UIAlignment.Right">
            <summary>
            右对齐
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.UIAlignment.Center">
            <summary>
            中间对齐
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMBufferDataAttribute">
            <summary>
            缓冲轻量级模型的数据 (默认缓冲 15 分钟)
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LMBufferDataAttribute.#ctor">
            <summary>
            缓冲轻量级模型的数据(默认缓冲 15 分钟)
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LMBufferDataAttribute.#ctor(System.Double)">
            <summary>
            缓冲轻量级模型的数据(默认缓冲 15 分钟)
            </summary>
            <param name="minutes">清除分钟数(默认缓冲 15 分钟)</param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LMBufferDataAttribute.ClearSpan">
            <summary>
            清除数据的时间
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.DBIdentityAttribute">
            <summary>
            自动编号
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBIdentityAttribute.#ctor">
            <summary>
            默认为系统自增 ID
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.DBIdentityAttribute.#ctor(HWQ.Entity.LightModels.LModelIdentityRule)">
            <summary>
            默认为系统自增 ID
            </summary>
            <param name="rule"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.DBIdentityAttribute.Rule">
            <summary>
            ID 规则
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.DBIdentityAttribute.BufferSize">
            <summary>
            共享模式下, 自动递增缓冲的数量
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelFieldTypes">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldTypes.General">
            <summary>
            普通数据字段(跟数据库对应)
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldTypes.ViewField">
            <summary>
            视图字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelFieldTypes.DynVField">
            <summary>
            动态视图
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMFieldDBTypes">
            <summary>
            简单实体的字段数据类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.ID">
            <summary>
            系统ID
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.String">
            <summary>
            字符串类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.ASCII">
            <summary>
            ASCII 
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Character">
            <summary>
            字符
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Bytes">
            <summary>
            字节集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Byte">
            <summary>
            字节
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Decimal">
            <summary>
            表示十进制数。
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Currency">
            <summary>
            货币
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Int">
            <summary>
            整形
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Long">
            <summary>
            长整形
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.DateTime">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Date">
            <summary>
            日期部分
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Boolean">
            <summary>
            布尔值。
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Double">
            <summary>
            表示一个双精度浮点数字。
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Float">
            <summary>
            
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Guid">
            <summary>
            唯一编号
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Image">
            <summary>
            二进制数据
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Color">
            <summary>
            颜色 RGB 值(未启用!)
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.LmEnum">
            <summary>
            枚举类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LMFieldDBTypes.Class">
            <summary>
            类,特殊类型
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelMath">
            <summary>
            轻量级实体的数学函数
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelMath.Sum(HWQ.Entity.LightModels.LModelReader)">
            <summary>
            加法运算
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelMath.Sum(HWQ.Entity.LightModels.LModelReader,System.String)">
            <summary>
            加法运算
            </summary>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelMath.Sum``1(HWQ.Entity.LightModels.LModelReader)">
            <summary>
            加法运算
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">数据流</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelMath.Sum``1(HWQ.Entity.LightModels.LModelReader,System.String)">
            <summary>
            加法运算
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelMath.Sum``1(System.Collections.IEnumerable,System.String)">
            <summary>
            加法运算
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelMath.Sum(System.Collections.IEnumerable,System.String)">
            <summary>
            加法运算
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelMath.Sum``1(System.Data.DataTable)">
            <summary>
            加法运算
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelMath.Sum``1(System.Data.DataTable,System.String)">
            <summary>
            加法运算
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelMath.Avg``1(System.Collections.IEnumerable,System.String)">
            <summary>
            算平均值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelMath.Max``1(System.Collections.IList,System.String)">
            <summary>
            最大值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelMath.Min``1(System.Collections.IList,System.String)">
            <summary>
            最小值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelElement">
            <summary>
            简单实体元素
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelElement.PropGroup">
            <summary>
            字段组集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.PropGroup.GroupName">
            <summary>
            
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_CategoryList">
            <summary>
            类别集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_Schema">
            <summary>
            架构名
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_PkClustered">
            <summary>
            创建表的主键时候, 默认聚合的排序方式
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_IsTemp">
            <summary>
            是否为临时创建的实体元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_IsInheritLModel">
            <summary>
            是否继承轻量级实体
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_IdentityTable">
            <summary>
            控制自动递增 ID 的表名，允许多表不重复递增ID
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_DBTableName">
            <summary>
            数据库表的名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_OrderBy">
            <summary>
            默认排序
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_DescProp">
            <summary>
            实体的描述 Property 名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_ValueProp">
            <summary>
            实体的值 Propoerty 名称
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_CodeField">
            <summary>
            编码字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_DefaultValueFields">
            <summary>
            拥有默认字段值的字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_CodeFieldElem">
            <summary>
            编码字段元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_BufferData">
            <summary>
            是否缓冲数据
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_BufferOvertime">
            <summary>
            缓冲时间
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_FullName">
            <summary>
            全名
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_ModelT">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_DbNamespace">
            <summary>
            数据库命名空间
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_Relationals">
            <summary>
            关联的集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_IsChange">
            <summary>
            实体元素是否发生变化
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_ContainsMapping">
            <summary>
            包含映射字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_Description">
            <summary>
            
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelElement.m_ExFields">
            <summary>
            例外的字段集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElement.#ctor">
            <summary>
            实体元素的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElement.#ctor(System.String)">
            <summary>
            实体元素的构造方法
            </summary>
            <param name="name">实体名称和表名</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElement.#ctor(System.String,System.String)">
            <summary>
            实体元素的构造方法
            </summary>
            <param name="dbNamespace">命名空间</param>
            <param name="name">实体名称和表名</param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.Schema">
            <summary>
            架构名
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.PkClustered">
            <summary>
            创建表或字段的时候, 默认聚合方式: ASC | DESC 两种
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.Mode">
            <summary>
            实体模式.数据库模式,内存模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.GroupName">
            <summary>
            分组名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.IsTemp">
            <summary>
            是否为临时创建的实体元素
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.CategoryList">
            <summary>
            目录集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.ExFields">
            <summary>
            除外的字段
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.Relationals">
            <summary>
            关联的集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.DbNamespace">
            <summary>
            数据库命名空间
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.IdentityTable">
            <summary>
            控制自动ID的表名, 可以几个表共享一个自动id
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.Identity">
            <summary>
            自动IDEntity
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.ModelT">
            <summary>
            实体元素指向的 Type
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.FullName">
            <summary>
            获取实体的全路径（命名空间 + 类名）
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.Groups">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.BufferData">
            <summary>
            是否缓冲数据
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.BufferOvertime">
            <summary>
            缓冲超时时间
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElement.IsInheritLModel">
            <summary>
            是否继承轻量级实体
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.ViewFields">
            <summary>
            视图字段的集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.DynViewFields">
            <summary>
            动态视图字段的集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.AssemblyQualifiedName">
            <summary>
            作废
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.LVersionAssemblyQualifiedName">
            <summary>
            作废
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.IdentityProp">
            <summary>
            [否决] 种子属性的名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.OnlyReadProps">
            <summary>
            只读专题的字段集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.IdentityField">
            <summary>
            种子字段的名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.DBTableName">
            <summary>
            跟数据库对应的表名
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.DBSchemaTable">
            <summary>
            架构 + 表名
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.OrderBy">
            <summary>
            默认排序方法
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.DescProp">
            <summary>
            表示描述的属性名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.ValueProp">
            <summary>
            表示值的属性名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.Fields">
            <summary>
            字段元素集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElement.GetIdentityField">
            <summary>
            获取自动递增的Identity 字段元素
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.Keys">
            <summary>
            主键字段集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.Name">
            <summary>
            实体名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.Description">
            <summary>
            实体描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.PrimaryKey">
            <summary>
            主键名称（注：只对表中存在一个主键字段的）
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.CodeField">
            <summary>
            编码字段
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelElement.PropKeys">
            <summary>
            代表属性的主键集合名称
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElement.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElement.TryGetField(System.String,HWQ.Entity.LightModels.LModelFieldElement@)">
            <summary>
            测试是否能获取到字段元素
            </summary>
            <param name="fieldName"></param>
            <param name="fieldElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElement.HasField(System.String)">
            <summary>
            是否存在字段
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelElement.Dispose">
            <summary>
            释放内存
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelList`1">
            <summary>
            轻量级数据集合
            </summary>
            <typeparam name="T">简单实体</typeparam>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelList`1.PagesInfo">
            <summary>
             页信息
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelList`1.ExtendedProperties">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.#ctor(System.String)">
            <summary>
            轻量级数据集合的构造方法
            </summary>
            <param name="modelName"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.#ctor(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            轻量级数据集合的构造方法
            </summary>
            <param name="modelElem"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.#ctor">
            <summary>
            轻量级数据集合的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.#ctor(System.Int32)">
            <summary>
            轻量级数据集合的构造方法
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            轻量级数据集合的构造方法
            </summary>
            <param name="models"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelList`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.ToSortedList``1">
            <summary>
            输出到有字典
            </summary>
            <typeparam name="FieldT"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.FindByPk(System.Object,System.Boolean)">
            <summary>
            按关键字查找
            </summary>
            <param name="pkValue">关键值</param>
            <param name="quickMode">快速模式,不进行索引，只查找一次</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.FindByPk(System.Object)">
            <summary>
            按关键字查找
            </summary>
            <param name="pkValue">关键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.ToSortedList``1(System.String,System.Boolean)">
            <summary>
            输出带索引值的集合
            </summary>
            <typeparam name="FieldT"></typeparam>
            <param name="keyName"></param>
            <param name="triggerException">触发异常</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.ToDataTable">
            <summary>
            输出数据表 DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.ToGroup``1(System.String)">
            <summary>
            输出为组
            </summary>
            <typeparam name="FieldT"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.ToArrayByColumn``1(System.String)">
            <summary>
            输出列数据
            </summary>
            <typeparam name="FieldT"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.ToArrayByColumn``1">
            <summary>
            输出列数据
            </summary>
            <typeparam name="FieldT"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="items"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.RemoveByPk(System.Object)">
            <summary>
            按主键删除记录
            </summary>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.Clear">
            <summary>
            移除所有元素
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.SetTakeChange(System.Boolean,System.Boolean)">
            <summary>
            设置是否捕获字段值发生编号
            </summary>
            <param name="take"></param>
            <param name="restart"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.Sort(System.String[])">
            <summary>
            按字段排序(暂时只对一个字段进行排序)
            </summary>
            <example>field1,field2 DESC,field3 asc</example>
            <param name="orderByFields"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.GetColumnData``1(System.String)">
            <summary>
            获取栏的数据
            </summary>
            <typeparam name="ColumnT">栏的数据类型</typeparam>
            <param name="fieldName">字段名称</param>
            <returns>栏的集合</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.Dispose">
            <summary>
            释放内存
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelList`1.m_IsBindingView">
            <summary>
            允许视图绑定
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelList`1.m_IsVirtual">
            <summary>
            虚拟模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelList`1.IsVirtual">
            <summary>
            是否为虚拟模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelList`1.IsBindingView">
            <summary>
            是否自动绑定视图
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.BatchSet(System.String,System.Object)">
            <summary>
            批量设置字段属性
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <returns>修改的数量</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.BatchSet(System.String,System.Object,System.String,System.Object)">
            <summary>
            批量设置字段属性
            </summary>
            <param name="field0">字段0</param>
            <param name="value0">值0</param>
            <param name="field1">字段1</param>
            <param name="value1">值1</param>
            <returns>修改数量</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.BatchSet(System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            批量设置字段属性
            </summary>
            <param name="field0">字段0</param>
            <param name="value0">值0</param>
            <param name="field1">字段1</param>
            <param name="value1">值1</param>
            <param name="field2">字段2</param>
            <param name="value2">值2</param>
            <returns>修改数量</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.BatchSet(HWQ.Entity.LightModels.SModel)">
            <summary>
            批量设置字段属性
            </summary>
            <param name="updateValues">更新的值</param>
            <returns>修改数量</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList`1.BatchSetTakeChange(System.Boolean)">
            <summary>
            批量设置捕获字段变化
            </summary>
            <param name="take"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelDna">
            <summary>
            轻量级模型 DNA
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelDna.m_CommonGroup">
            <summary>
            全路径索引的实体元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelDna.m_OtherGroups">
            <summary>
            其他模型组
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.GetGroup(System.String)">
            <summary>
            获取元素组
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelDna.IsEdit">
            <summary>
            是否为编辑状态
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelDna.Count">
            <summary>
            获取元素的数量
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.Clear">
            <summary>
            清除所有
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.Add(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            添加
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.Contains(System.Type)">
            <summary>
            判断是否包含
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.ContainsByFullName(System.String)">
            <summary>
            包含全名
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.GetElementByFullName(System.String)">
            <summary>
            获取元素
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.TryGetElementByFullName(System.String,HWQ.Entity.LightModels.LModelElement@)">
            <summary>
            获取元素
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.GetElement(System.Type)">
            <summary>
            获取元素
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.GetElementAll">
            <summary>
            获取所有元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.BeginEdit">
            <summary>
            开始修改
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.EndEdit">
            <summary>
            结束修改
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.LoadXmlModelFile(HWQ.Entity.Xml.XmlModelFile)">
            <summary>
            加载 XmlModelFile 文件
            </summary>
            <param name="modelFile"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.ContainsByName(System.String)">
            <summary>
            模型名称是否存在
            </summary>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.GetElementByName(System.String)">
            <summary>
            按模型名称获取元素
            </summary>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.TryGetElementByName(System.String,HWQ.Entity.LightModels.LModelElement@)">
            <summary>
            按模型名称获取元素
            </summary>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.ValidEdit">
            <summary>
            验证是否可以编辑
            </summary>
            <param name="triggerException"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelDna.ValidEdit(System.Boolean)">
            <summary>
            验证是否可以编辑
            </summary>
            <param name="triggerException"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.LightModels.Limit">
            <summary>
            分页的界限，配合 LightModelFilter 使用
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.Limit.Empty">
            <summary>
            空值
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.Limit.ByPageIndex(System.Int32,System.Int32)">
            <summary>
            按页码产生索引
            </summary>
            <param name="maxRows">每页显示的数量</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.Limit.#ctor(System.Int32,System.Int32)">
            <summary>
            分页的界限构造方法
            </summary>
            <param name="maxRows">每页的记录数量</param>
            <param name="startRowIndex">起始位置</param>
        </member>
        <member name="P:HWQ.Entity.LightModels.Limit.MaxRows">
            <summary>
            每页的记录数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.Limit.StartRowIndex">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.Limit.EndRowIndex">
            <summary>
            获取结束的行数
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.Limit.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMEnumAttribute">
            <summary>
            枚举实体类型
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.ManyToManyAttribute">
            <summary>
            多对多的关系
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.ManyToManyAttribute.m_RelaType">
            <summary>
            中间关联的实体
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.OneToManyAttribute">
            <summary>
            一对多的关系
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.VFieldMode">
            <summary>
            视图模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.VFieldMode.Default">
            <summary>
            默认模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.VFieldMode.Tag">
            <summary>
            Tag 模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.VFieldMode.TSql">
            <summary>
            T-SQL 语句
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.VFieldAttribute">
            <summary>
            视图字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.VFieldAttribute.m_PkProp">
            <summary>
            主键字段名
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.VFieldAttribute.m_VType">
            <summary>
            视图对象
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.VFieldAttribute.m_ViewTable">
            <summary>
            视图表名
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.VFieldAttribute.m_tSql">
            <summary>
            sql 语句
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.VFieldAttribute.#ctor">
            <summary>
            视图字段的构造方法
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.VFieldAttribute.FactoryT">
            <summary>
            视图工厂
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.VFieldAttribute.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="factoryT"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.VFieldAttribute.#ctor(System.Type,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="factoryT"></param>
            <param name="pkProp"></param>
            <param name="factParams"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.VFieldAttribute.#ctor(System.String,System.Type)">
            <summary>
            视图字段的构造方法
            </summary>
            <param name="pkProp">主键属性名称</param>
            <param name="vType">关联表的类型</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.VFieldAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            视图字段的构造方法
            </summary>
            <param name="pkProp">当前实体的外键字段</param>
            <param name="viewTable">关联表的名称</param>
            <param name="viewProp">关联表需要显示的字段</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.VFieldAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            视图字段的构造方法
            </summary>
            <param name="pkProp">主键属性名称</param>
            <param name="vType">关联表的类型</param>
            <param name="viewProp">目标字段名称</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.VFieldAttribute.#ctor(System.String,System.Type,System.Int32)">
            <summary>
            视图字段的构造方法
            </summary>
            <param name="pkProp">主键属性名称</param>
            <param name="vType">关联表的类型</param>
            <param name="level">优先层次</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.VFieldAttribute.#ctor(System.String,System.Type,System.String,System.Int32)">
            <summary>
            视图字段的构造方法
            </summary>
            <param name="pkProp">主键属性名称</param>
            <param name="vType">关联表的类型</param>
            <param name="viewProp">目标字段名称</param>
            <param name="level">优先层次</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.VFieldAttribute.#ctor(HWQ.Entity.LightModels.VFieldMode,System.String)">
            <summary>
            视图字段的构造方法
            </summary>
            <param name="mode"></param>
            <param name="tSql"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.VFieldAttribute.TSql">
            <summary>
            
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.VFieldAttribute.Mode">
            <summary>
            视图字段的取自值模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.VFieldAttribute.Tag">
            <summary>
            一般用于用户存放自定义数据
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.VFieldAttribute.PkProp">
            <summary>
            主键属性名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.VFieldAttribute.VType">
            <summary>
            关联表的实体类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.VFieldAttribute.ViewTable">
            <summary>
            关联表的表名
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.VFieldAttribute.ViewProp">
            <summary>
            目标字段名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.VFieldAttribute.Level">
            <summary>
            优先层次
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelIdentityRule">
            <summary>
            id 规则
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelIdentityRule.Auto">
            <summary>
            自动状态,当用户不指定Id,则由系统指定一个
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelIdentityRule.System">
            <summary>
            系统状态,由系统管理ID
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelIdentityRule.User">
            <summary>
            由用户指定Id
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMCategoryAttribute">
            <summary>
            类别
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LMCategoryAttribute.#ctor">
            <summary>
            类别
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LMCategoryAttribute.#ctor(System.String)">
            <summary>
            类别
            </summary>
            <param name="name">类别名称</param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LMCategoryAttribute.Name">
            <summary>
            类别名称
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMCategoryInfo">
            <summary>
            实体字段的类别信息
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMCategoryCollection">
            <summary>
            目录集合
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.StringEncoding">
            <summary>
            字符串编码类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DefalutValueType.Value">
            <summary>
            值类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DefalutValueType.Code">
            <summary>
            代码类型
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.DefautlValueManage">
            <summary>
            默认值管理
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.DefautlValueManage.#ctor">
            <summary>
            (构造方法)默认值管理
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DefautlValueManage.m_VTypeValue">
            <summary>
            值类型的值
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DefautlValueManage.m_CodeMethods">
            <summary>
            代码模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.DefautlValueManage.Type">
            <summary>
            默认值的数据类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.DefautlValueManage.Text">
            <summary>
            源值
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.DefautlValueManage.SetDefine(HWQ.Entity.LightModels.LMFieldDBTypes,System.String)">
            <summary>
            设置定义
            </summary>
            <param name="dbType"></param>
            <param name="text"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DefautlValueManage.SetDefine(System.Type,System.String)">
            <summary>
            设置定义
            </summary>
            <param name="fieldType">字段类型</param>
            <param name="text">用户自定义的字符串</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DefautlValueManage.GetValue">
            <summary>
            获取值
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.FieldElementState">
            <summary>
            LModelFieldElement 字段元素的对象的状态。
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.FieldElementState.Detached">
            <summary>
            该行已被创建，但不属于任何 LModelFieldElement 在以下情况下立即处于此状态：创建之后添加到集合中之前；或从集合中移除之后。
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.FieldElementState.Unchanged">
            <summary>
            该字段尚未修改
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.FieldElementState.Added">
            <summary>
            该字段新添加的
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.FieldElementState.Deleted">
            <summary>
            改字段已经被删除
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.FieldElementState.Modified">
            <summary>
            改字段已经被修改
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.Expand.DynVFFactoryParamCollection">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.Expand.DynVFieldFactory">
            <summary>
            动态视图字段的工厂
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.Expand.DynVFieldFactory.Params">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.Expand.DynVFieldFactory.GetFields">
            <summary>
            获取动态视图字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.Expand.DynVFieldFactory.GetValues">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.LightModels.Expand.DynVFieldFactory.OwnerModel">
            <summary>
            模型对象
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.Expand.DynVFieldFactory.ModelT">
            <summary>
            元素的类型
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.EnumVFieldFactory">
            <summary>
            枚举视图字段("PkProp=STATUS", "Text=[-3=被删除,-2=退出,-1=退稿,0=待审核,99=已审核]")
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.IdentityManager">
            <summary>
            Identity 自动递增映射
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.IdentityManager.IdentityMap">
            <summary>
            键值映射
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.IdentityMapItem">
            <summary>
            键值映射条件
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.IdentityMapItem.OldTable">
            <summary>
            旧表名
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.IdentityMapItem.OldField">
            <summary>
            旧字段名
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.IdentityMapItem.NewTable">
            <summary>
            覆盖为新表
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.IdentityMap">
            <summary>
            自动递增 ID 的映射
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.IdentityMap.m_LockTag">
            <summary>
            锁标志
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.IdentityMap.Override(System.String,System.String,System.String)">
            <summary>
            重写
            </summary>
            <param name="oldTable">原表名</param>
            <param name="newTable">新表名</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.IdentityMap.IsMap(System.String)">
            <summary>
            是否存在映射
            </summary>
            <param name="oldTable"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.IdentityMap.Get(System.String)">
            <summary>
            获取映射条目
            </summary>
            <param name="oldTable"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.IdentityMap.Map(System.String)">
            <summary>
            获取映射的自动ID
            </summary>
            <param name="oldTable"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.LightModels.IdentityFactory">
            <summary>
            实体自动递增的 ID 工厂
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.IdentityFactory.CreateModelIdentity">
            <summary>
            创建 MODEL_IDENTITY 表
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.IdentityFactory.m_BufferSize">
            <summary>
            预先缓冲的序号数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.IdentityFactory.BufferSize">
            <summary>
            预先缓冲的序号数量
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.IdentityFactory.GetNewIdentity(System.String)">
            <summary>
            获取新主键
            </summary>
            <param name="tableName">表名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.IdentityFactory.GetNewBatchIdentity(System.String,System.String,System.Int32)">
            <summary>
            获取批id
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.IdentityFactory.GetNewIdentity(System.String,System.String)">
            <summary>
            获取新主键
            </summary>
            <param name="tableName">表名称</param>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.IdentityFactory.Delete(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.IdentityFactory.Insert(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="field"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.IdentityFactory.ConnectionString">
            <summary>
            数据连接字符串
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.IdentityFactory.Init">
            <summary>
            初始化工厂
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.JoinItem">
            <summary>
            关联条目
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.JoinItem.m_JoinModelT">
            <summary>
            关联实体的类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.JoinItem.m_On">
            <summary>
            两个表之间的连接语句（on 表1.字段1 = 表2.字段2）
            </summary>
            <remarks>Select 表1.*,表2.* From 表1,表2 on 表1.字段1 = 表2.字段2</remarks>
        </member>
        <member name="F:HWQ.Entity.LightModels.JoinItem.m_JoinType">
            <summary>
            关联类型（Full=全关联，Left=左关联，Rigth=右关联）
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.JoinItem.#ctor(System.Type)">
            <summary>
            关联条目
            </summary>
            <param name="modelT"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.JoinItem.#ctor(System.Type,System.String)">
            <summary>
            关联条目
            </summary>
            <param name="modelT">关联实体的类型</param>
            <param name="on">两个表之间的连接语句（on 表1.字段1 = 表2.字段2）</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.JoinItem.#ctor(HWQ.Entity.LightModels.JoinTypes,System.Type,System.String)">
            <summary>
            关联条目
            </summary>
            <param name="joinType">关联类型（Full=全关联，Left=左关联，Rigth=右关联）</param>
            <param name="modelT">关联实体的类型</param>
            <param name="on">两个表之间的连接语句（on 表1.字段1 = 表2.字段2）</param>
        </member>
        <member name="P:HWQ.Entity.LightModels.JoinItem.JoinModelName">
            <summary>
            关联表名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.JoinItem.JoinModelT">
            <summary>
            关联实体的类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.JoinItem.On">
            <summary>
            两个表之间的连接语句（on 表1.字段1 = 表2.字段2）
            </summary>
            <remarks>Select 表1.*,表2.* From 表1,表2 on 表1.字段1 = 表2.字段2</remarks>
        </member>
        <member name="P:HWQ.Entity.LightModels.JoinItem.JoinType">
            <summary>
            关联类型（Full=全关联，Left=左关联，Rigth=右关联）
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.JoinTypes">
            <summary>
            表连接类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.JoinTypes.Full">
            <summary>
            全关联
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.JoinTypes.Left">
            <summary>
            左关联
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.JoinTypes.Right">
            <summary>
            右关联
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.DBTableMode">
            <summary>
            实体表的类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DBTableMode.Database">
            <summary>
            存数据库的表
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DBTableMode.Virtual">
            <summary>
            虚拟的，不存数据库,临时创建的
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMRelationalAttribute">
            <summary>
            关联属性
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LMRelationalAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="relaModelT"></param>
            <param name="thisField"></param>
            <param name="relaFiled"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LMRelationalAttribute.#ctor(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="relaModelT"></param>
            <param name="relaField"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LMRelationalAttribute.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="relaName"></param>
            <param name="relaModelT"></param>
            <param name="thisField"></param>
            <param name="relaFiled"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LMRelationalAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="relaName"></param>
            <param name="relaModelT"></param>
            <param name="relaField"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LMRelationalAttribute.RelaName">
            <summary>
            关联线的名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LMRelationalAttribute.Field">
            <summary>
            本表的字段名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LMRelationalAttribute.RelaModelT">
            <summary>
            关联的父表实体
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LMRelationalAttribute.RelaModeName">
            <summary>
            关联的模型名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LMRelationalAttribute.RelaField">
            <summary>
            关联的父表字段
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMRelationalCollection">
            <summary>
            关联的集合
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelException">
            <summary>
            
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelFieldPropertyDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelFieldPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            对实体进行赋值
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="T:HWQ.Entity.LightModels.LModelList">
            <summary>
            
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelList.m_IsBindingView">
            <summary>
            允许视图绑定
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LModelList.m_IsVirtual">
            <summary>
            虚拟模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelList.PagesInfo">
            <summary>
             页信息
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelList.IsVirtual">
            <summary>
            是否为虚拟模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LModelList.IsBindingView">
            <summary>
            是否自动绑定视图
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.#ctor(System.String)">
            <summary>
            轻量级数据集合的构造方法
            </summary>
            <param name="modelName"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.#ctor(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            轻量级数据集合的构造方法
            </summary>
            <param name="modelElem"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.#ctor">
            <summary>
            轻量级数据集合的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.#ctor(System.Int32)">
            <summary>
            轻量级数据集合的构造方法
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.#ctor(System.Collections.IList)">
            <summary>
            轻量级数据集合的构造方法
            </summary>
            <param name="models"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.FindByPk(System.Object,System.Boolean)">
            <summary>
            按关键字查找
            </summary>
            <param name="pkValue">关键值</param>
            <param name="quickMode">快速模式</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.FindByPk(System.Object)">
            <summary>
            按关键字查找
            </summary>
            <param name="pkValue">关键值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.ToArrayByColumn``1(System.String)">
            <summary>
            输出列数据
            </summary>
            <typeparam name="FieldT"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.ToArrayByColumn``1">
            <summary>
            输出列数据
            </summary>
            <typeparam name="FieldT"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.AddRange(System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="items"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.Clear">
            <summary>
            移除所有元素
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.SetTakeChange(System.Boolean,System.Boolean)">
            <summary>
            设置是否捕获字段值发生编号
            </summary>
            <param name="take"></param>
            <param name="restart"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.GetColumnData``1(System.String)">
            <summary>
            获取栏的数据
            </summary>
            <typeparam name="ColumnT">栏的数据类型</typeparam>
            <param name="fieldName">字段名称</param>
            <returns>栏的集合</returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LModelList.Dispose">
            <summary>
            释放内存
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LView">
            <summary>
            轻量级视图实体, 一般情况下用于 WinForm UI 界面...
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LView.m_VirtualState">
            <summary>
            虚拟状态
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LView.m_IsVirtual">
            <summary>
            获取或设置为虚拟状态
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LView.IsVirtual">
            <summary>
            获取或设置为虚拟状态
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LView.m_ReadOnly">
            <summary>
            只读
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LView.ReadOnly">
            <summary>
            只读
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LView.Model">
            <summary>
            模型
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LView.Item(System.String)">
            <summary>
            视图实体
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.LView.SetError(System.String)">
            <summary>
            设置行的错误
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LView.ClearError">
            <summary>
            清除错误
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LView.SetErrorColumn(System.String,System.String)">
            <summary>
            设置单元格错误
            </summary>
            <param name="columnName"></param>
            <param name="error"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LView.ViewState">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LView.VirtualState">
            <summary>
            虚拟状态
            </summary>
        </member>
        <member name="E:HWQ.Entity.LightModels.LView.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LViewList">
            <summary>
            实体 UI 列表
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LViewList.m_ModelElem">
            <summary>
            实体元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LViewList.m_ModelT">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.LViewList.m_DelayedViews">
            <summary>
            延迟需要处理的数据
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LViewList.#ctor">
            <summary>
            实体 UI 列表的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LViewList.#ctor(System.Type)">
            <summary>
            实体 UI 列表的构造方法
            </summary>
            <param name="modelT">实体对象的类型</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LViewList.#ctor(HWQ.Entity.LightModels.LModelElement,System.Type)">
            <summary>
            实体 UI 列表的构造方法
            </summary>
            <param name="modelElem">实体元素</param>
            <param name="modelT">实体对象的类型</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LViewList.#ctor(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            实体 UI 列表的构造方法
            </summary>
            <param name="modelElem">实体元素</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LViewList.#ctor(HWQ.Entity.LightModels.LModelElement,System.Type,System.Collections.Generic.IList{HWQ.Entity.LightModels.LView},System.Boolean)">
            <summary>
            实体 UI 列表的构造方法
            </summary>
            <param name="modelElem">实体元素</param>
            <param name="modelT">实体对象的类型</param>
            <param name="viewList">实体类别，父类</param>
            <param name="isVirtual"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LViewList.#ctor(HWQ.Entity.LightModels.LModelElement,System.Type,System.Collections.Generic.IList{HWQ.Entity.LightModels.LView})">
            <summary>
            实体 UI 列表的构造方法
            </summary>
            <param name="modelElem">实体元素</param>
            <param name="modelT">实体对象的类型</param>
            <param name="viewList">实体类别，父类</param>
        </member>
        <member name="F:HWQ.Entity.LightModels.LViewList.m_IsVirtual">
            <summary>
            虚假删除
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LViewList.IsVirtual">
            <summary>
            虚假删除
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LViewList.UnRemove(HWQ.Entity.LightModels.LView)">
            <summary>
            撤销删除
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LViewList.RemoveItem(System.Int32)">
            <summary>
            删除纪录
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LViewList.DelayedViews">
            <summary>
            获取延迟需要处理的数据
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LViewList.DelayedReset">
            <summary>
            重置延迟数据
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LViewList.GetDelayedByState(HWQ.Entity.LightModels.LViewState)">
            <summary>
            按条件获取延迟需要处理的数据
            </summary>
            <param name="state">数据纪录的状态</param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.LightModels.ModelSet">
            <summary>
            模型集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.ModelSet.GetModels(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.ModelSet.GetDataTable(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.LightModels.ModelSet.GetModels``1(System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="ModelT"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.LightModels.VFieldFactory">
            <summary>
            视图字段工厂
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.VFieldFactory.GetFactory(System.Guid)">
            <summary>
            获取视图的操作工厂
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="F:HWQ.Entity.LightModels.VFieldFactory.m_FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.VFieldFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.VFieldFactory.Decipher">
            <summary>
            数据库操作对象
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.VFieldFactory.SrcModel">
            <summary>
            原模型
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.VFieldFactory.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.VFieldFactory.GetValue">
            <summary>
            获取视图字段值
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.LightModels.DynVFieldCollection">
            <summary>
            动态字段的值集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.DynVFieldCollection.#ctor">
            <summary>
            动态字段的值集合的构造方法
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.FilterVField">
            <summary>
            筛选的字段
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.FilterVField.#ctor">
            <summary>
            视图字段构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.FilterVField.#ctor(System.String)">
            <summary>
            视图字段构造方法
            </summary>
            <param name="propName">字段(属性)名称</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.FilterVField.#ctor(System.String,System.String)">
            <summary>
            视图字段构造方法
            </summary>
            <param name="propName">字段(属性)名称</param>
            <param name="byname">别名</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.FilterVField.#ctor(System.String,System.String,System.String)">
            <summary>
            视图字段构造方法
            </summary>
            <param name="propName">字段(属性)名称</param>
            <param name="byname">别名</param>
            <param name="groupName">组名</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.FilterVField.#ctor(System.String,System.String[])">
            <summary>
            视图字段构造方法
            </summary>
            <param name="propName"></param>
            <param name="filterRole"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.FilterVField.#ctor(System.String,System.String,System.String[])">
            <summary>
            视图字段构造方法
            </summary>
            <param name="propName"></param>
            <param name="byname"></param>
            <param name="filterRole"></param>
        </member>
        <member name="M:HWQ.Entity.LightModels.FilterVField.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            视图字段构造方法
            </summary>
            <param name="propName"></param>
            <param name="byname"></param>
            <param name="groupName"></param>
            <param name="filterRole"></param>
        </member>
        <member name="P:HWQ.Entity.LightModels.FilterVField.PropName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.FilterVField.Byname">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.FilterVField.GroupName">
            <summary>
            组名
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.FilterVField.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.FilterVField.SortType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.FilterVField.SortIndex">
            <summary>
            排序次序
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.FilterVField.Sort">
            <summary>
            是否排序
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.FilterVFieldCollection">
            <summary>
            视图字段集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.FilterVFieldCollection.#ctor">
            <summary>
            视图字段集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.FilterVFieldCollection.Add(System.String)">
            <summary>
            视图字段集合
            </summary>
            <param name="propName">字段(属性)名称</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.FilterVFieldCollection.Add(System.String,System.String)">
            <summary>
            视图字段集合
            </summary>
            <param name="propName">字段(属性)名称</param>
            <param name="byname">别名</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.FilterVFieldCollection.Add(System.String,System.String,System.String)">
            <summary>
            视图字段集合
            </summary>
            <param name="propName">字段(属性)名称</param>
            <param name="byname">别名</param>
            <param name="groupName">分组名称</param>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMNamespaceAttribute">
            <summary>
            数据库的命名空间
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LMNamespaceAttribute.#ctor(System.String)">
            <summary>
            数据库的命名空间
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:HWQ.Entity.LightModels.DynVFieldAttribute">
            <summary>
            动态的视图字段
            </summary>
            <remarks>
            T-SQL 的 Where 语句支持参数.
            </remarks>
            <example>
            string tSqlWhere = "[C_PRODUCT_ID] = @C_PRODUCT_ID AND [LOGIN_USER_ID] = @@UserID
            
            '说明 
            '@C_PRODUCT_ID 是本实体的属性名称；
            '@@UserID 是本实体以外的变量参数名称（一般情况下不建议使用，不符合轻量级设计规范）；
            </example>
        </member>
        <member name="F:HWQ.Entity.LightModels.DynVFieldAttribute.m_TSqlWhere">
            <summary>
            
            </summary>
        </member>
        <member name="F:HWQ.Entity.LightModels.DynVFieldAttribute.m_DataFactory">
            <summary>
            数据工厂
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.DynVFieldAttribute.#ctor(System.String,System.Type,System.Int32)">
            <summary>
            动态视图字段的构造方法
            </summary>
            <param name="tSqlWhere">Sql 的 Where 语句,支持参数.
                <remarks>“@” 一个为本实体的属性名称，“@@”为外部参数名称。</remarks>
            </param>
            <param name="dynModelT">动态类型表</param>
            <param name="level">创建的优先层次</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DynVFieldAttribute.#ctor(System.String,System.Type)">
            <summary>
            动态视图字段的构造方法
            </summary>
            <param name="tSqlWhere">Sql 的 Where 语句,支持参数.
                <remarks>“@” 一个为本实体的属性名称，“@@”为外部参数名称。</remarks>
            </param>
            <param name="dynModelT">动态类型表</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DynVFieldAttribute.#ctor(System.Type)">
            <summary>
            动态视图字段的构造方法
            </summary>
            <param name="dynModelT">动态类型表</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.DynVFieldAttribute.#ctor(System.Type,System.Type)">
            <summary>
            动态视图字段的构造方法
            </summary>
            <param name="dynModelT">实体类型</param>
            <param name="dataFactory">数据构造工厂</param>
        </member>
        <member name="P:HWQ.Entity.LightModels.DynVFieldAttribute.TSqlWhere">
            <summary>
            T-SQL 的 Where 语句，支持参数
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:HWQ.Entity.LightModels.DynVFieldAttribute.DynModelT">
            <summary>
            动态类型表
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.DynVFieldAttribute.Level">
            <summary>
            创建的优先层次
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.DynVFieldAttribute.DataFactory">
            <summary>
            数据工厂
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMGroupAttribute">
            <summary>
            分组
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LMGroupAttribute.#ctor(System.String[])">
            <summary>
            分组
            </summary>
            <param name="groupName">组名</param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LMGroupAttribute.GroupNames">
            <summary>
            组名
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMOnlyReadAttribute">
            <summary>
            只读状态，在插入记录后，就不能修改。
            </summary>
        </member>
        <member name="T:HWQ.Entity.LightModels.LMVersionAttribute">
            <summary>
            实体的版本信息
            </summary>
        </member>
        <member name="M:HWQ.Entity.LightModels.LMVersionAttribute.#ctor(System.Int32)">
            <summary>
            实体的版本号
            </summary>
            <param name="value">版本号的值</param>
        </member>
        <member name="M:HWQ.Entity.LightModels.LMVersionAttribute.#ctor(System.Int32,System.String)">
            <summary>
            实体的版本号
            </summary>
            <param name="value">版本号的值</param>
            <param name="author">作者</param>
        </member>
        <member name="P:HWQ.Entity.LightModels.LMVersionAttribute.Value">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:HWQ.Entity.LightModels.LMVersionAttribute.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="T:HWQ.Entity.ModelElemHelper">
            <summary>
            实体元素助手类
            </summary>
        </member>
        <member name="M:HWQ.Entity.ModelElemHelper.GetElem(System.Object)">
            <summary>
            获取实体元素
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.ModelTools">
            <summary>
            (不建议采用，采用 ModelHelper 代替)工具
            </summary>
        </member>
        <member name="M:HWQ.Entity.ModelTools.ToTableName(System.String)">
            <summary>
            模型名称转换为表名称
            </summary>
            <param name="modelName">模型名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelTools.ToViewName(System.String)">
            <summary>
            模型名称转换为表名称
            </summary>
            <param name="modelName">模型名称</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelTools.JsonData(HWQ.Entity.EntityModel.IModel)">
            <summary>
            转换为 JOSN 数据
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelTools.jsonModel(HWQ.Entity.EntityModel.IModel,System.Text.StringBuilder,System.String[])">
            <summary>
            未实现
            </summary>
            <param name="model"></param>
            <param name="writer"></param>
            <param name="filterFields"></param>
        </member>
        <member name="M:HWQ.Entity.ModelTools.JsonData(HWQ.Entity.EntityModel.ModelArray)">
            <summary>
            转换为 JOSN 数据
            </summary>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelTools.ModelsToPage(HWQ.Entity.EntityModel.ModelArray,System.Int32,System.Int32)">
            <summary>
            分页
            </summary>
            <param name="origin"></param>
            <param name="start"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelTools.IsNumberType(HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            判断是否数字类型
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelTools.IsNumberType(HWQ.Entity.EntityModel.FieldDbType)">
            <summary>
            判断数据类型是否为数字
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelTools.IsNumberType(HWQ.Entity.EntityModel.ModelField)">
            <summary>
            判断字段是否为数字类型
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelTools.IsNumberType(HWQ.Entity.EntityModel.ModelFieldElement)">
            <summary>
            判断字段是否为数字类型
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelTools.IsNumberType(System.Type)">
            <summary>
            判断类型是否为数字类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelTools.ConvertDBType(HWQ.Entity.EntityModel.FieldDbType)">
            <summary>
            转换数据类型
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.SimpleDicts.SimpleDict">
            <summary>
            字典实体
            </summary>
        </member>
        <member name="M:HWQ.Entity.SimpleDicts.SimpleDict.GetSample">
            <summary>
            获取对象例子
            </summary>
            <returns></returns>
        </member>
        <member name="F:HWQ.Entity.SimpleDicts.SimpleDict.m_Items">
            <summary>
            实体定义
            </summary>
        </member>
        <member name="T:HWQ.Entity.SimpleDicts.MODEL_SAMPLE_DICT">
            <summary>
            简单实体
            </summary>
        </member>
        <member name="P:HWQ.Entity.SimpleDicts.MODEL_SAMPLE_DICT.MODEL_SAMPLE_DICT_ID">
            <summary>
            实体名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.SimpleDicts.MODEL_SAMPLE_DICT.DESCRIPTION">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.SimpleDicts.MODEL_SAMPLE_DICT.FIELDS">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:HWQ.Entity.SimpleDicts.MODEL_SAMPLE_DICT.DATE_CREATE">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:HWQ.Entity.SimpleDicts.MODEL_SAMPLE_DICT.DATE_UPDATE">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:HWQ.Entity.SimpleDicts.MODEL_SAMPLE_DICT.HASH_CODE">
            <summary>
            
            </summary>
        </member>
        <member name="P:HWQ.Entity.SimpleDicts.MODEL_SAMPLE_DICT.IS_LOAD">
            <summary>
            是否预备加载
            </summary>
        </member>
        <member name="T:HWQ.Entity.SimpleDicts.SimpleDictFactory">
            <summary>
            简单字典工厂
            </summary>
        </member>
        <member name="M:HWQ.Entity.SimpleDicts.SimpleDictFactory.#ctor">
            <summary>
            简单字典工厂
            </summary>
        </member>
        <member name="M:HWQ.Entity.SimpleDicts.SimpleDictFactory.#ctor(System.String)">
            <summary>
            简单字典工厂
            </summary>
            <param name="connectionString">数据库连接字符串</param>
        </member>
        <member name="F:HWQ.Entity.SimpleDicts.SimpleDictFactory.m_ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:HWQ.Entity.SimpleDicts.SimpleDictFactory.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="M:HWQ.Entity.SimpleDicts.SimpleDictFactory.IsDict(System.String)">
            <summary>
            判断是否为字典
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Util.XmlModelDataLoader.LoadData(System.String)">
            <summary>
            加载数据
            </summary>
            <param name="dataUrl"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Util.HLocale">
            <summary>
            本地化
            </summary>
        </member>
        <member name="T:HWQ.Entity.Xml.CDATA">
            <summary>
            
            </summary>
        </member>
        <member name="M:HWQ.Entity.Xml.CDATA.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:HWQ.Entity.Xml.CDATA.#ctor(System.String)">
            <summary>
            带参数构造函数
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:HWQ.Entity.Xml.CDATA.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:HWQ.Entity.Xml.CDATA.ToString">
            <summary>
            重写 获取CData节点的 内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Xml.CDATA.op_Implicit(HWQ.Entity.Xml.CDATA)~System.String">
            <summary>
            将 CDATA 对象隐式转换成 内容 字符串。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Xml.CDATA.op_Implicit(System.String)~HWQ.Entity.Xml.CDATA">
            <summary>
            将 内容 对象隐式转换成 CDATA 字符串。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Xml.XmlFieldElem">
            <summary>
            Xml 字段元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.Xml.XmlFieldElem.m_GroupName">
            <summary>
            类别(未启用)
            </summary>
        </member>
        <member name="F:HWQ.Entity.Xml.XmlFieldElem.m_RegExp">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:HWQ.Entity.Xml.XmlFieldElem.m_Example">
            <summary>
            例子
            </summary>
        </member>
        <member name="F:HWQ.Entity.Xml.XmlFieldElem.m_Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="F:HWQ.Entity.Xml.XmlFieldElem.m_ControlType">
            <summary>
            控件类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.Xml.XmlFieldElem.m_IsRemark">
            <summary>
            是否为大字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.Xml.XmlFieldElem.m_Mapping">
            <summary>
            映射
            </summary>
        </member>
        <member name="F:HWQ.Entity.Xml.XmlFieldElem.m_Encoding">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlFieldElem.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlFieldElem.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="dbField">字段名称</param>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlFieldElem.#ctor(System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="caption">标题</param>
            <param name="dbField">字段名称</param>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlFieldElem.#ctor(System.String,System.String,HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            构造方法
            </summary>
            <param name="caption">标题</param>
            <param name="dbField">字段名称</param>
            <param name="dbType">控件类型</param>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlFieldElem.#ctor(System.String,HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            构造方法
            </summary>
            <param name="dbField">字段名称</param>
            <param name="dbType">数据类型</param>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.Mapping">
            <summary>
            映射字段
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.Type">
            <summary>
            字段数据类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.IsRemark">
            <summary>
            是否大数据库字段，Text /Remark 
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.Encoding">
            <summary>
            字段编码 ASCII/UTF8
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.Visible">
            <summary>
            是否可视
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.Alignment">
            <summary>
            对齐方式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.GroupName">
            <summary>
            组名
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.DBField">
            <summary>
            数据字段名
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.PropName">
            <summary>
            类的属性名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.DBType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.IsKey">
            <summary>
            是否为主键
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.ReadOnly">
            <summary>
            只读
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.Mandatory">
            <summary>
            强制
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.DecimalDigits">
            <summary>
            小数点位数
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.ControlType">
            <summary>
            显示的控件类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.DefaultWidth">
            <summary>
            默认宽度
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.MaxLen">
            <summary>
            字符串最大长度
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.MinLen">
            <summary>
            字符串最小长度
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.RegExp">
            <summary>
            [验证] 正则表达式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.Example">
            <summary>
            例子
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.Category">
            <summary>
            类别
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElem.Settings">
            <summary>
            [不建议使用]
            </summary>
        </member>
        <member name="T:HWQ.Entity.Xml.XmlFieldElemCollection">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlFieldElemCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldElemCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="dbField"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlFieldElemCollection.InitIndex">
            <summary>
            初始化索引
            </summary>
        </member>
        <member name="T:HWQ.Entity.Xml.XmlFieldVAttr">
            <summary>
            视图字段的属性
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldVAttr.Params">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldVAttr.Mode">
            <summary>
            模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldVAttr.Tag">
            <summary>
            存放用户自定义数据
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlFieldVAttr.TSql">
            <summary>
            T-SQL 语句
            </summary>
        </member>
        <member name="T:HWQ.Entity.Xml.XmlModelElem">
            <summary>
            Xml 模型元素
            </summary>
        </member>
        <member name="F:HWQ.Entity.Xml.XmlModelElem.m_Schema">
            <summary>
            架构
            </summary>
        </member>
        <member name="F:HWQ.Entity.Xml.XmlModelElem.m_ExFields">
            <summary>
            特殊操作的字段
            </summary>
        </member>
        <member name="F:HWQ.Entity.Xml.XmlModelElem.m_CategoryList">
            <summary>
            类别集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.Xml.XmlModelElem.m_DbIdentityTable">
            <summary>
            处理多表同个递增ID的问题
            </summary>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlModelElem.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlModelElem.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlModelElem.#ctor(System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="tableName"></param>
            <param name="name"></param>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElem.Schema">
            <summary>
            架构名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElem.PkClustered">
            <summary>
            主键默认聚合方式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElem.GroupName">
            <summary>
            实体组，作为区分不同数据库用的
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElem.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElem.Mode">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElem.Name">
            <summary>
            元素名称
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElem.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElem.DbIdentityTable">
            <summary>
            针对多表同个递增ID 的问题
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElem.Namespace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElem.LMEnum">
            <summary>
            
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElem.CategoryList">
            <summary>
            目录集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElem.Fields">
            <summary>
            UI 字段元素
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElem.ExFields">
            <summary>
            特殊操作的字段
            </summary>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlModelElem.TryGetField(System.String,HWQ.Entity.Xml.XmlFieldElem@)">
            <summary>
            测试获取字段元素
            </summary>
            <param name="field">字段名</param>
            <param name="fieldElem">字段元素</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlModelElem.HasField(System.String)">
            <summary>
            包含此字段
            </summary>
            <param name="field">字段名</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlModelElem.Clone">
            <summary>
            克隆对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Xml.XmlModelElemCollection">
            <summary>
            元素集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Xml.XmlModelElemCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlModelElemCollection.Add(HWQ.Entity.Xml.XmlModelElem)">
            <summary>
            添加实体元素
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:HWQ.Entity.Xml.XmlModelFile">
            <summary>
            文件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlModelFile.Open(System.String)">
            <summary>
            打开配置文件
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlModelFile.Save(System.String,HWQ.Entity.Xml.XmlModelFile)">
            <summary>
            保存实体定义文件
            </summary>
            <param name="filename"></param>
            <param name="file"></param>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlModelFile.Save(System.String)">
            <summary>
            保存实体定义文件
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlModelFile.Add(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            添加实体元素
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:HWQ.Entity.Xml.XmlModelFile.AddRange(HWQ.Entity.LightModels.LModelElement[])">
            <summary>
            批量添加实体元素
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:HWQ.Entity.ModelConvert">
            <summary>
            实体转换类
            </summary>
            <summary>
            实体转换类
            </summary>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.TryChangeType_Mandatory(System.Object,HWQ.Entity.LightModels.LMFieldDBTypes,System.Object@)">
            <summary>
            测试转换，不能为空的转换
            </summary>
            <param name="value"></param>
            <param name="dbType"></param>
            <param name="outValue">输出后的值</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.TryChangeType_NotMandatory(System.Object,HWQ.Entity.LightModels.LMFieldDBTypes,System.Object@)">
            <summary>
            测试转换，允许为空。
            </summary>
            <param name="value"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.TryChangeType(System.Object,HWQ.Entity.LightModels.LMFieldDBTypes,System.Boolean,System.Object@)">
            <summary>
            测试是否能转换
            </summary>
            <param name="value"></param>
            <param name="dbType"></param>
            <param name="mandatory"></param>
            <param name="outValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.TryChangeType(System.Object,HWQ.Entity.LightModels.LMFieldDBTypes,System.Boolean)">
            <summary>
            测试是否能转换
            </summary>
            <param name="value"></param>
            <param name="dbType"></param>
            <param name="mandatory"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToSModelElem(HWQ.Entity.Xml.XmlModelElem)">
            <summary>
            转换为简单实体元素
            </summary>
            <param name="xModelElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToDbType(System.String)">
            <summary>
            数据类型转换
            </summary>
            <param name="dbTypeStr"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToDbType(System.Type)">
            <summary>
            数据类型转换
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ChangeType_Mandatory(System.Object,HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            允许为空的转换
            </summary>
            <param name="value"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ChangeType_NotMandatory(System.Object,HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            不强制类型
            </summary>
            <param name="value"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ChangeType(System.Object,HWQ.Entity.LightModels.LMFieldDBTypes,System.Boolean)">
            <summary>
            转换数据类型
            </summary>
            <param name="value">数据值</param>
            <param name="dbType">数据类型</param>
            <param name="mandatory">强制。（例：值不能为空）</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ChangeType(System.Object,HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            根据实体字段,转换数据类型
            </summary>
            <param name="value"></param>
            <param name="fieldElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.TryChangeType(System.Object,HWQ.Entity.LightModels.LModelFieldElement,System.Object@)">
            <summary>
            测试是否能转换
            </summary>
            <param name="value"></param>
            <param name="fieldElem">字段元素</param>
            <param name="outValue"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.TryChangeType(System.Object,HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            测试是否能转换
            </summary>
            <param name="value"></param>
            <param name="fieldElem">字段元素</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ChangeType(System.Object,HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            改变类型
            </summary>
            <param name="value"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToOleDbType(HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            转换为 OleDB 数据库的数据类型 
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToOdbcType(HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            转换为 OleDB 数据库的数据类型 
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToSqlDbType(HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            转换为 SQL Server 2000 数据库的数据类型 
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToSqlDbType(System.Type)">
            <summary>
            转换为 SQL Server 2000 数据库的数据类型 
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToDbTypeBase(System.Type)">
            <summary>
            转换为 SQL Server 2000 数据库的数据类型 
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToXmlModelElem(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            HWQ.Entity.LightModels.LModelElement 转换为 HWQ.Entity.Xml.XmlModelElem
            </summary>
            <param name="modelElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToModelElem(HWQ.Entity.Xml.XmlModelElem)">
            <summary>
            XmlModelElem 转换为 LModelElement
            </summary>
            <param name="xModel"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToJson(HWQ.Entity.LightModels.LightModel)">
            <summary>
            实体转换为 Json 对象
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToJson(HWQ.Entity.LightModels.LightModel,System.String[],System.Text.StringBuilder)">
            <summary>
            实体转换为 Json 对象
            </summary>
            <param name="item"></param>
            <param name="fields"></param>
            <param name="sb"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToJson(HWQ.Entity.LightModels.LightModel,System.String[])">
            <summary>
            实体转换为 Json 对象
            </summary>
            <param name="item"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.LogicToString(HWQ.Entity.Filter.Logic)">
            <summary>
            逻辑运算符转换为字符串
            </summary>
            <param name="logic"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.ToLogic(System.String)">
            <summary>
            转换逻辑运算符号
            </summary>
            <param name="logicStr"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelConvert.DeserializeObject``1(HWQ.Entity.LightModels.SModel)">
            <summary>
            序列化为对象
            </summary>
            <typeparam name="ObjectT"></typeparam>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.ModelHelper">
            <summary>
            模型的助手
            </summary>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToArray``1(System.Collections.IEnumerable,System.String)">
            <summary>
            输出一个集合的一栏数据
            </summary>
            <typeparam name="FieldT"></typeparam>
            <param name="models"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToArray``1(System.Data.DataTable,System.String)">
            <summary>
            输出一个集合的一栏数据
            </summary>
            <typeparam name="FieldT"></typeparam>
            <param name="table"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToArray``1(System.Data.DataTable)">
            <summary>
            输出一个集合的一栏数据
            </summary>
            <typeparam name="FieldT"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToGroup``2(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            
            </summary>
            <typeparam name="ModelT"></typeparam>
            <typeparam name="FieldT"></typeparam>
            <param name="models"></param>
            <param name="groupFName"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToDictionary``2(System.Collections.Generic.IList{``1},System.String)">
            <summary>
            从集合转换为数据字段
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="models"></param>
            <param name="keyField"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.FromDataTable``1(System.Data.DataTable)">
            <summary>
            DataTable 转换为实体集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="table">表</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToDataTable(System.Data.Common.DbDataReader,System.String[])">
            <summary>
            把数据流转为 DataTable 
            </summary>
            <param name="reader"></param>
            <param name="modelNames"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToDataTable(HWQ.Entity.LightModels.LModelElement,System.Collections.IList)">
            <summary>
            实体集合转换为 DataTable
            </summary>
            <param name="modelElem"></param>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToDataTable(System.Type,System.Collections.IList)">
            <summary>
            实体集合转换为 DataTable
            </summary>
            <param name="modelT"></param>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.CreateDataTable(System.Type)">
            <summary>
            创建数据表
            </summary>
            <param name="modelT"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.CreateDataTable(HWQ.Entity.LightModels.LModelElement)">
            <summary>
            创建数据表
            </summary>
            <param name="modelElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.CreateDataTable(System.Type,System.String[])">
            <summary>
            创建数据表
            </summary>
            <param name="modelT"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToDataTable``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            实体集合转换为 DataTable
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="models">实体集合</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToDataTable(HWQ.Entity.LightModels.SModelList)">
            <summary>
            实体集合转换为 DataTable
            </summary>
            <param name="models">实体集合</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToDataTable(HWQ.Entity.LightModels.SModelList,System.Boolean)">
            <summary>
            实体集合转换为 DataTable
            </summary>
            <param name="models">实体集合</param>
            <param name="designMode">是否为设计模式</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.Copy(System.Object,System.Object)">
            <summary>
            实体 A 拷贝到实体 B中。
            </summary>
            <param name="modelA"></param>
            <param name="modelB"></param>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.Clone(System.Object)">
            <summary>
            错误
            </summary>
            <param name="srcObj"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.GetSModel(System.Data.Common.DbDataReader)">
            <summary>
            获取 SModel, 不自动关闭 DbDataReader 对象.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.GetSModel(System.Data.Common.DbDataReader,HWQ.Entity.LightModels.SModelElement)">
            <summary>
            获取 SModel, 不自动关闭 DbDataReader 对象.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.GetSModelElement(System.Data.Common.DbDataReader)">
            <summary>
            根据 DbDataReader 获取实体元素
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.GetSModelList(System.Data.Common.DbDataReader)">
            <summary>
            通过数据流，获取简单实体集合
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.GetSModelList(HWQ.Entity.LightModels.LModelReader)">
            <summary>
            获取 NodeModel 集合
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.GetModels``1(HWQ.Entity.LightModels.LModelReader)">
            <summary>
            从  LModelReader 转换为 LModelList
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.GetModels``1(HWQ.Entity.LightModels.LModelReader,System.Int32,System.Int32)">
            <summary>
            获取实体列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="reader">数据流</param>
            <param name="startIndex">开始索引</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.SaveXmlFile(System.String,System.Object)">
            <summary>
            序列化后保存
            </summary>
            <param name="filename"></param>
            <param name="obj"></param>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.OpenXmlFile``1(System.String)">
            <summary>
            打开 XML 的序列化文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.OpenXmlFile(System.String,HWQ.Entity.LightModels.LModelElement)">
            <summary>
            打开 XML 文件
            </summary>
            <param name="filename">文件的物理路径</param>
            <param name="modelElem">实体元素</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.DeserializeXml``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="xml">XML 文本内容</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.SerializeXml(System.Object)">
            <summary>
            序列化,把对象转化为 XML 字符串
            </summary>
            <param name="obj">准备序列化的对象</param>
            <returns>XML 字符串</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.SerializeObject(System.Object)">
            <summary>
            把对象序列化并返回相应的字节
            </summary>
            <param name="pObj">需要序列化的对象</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.DeserializeObject(System.Byte[])">
            <summary>
            把字节反序列化成相应的对象
            </summary>
            <param name="pBytes">字节流</param>
            <returns>object</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ConvertDBType(HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            作废
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.IsNumberType(HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            判断是否数字类型
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.IsLikeType(HWQ.Entity.Filter.Logic)">
            <summary>
            是否为 Like 类型, Not Like, left like, right like 这4种类型
            </summary>
            <param name="logic"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.IsNumberType(System.Type)">
            <summary>
            判断是否为数值类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.IsDataTimeType(HWQ.Entity.LightModels.LMFieldDBTypes)">
            <summary>
            判断是否为日期格式的类型
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToSortedList(HWQ.Entity.LightModels.LModelReader)">
            <summary>
            数据流转换为字典档列表
            </summary>
            <param name="reader">数据流</param>
            <returns>字典档对象</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToSortedList(HWQ.Entity.LightModels.LModelReader,System.Collections.Generic.SortedList{System.String,System.Object})">
            <summary>
            数据流转换为字典档列表
            </summary>
            <param name="reader">数据流</param>
            <param name="dict"></param>
            <returns>字典档对象</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToJson(System.Data.DataTable)">
            <summary>
            转化为 JSON 数据格式.输出 ["Field1": "V1", "Field2": "V2", ...]
            </summary>
            <param name="table">数据表 DataTable</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToJson(System.Data.DataRow)">
            <summary>
            转化为 JSON 数据格式.输出 ["Field1": "V1", "Field2": "V2", ...]
            </summary>
            <param name="row">DataTable 的记录行</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToJson(System.Data.DataRow,System.Text.StringBuilder)">
            <summary>
            转化为 JSON 数据格式.输出 ["Field1": "V1", "Field2": "V2", ...]
            </summary>
            <param name="row">DataTable 的记录行</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToJson(System.Object)">
            <summary>
            实体对象转化为 JSON 数据格式
            </summary>
            <param name="model">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToJsonForField(System.Text.StringBuilder,HWQ.Entity.LightModels.LightModel,HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            
            </summary>
            <param name="sb"></param>
            <param name="model"></param>
            <param name="fieldElem"></param>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToJson(HWQ.Entity.LightModels.LModel,System.Text.StringBuilder)">
            <summary>
            转化为 JSON 数据格式
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToJson(HWQ.Entity.LightModels.LightModel,System.Text.StringBuilder)">
            <summary>
            转化为 JSON 数据格式
            </summary>
            <param name="model"></param>
            <param name="sb"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ToJson(HWQ.Entity.LightModels.LModel)">
            <summary>
            转化为 JSON 数据格式
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.GetModelElement(HWQ.Entity.LightModels.LModelReader)">
            <summary>
            从 LModelReader 结果集中构造实体DNA
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.GetModelElement(System.Data.DataTable)">
            <summary>
            从 LModelReader 结果集中构造实体DNA
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.GetModelIdentityElem">
            <summary>
            获取实体 ModelIdentity 元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ValueFormat(System.Object,HWQ.Entity.LightModels.LModelFieldElement)">
            <summary>
            值格式化,以字段的 fieldElem.UI.format 格式化为字符串
            </summary>
            <param name="value"></param>
            <param name="fieldElem"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.Format_Parset(System.String)">
            <summary>
            解析格式对象
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.Format(System.String,HWQ.Entity.LightModels.LightModel)">
            <summary>
            实体格式化输出字符串. 例:LightModel.Format("{Field1} - {Field2}",model);
            </summary>
            <param name="format">定义内容: {Field1} - {Field2}</param>
            <param name="model">实体</param>
            <returns></returns>
            <example>LightModel.Format("{Field1} - {Field2}",model);</example>
        </member>
        <member name="M:HWQ.Entity.ModelHelper.ParseJson(HWQ.Entity.LightModels.SModel,Newtonsoft.Json.Linq.JObject)">
            <summary>
            把 Json 数据转换为 SModel 对象
            </summary>
            <param name="model">model</param>
            <param name="jobj"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.ModelFactory">
            <summary>
            实体模型工厂
            </summary>
        </member>
        <member name="F:HWQ.Entity.ModelFactory.m_SimpleDictFactory">
            <summary>
            简单字典工厂
            </summary>
        </member>
        <member name="P:HWQ.Entity.ModelFactory.SimpleDictFactory">
            <summary>
            简单字典工厂
            </summary>
        </member>
        <member name="T:HWQ.Entity.Net.DPackFIFO`1">
            <summary> 
            线程安全的先进先出队列 Fifo.cs 
            eXcel Wong 2005-5-24 
            支持多个读线程和多个写线程同时访问， 
            当fifo为空时，读线程自动堵塞，直到fifo有数据为止， 
            当fifo达到最大容量时，写线程自动堵塞，直到fofo有空余为止 
            </summary> 
        </member>
        <member name="M:HWQ.Entity.Net.DPackFIFO`1.#ctor">
            <summary>缺省构造函数，队列容量为int的最大值</summary> 
        </member>
        <member name="M:HWQ.Entity.Net.DPackFIFO`1.#ctor(System.Int32)">
            <summary>构造函数，由用户指定队列容量</summary> 
        </member>
        <member name="M:HWQ.Entity.Net.DPackFIFO`1.Enqueue(`0)">
            <summary>往队列插入元素</summary> 
        </member>
        <member name="M:HWQ.Entity.Net.DPackFIFO`1.Dequeue">
            <summary>从队列弹出元素 </summary> 
        </member>
        <member name="M:HWQ.Entity.Net.DPackFIFO`1.Peek">
            <summary>
            返回位于 DPackFIFO 开始处的对象但不将其移除。
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.Net.DPackFIFO`1.Count">
            <summary> 返回当前队列的元素数目 </summary> 
        </member>
        <member name="M:HWQ.Entity.Net.DPackFIFO`1.ResetMaxCount(System.Int32)">
            <summary> 重置队列的最大元素数目 </summary> 
        </member>
        <member name="T:HWQ.Entity.Net.DPList`1">
            <summary>
            
            </summary>
            <remarks>
            1.记录的总数量 2 个字节
            2.每个记录的长度 2 个字节 * 记录长度
            3.记录数量
            </remarks>
        </member>
        <member name="P:HWQ.Entity.Net.DPList`1.SubFields">
            <summary>
            子字段集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.DPList.SubFields">
            <summary>
            子字段集合
            </summary>
        </member>
        <member name="T:HWQ.Entity.Net.ExceptionDPack">
            <summary>
            [Type:60000]发生异常的数据包
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.ExceptionDPack.TYPE">
            <summary>
            [Type:60000]发生异常的数据包
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.ExceptionDPack.Message">
            <summary>
            错误的消息
            </summary>
        </member>
        <member name="T:HWQ.Entity.Net.NetClientEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="client"></param>
        </member>
        <member name="T:HWQ.Entity.Net.NetDataPackEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="client"></param>
            <param name="pack"></param>
        </member>
        <member name="T:HWQ.Entity.Net.NetClient">
            <summary>
            网络客户端（独立运行）
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_StartTime">
            <summary>
            启动时间
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_InputCount">
            <summary>
            接受到的字节数量
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_OuputCount">
            <summary>
            发送的字节数量
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_CurrentInputCount">
            <summary>
            当前输入的数据量(字节)
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_CurrentOuputCount">
            <summary>
            当前输出的数据量（字节）
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_OuputPackCount">
            <summary>
            发送的数据包
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_InputPackCount">
            <summary>
            接收的数据包
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_PackSeq">
            <summary>
            发送数据包的序号
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_Stream">
            <summary>
            数据流
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_BufferData">
            <summary>
            数据缓冲区
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_PrepSendData1">
            <summary>
            准备发送的数据
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_PrepGetData1">
            <summary>
            已经接收的数据
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_RemoteIP">
            <summary>
            远程IP
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_RemotePort">
            <summary>
            远程端口
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_AutoSend">
            <summary>
            自动发送
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.DefaultBufferLen">
            <summary>
            默认缓冲区长度
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_TmpBufferData">
            <summary>
            8192 是 TcpClient 的默认缓冲区大小 
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_LastSendTime">
            <summary>
            最后发送和接收数据的日期
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_UserType">
            <summary>
            用户自定义的类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_ErrorDPack">
            <summary>
            错误的数据包数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.StartTime">
            <summary>
            连接的时间
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.CurrentInputPackCount">
            <summary>
            当前输入的数据包
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.CurrentOuputPackCount">
            <summary>
            当前输出的数据包
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.InputPackCount">
            <summary>
            接收的数据包数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.OuputPackCount">
            <summary>
            发送的数据包数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.InputCount">
            <summary>
            接收的 byte 总量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.CurrentInputCount">
            <summary>
            当前接收到的 byte 数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.CurrentOuputCount">
            <summary>
            当前发送的 byte 数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.OuputCount">
            <summary>
            发送的 byte 总量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.ErrorDPack">
            <summary>
            错误的数据包数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.UserType">
            <summary>
            用户自定义类型
            </summary>
        </member>
        <member name="E:HWQ.Entity.Net.NetClient.Closed">
            <summary>
            关闭的事件
            </summary>
        </member>
        <member name="E:HWQ.Entity.Net.NetClient.Opening">
            <summary>
            链接的事件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.OnClosed">
            <summary>
            触发关闭的事件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.OnOpening">
            <summary>
            触发链接成功的事件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.ProData">
            <summary>
            处理命令
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.LastSendTime">
            <summary>
            最后发送和接收数据的时间
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.#ctor">
            <summary>
            网络客户端
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetClient.m_DataPackGroups">
            <summary>
            数据包分组
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.CreateGroup(System.Int32)">
            <summary>
            创建组
            </summary>
            <param name="packTypeID"></param>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.GetPackGroup(System.Int32)">
            <summary>
            获取已经分组的数据包
            </summary>
            <param name="packTypeID">数据包类型</param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.RemoveGroup(System.Int32)">
            <summary>
            删除组
            </summary>
            <param name="packTypeID"></param>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.RemoteIP">
            <summary>
            远程IP
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.RemotePort">
            <summary>
            远程端口
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.Start(System.String,System.Int32)">
            <summary>
            开始线程
            </summary>
            <param name="remoteIP"></param>
            <param name="remotePort"></param>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.Connect">
            <summary>
            连接远程服务器
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.Start">
            <summary>
            开始线程
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.IsClose">
            <summary>
            是否已经关闭
            </summary>
            <returns></returns>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.IsClosed">
            <summary>
            判断客户是否已经断开连接
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.ClearBuffer">
            <summary>
            清除数据包
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.Close">
            <summary>
            关闭服务器
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.Write(HWQ.Entity.Net.NetDataPack)">
            <summary>
            发送数据包
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:HWQ.Entity.Net.NetClient.AutoSend">
            <summary>
            自动发送
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.SendBufferData">
            <summary>
            发送缓冲区数据(发送字节)
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.GetBufferData">
            <summary>
            获取缓冲区的数据
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.ProBufferData">
            <summary>
            处理接收到的数据，把 byte 据转换为 NetDataPack 对象
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.IndexOf(System.Byte[],System.Byte[])">
            <summary>
            查找
            </summary>
            <param name="data"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.IndexNo00(System.Byte[])">
            <summary>
            查找非空字节
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.IndexOf(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            查找
            </summary>
            <param name="data"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.incorporateByte(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            合并byte[]方法： 输入一个byte[]：inByte ,把它合并到自己的byte[] ownByte中去，再把它返回
            </summary>
            <param name="inByte"></param>
            <param name="ownByte"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Net.NetClient.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:HWQ.Entity.Net.NetDataPack">
            <summary>
            网络传送的数据包
            </summary>
            <remarks>
            包定义
            1、包头 1 字节(0x02)
            2、长度 4 字节
            3、命令 2 字节
            4、命令标签 1 字节,CmdTag  ,命令标签
            4、流水号 2 字节
            5、包内容（上限 2147483647 - 8 字节）
            6、包尾 1 字节(0x03)
            
            (注：下版本需加上校验码)
            </remarks>
        </member>
        <member name="F:HWQ.Entity.Net.NetDataPack.DATA_HEAD">
            <summary>
            包头 0x02
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetDataPack.DATA_END">
            <summary>
            包尾部 0x03
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetDataPack.m_Data">
            <summary>
            数据内容（携带用户信息的数据内容）
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetDataPack.m_srcBytes">
            <summary>
            原数据（包含包头包尾的整个原始数据）
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.GetData">
            <summary>
            获取用户自定义数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.SetData(System.Byte[])">
            <summary>
            设置用户自定义数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.GetStatus">
            <summary>
            获取数据包状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.ToPack``1">
            <summary>
            转换
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.Create(System.Byte[])">
            <summary>
            按字节创建网络数据包
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.ConvtenTypes(System.Type[])">
            <summary>
            
            </summary>
            <param name="fieldTypes"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.SetBytes(System.Byte[])">
            <summary>
            设置数据包字节内容
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.GetBytes">
            <summary>
            获取数据包的字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.GetBitData">
            <summary>
            获取 Bit Data
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.SetBitData(System.Byte[])">
            <summary>
            设置 bit Data
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.CopyTo(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            拷贝
            </summary>
            <param name="data"></param>
            <param name="toBytes"></param>
            <param name="index"></param>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.BytesToRow(System.Data.DataRow,System.Byte[],System.String[])">
            <summary>
            二进制 转换 为 DataRow
            </summary>
            <param name="row"></param>
            <param name="data"></param>
            <param name="fields"></param>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.RowToBytes(System.Data.DataRow,System.String[])">
            <summary>
            DataRow 转换为 二进制
            </summary>
            <param name="row"></param>
            <param name="DBNulls"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.BytesToPack(System.Object,System.Byte[],System.String[])">
            <summary>
            把二进制数据转换为实体
            </summary>
            <param name="pack">实体</param>
            <param name="data">二进制数据</param>
            <param name="fields">需要转换的字段集</param>
        </member>
        <member name="M:HWQ.Entity.Net.NetDataPack.ConvertToBytes(System.Object,System.String[])">
            <summary>
            把实体转换为二进制数据
            </summary>
            <param name="fields">字段集合</param>
            <returns>二进制数据</returns>
        </member>
        <member name="T:HWQ.Entity.Net.NetDataPackCollection">
            <summary>
            数据包集合
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetDataPackMode.Send">
            <summary>
            发送模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetDataPackMode.Return">
            <summary>
            返回的模式
            </summary>
        </member>
        <member name="T:HWQ.Entity.Net.NetServer">
            <summary>
            服务器
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetServer.ClientNews">
            <summary>
            [类内部使用] 新添加的用户(建议继承使用)
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetServer.ClientExist">
            <summary>
            [类内部使用] 新退出的用户(建议继承使用)
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetServer.Clients">
            <summary>
            客户端集合(建议继承使用)
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.GetBufferData">
            <summary>
            获取缓冲的数据信息
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.ProBufferData">
            <summary>
            处理数据
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.SendBufferData">
            <summary>
            发送信息
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.GetClient(System.Guid)">
            <summary>
            获取链接的客户端
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="T:HWQ.Entity.Net.NetServer.Client">
            <summary>
            服务器端的客户
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.Client.m_IsMultiSelectMode">
            <summary>
            是否为多查询模式
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.Client.m_MulitiSelectDPacks">
            <summary>
            多命令查询的命令集合
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetServer.Client.IsMultiSelectMode">
            <summary>
            获取或设置是否为多查询模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetServer.Client.MulitiSelectDPacks">
            <summary>
            多个查询的数据包
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.Client.#ctor(System.Net.Sockets.Socket)">
            <summary>
            服务器端的客户
            </summary>
            <param name="socket"></param>
        </member>
        <member name="P:HWQ.Entity.Net.NetServer.Client.Guid">
            <summary>
            标识
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.Client.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.Client.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.m_ListenerPort">
            <summary>
            监听端口
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.m_TcpListener">
            <summary>
            监听
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.m_IsListener">
            <summary>
            是否监听
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.m_Clients">
            <summary>
            
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.m_TmpClients">
            <summary>
            对当前新链接的临时存放地
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.m_ClientNews">
            <summary>
            新添加的用户
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.m_ClientExits">
            <summary>
            新退出的用户
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.m_DateBufferPacks">
            <summary>
            服务器接受到的消息包
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.m_SendDataPacks">
            <summary>
            服务器准备发送的数据包
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.m_MaxClientCount">
            <summary>
            客户端连接数量
            </summary>
        </member>
        <member name="E:HWQ.Entity.Net.NetServer.ClientConnect">
            <summary>
            用户链接的事件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.OnClientConnect(HWQ.Entity.Net.NetServer.Client)">
            <summary>
            触发用户链接的事件
            </summary>
            <param name="client"></param>
        </member>
        <member name="E:HWQ.Entity.Net.NetServer.ClientClose">
            <summary>
            用户链接关闭的事件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.OnClientClose(HWQ.Entity.Net.NetServer.Client)">
            <summary>
            触发用户链接关闭的事件
            </summary>
            <param name="client"></param>
        </member>
        <member name="E:HWQ.Entity.Net.NetServer.ServerClosed">
            <summary>
            关闭服务器触发的事件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.OnServerClosed">
            <summary>
            关闭服务器触发的事件
            </summary>
        </member>
        <member name="E:HWQ.Entity.Net.NetServer.ServerOpen">
            <summary>
            打开服务器触发的事件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.OnServerOpen">
            <summary>
            打开服务器触发的事件
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.m_IsProData">
            <summary>
            处理数据
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetServer.m_ThreadData">
            <summary>
            获取并处理数据的线程
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetServer.MaxClientCount">
            <summary>
            客户端最大连接数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetServer.InputPackCount">
            <summary>
            接收的数据包数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetServer.OuputPackCount">
            <summary>
            发送的数据包数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetServer.InputCount">
            <summary>
            接收的 byte 总量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetServer.OuputCount">
            <summary>
            已经发送的 byte 总量
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.DoProClientData">
            <summary>
            主线程处理数据
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetServer.ListenerPort">
            <summary>
            监听端口
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.#ctor">
            <summary>
            服务器的构造方法
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.Listener">
            <summary>
            监听
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.StartProClientData">
            <summary>
            开始处理用户数据
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.StopProClientData">
            <summary>
            停止处理用户数据
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.ProClientAccept">
            <summary>
            处理请求的客户
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.ProClientClose">
            <summary>
            处理已经断开链接的客户（一秒钟检查一次）
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.DoListener">
            <summary>
            循环等待请求的链接
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.Listener(System.Int32)">
            <summary>
            监听
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.StopListener">
            <summary>
            停止监听
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.NetServer.Dispose">
            <summary>
            系统自动释放资源
            </summary>
        </member>
        <member name="T:HWQ.Entity.Net.NetDataPackStatus">
            <summary>
            数据包状态
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetDataPackStatus.m_DelayTime">
            <summary>
            延迟发送
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetDataPackStatus.m_Mode">
            <summary>
            数据包的传送类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetDataPackStatus.m_Length">
            <summary>
            数据包长度
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetDataPackStatus.m_Type">
            <summary>
            数据包类型
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetDataPackStatus.m_CmdTag">
            <summary>
            命令标签
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetDataPackStatus.m_SeqNum">
            <summary>
            包流水号
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.NetDataPackStatus.m_Sender">
            <summary>
            数据包发送者
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetDataPackStatus.CmdTag">
            <summary>
            命令标签
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetDataPackStatus.DelayTime">
            <summary>
            延迟发送
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetDataPackStatus.Version">
            <summary>
            版本号 (1 个字节)
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetDataPackStatus.Sender">
            <summary>
            数据包发送者（注：服务器才支持此属性）
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetDataPackStatus.Mode">
            <summary>
            传送模式
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetDataPackStatus.SeqNum">
            <summary>
            包流水号
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetDataPackStatus.Length">
            <summary>
            数据包长度
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.NetDataPackStatus.Type">
            <summary>
            数据包类型
            </summary>
        </member>
        <member name="T:HWQ.Entity.Net.UserServerBase">
            <summary>
            [未完成] 试用
            </summary>
        </member>
        <member name="E:HWQ.Entity.Net.UserServerBase.ServerClosed">
            <summary>
            关闭服务器触发的事件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.UserServerBase.OnServerClosed">
            <summary>
            关闭服务器触发的事件
            </summary>
        </member>
        <member name="E:HWQ.Entity.Net.UserServerBase.ServerOpen">
            <summary>
            打开服务器触发的事件
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.UserServerBase.OnServerOpen">
            <summary>
            打开服务器触发的事件
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.UserServerBase.m_ConnectionGuid">
            <summary>
            链接 GUID
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.UserServerBase.ConnectionGuid">
            <summary>
            链接 GUID ,默认 f95a1d9c-ae6b-4c37-96dd-b76ccb0d2f37
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.UserServerBase.m_Overtime">
            <summary>
            超时就自动断开链接
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.UserServerBase.m_OuputNDPackCount">
            <summary>
            已经处理的数据包数据量
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.UserServerBase.m_CurrentOuputNDPackCount">
            <summary>
            当前处理的数据量
            </summary>
        </member>
        <member name="F:HWQ.Entity.Net.UserServerBase.m_IsProData">
            <summary>
            是否在处理数据
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.UserServerBase.ClientCount">
            <summary>
            获取客户端数量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.UserServerBase.OuputNDPackCount">
            <summary>
            已经处理的数据包数量
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.UserServerBase.Clear">
            <summary>
            清除玩家
            </summary>
            <returns></returns>
        </member>
        <member name="M:HWQ.Entity.Net.UserServerBase.ProClientOvertime">
            <summary>
            处理超时的链接
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.UserServerBase.ProClient">
            <summary>
            处理数据包
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.UserServerBase.InputCount">
            <summary>
            获取网络接收的字节数据量
            </summary>
        </member>
        <member name="P:HWQ.Entity.Net.UserServerBase.OuputCount">
            <summary>
            获取发送的字节数据量
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.UserServerBase.ProDataPack">
            <summary>
            处理接收到的信息
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.UserServerBase.ProClientNews">
            <summary>
            处理新链接的客户
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.UserServerBase.ProClientExits">
            <summary>
            处理退出的客户
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.UserServerBase.Stop">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:HWQ.Entity.Net.UserServerBase.Start(System.Int32)">
            <summary>
            启动服务器
            </summary>
            <param name="port"></param>
        </member>
        <member name="T:HWQ.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:HWQ.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:HWQ.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:App.Register.RegHelp">
            <summary>
            注册帮助
            </summary>
        </member>
        <member name="F:App.Register.RegHelp.m_RegCode">
            <summary>
            授权码
            </summary>
        </member>
        <member name="M:App.Register.RegHelp.SetData(System.Byte[],System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            设置注册信息
            </summary>
            <param name="data">解密信息</param>
            <param name="userId">用户ID</param>
            <param name="toTime">授权结束日期</param>
            <param name="mode">DEMO,FULL</param>
            <param name="isValidNow">立刻验证</param>
        </member>
        <member name="M:App.Register.RegHelp.IsValidRegister">
            <summary>
            是否已经验证注册
            </summary>
            <returns></returns>
        </member>
        <member name="M:App.Register.RegHelp.IsRegister">
            <summary>
            是否已经注册
            </summary>
            <returns></returns>
        </member>
        <member name="M:App.Register.RegFactory.GetContextValues">
            <summary>
            获取 Application 里面的硬件参数值
            </summary>
            <returns></returns>
        </member>
        <member name="M:App.Register.RegFactory.GetMoAddress">
              <summary> 
              获取网卡硬件地址 
              </summary> 
              <returns> string </returns> 
        </member>
        <member name="M:App.Register.RegFactory.GetCpuID">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:App.Register.RegFactory.ZbID">
            <summary>
            主板
            </summary>
            <returns></returns>
        </member>
        <member name="M:App.Register.RegFactory.GetHDid">
              <summary> 
              获取硬盘ID     
              </summary> 
              <returns> string </returns> 
        </member>
        <member name="M:App.Register.RegFactory.AESDecrypt(System.Byte[],System.String)">
            <summary>
            AES 解密(高级加密标准，是下一代的加密算法标准，速度快，安全级别高，目前 AES 标准的一个实现是 Rijndael 算法)
            </summary>
            <param name="DecryptData">待解密密文</param>
            <param name="DecryptKey">解密密钥</param>
            <returns></returns>
        </member>
    </members>
</doc>
