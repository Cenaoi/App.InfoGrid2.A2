<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EC5.Utility</name>
    </assembly>
    <members>
        <member name="T:EC5.Utility.ArrayUtil">
            <summary>
            数组公共类
            </summary>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Byte[],System.String)">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <param name="emptyArrayValue">数组为空，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Int16[],System.String)">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <param name="emptyArrayValue">数组为空，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Int32[],System.String)">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <param name="emptyArrayValue">数组为空，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Int64[],System.String)">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <param name="emptyArrayValue">数组为空，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Decimal[],System.String)">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <param name="emptyArrayValue">数组为空，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Double[],System.String)">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <param name="emptyArrayValue">数组为空，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.String[],System.String)">
            <summary>
            输出字符串格式。例："一","二","三",……
            </summary>
            <param name="values"></param>
            <param name="emptyArrayValue">数组为空，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Object[],System.String)">
            <summary>
            输出字符串格式。例：1,"一","二",3,4,……
            </summary>
            <param name="values"></param>
            <param name="emptyArrayValue">数组为空，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Byte[])">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Int16[])">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Int32[])">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Int64[])">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Decimal[])">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Double[])">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.Object[])">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToString(System.String[])">
            <summary>
            输出字符串格式。例：1,2,3,4,……
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.Exist``1(``0[],``0)">
            <summary>
            判断对象是否存在数组中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.Exist(System.Int32[],System.Int32)">
            <summary>
            判断对象是否存在数组中
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.Exist(System.String[],System.String)">
            <summary>
            判断对象是否存在数组中
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.Exist(System.Int64[],System.Int64)">
            <summary>
            判断对象是否存在数组中
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.Exist(System.Int16[],System.Int16)">
            <summary>
            判断对象是否存在数组中
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.Remove``1(``0,``0[])">
            <summary>
            删除数组中某个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="array"></param>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.Remove(System.Int32,System.Int32[])">
            <summary>
            删除数组中某个对象
            </summary>
            <param name="value"></param>
            <param name="array"></param>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.Remove(System.String,System.String[])">
            <summary>
            删除数组中某个对象
            </summary>
            <param name="value"></param>
            <param name="array"></param>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.Remove(System.Int64,System.Int64[])">
            <summary>
            删除数组中某个对象
            </summary>
            <param name="value"></param>
            <param name="array"></param>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.Union(System.Int32[],System.Int32[])">
            <summary>
            合并两个数组,不重复数据
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.Union(System.String[],System.String[])">
            <summary>
            合并两个数组,不重复数据
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.RemoveDuplicate(System.String[])">
            <summary>
            删除重复的元素。
            </summary>
            <param name="array1"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.SetValue2D``1(``0[0:,0:],``0)">
            <summary>
            对二维数组进行赋值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value"></param>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.GetLen(System.Byte[])">
            <summary>
            获取数组长度
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.IndexOf(System.Byte[],System.Byte[])">
            <summary>
            查找
            </summary>
            <param name="data"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.IndexOf(System.Byte[],System.Byte)">
            <summary>
            查找
            </summary>
            <param name="data"></param>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.IndexOf(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            查找
            </summary>
            <param name="data"></param>
            <param name="bytes"></param>
            <param name="index">起始位置</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.Sub(System.Byte[],System.Int32,System.Int32)">
            <summary>
            截取某一段
            </summary>
            <param name="srcData"></param>
            <param name="index"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.GetNewItems``1(``0[],``0[])">
            <summary>
            获取新增加的项目
            </summary>
            <param name="srcList">源集合</param>
            <param name="curList">现在集合</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.GetDeleteItems``1(``0[],``0[])">
            <summary>
            获取删除的项目
            </summary>
            <typeparam name="ItemT"></typeparam>
            <param name="srcList"></param>
            <param name="curList"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.HasItem(System.Collections.IList)">
            <summary>
            判断存在子项
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.HasItem(System.Array)">
            <summary>
            判断存在子项
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ArrayUtil.ToIntList(System.String[])">
            <summary>
            把字符串数组转换为整形数组
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.AttrUtil">
            <summary>
            Attribute 属性类进行操作
            </summary>
        </member>
        <member name="M:EC5.Utility.AttrUtil.GetAttr``1(System.Reflection.PropertyInfo)">
            <summary>
            获取属性  (Property)  的Attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.AttrUtil.GetAttr``1(System.Reflection.MethodInfo)">
            <summary>
            获取函数  (MethodInfo)  的Attribute
            </summary>
            <typeparam name="AttrT"></typeparam>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.AttrUtil.GetAttr``1(System.Type)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.AttrUtil.GetAttr``1(System.Object)">
            <summary>
            获取类 Class 的属性Attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.AttrUtil.GetDefaultValue(System.Reflection.PropertyInfo)">
            <summary>
            获取属性 (Property) 的默认值
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.AttrUtil.GetDefaultValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            获取属性 (Property) 的默认值
            </summary>
            <param name="owner"></param>
            <param name="emptyValue">找不到才用的默认值</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.AttrUtil.GetDescription(System.Reflection.PropertyInfo)">
            <summary>
            获取属性 (Property) 的描述
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.AttrUtil.GetDescription(System.Type)">
            <summary>
            获取属性 (Property) 的描述
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.AttrUtil.GetBrowsable(System.Reflection.PropertyInfo)">
            <summary>
            指定一个属性 (Property) 或事件是否应显示在“属性”窗口中。
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.Base64Util">
            <summary>
            Base64 加密解密
            </summary>
        </member>
        <member name="M:EC5.Utility.Base64Util.FromString(System.String)">
            <summary>
            解密
            </summary>
            <param name="base64String">密文字符串</param>
            <returns>原文字符串</returns>
        </member>
        <member name="M:EC5.Utility.Base64Util.FromString(System.String,EC5.Utility.Base64Mode)">
            <summary>
            解密
            </summary>
            <param name="base64String">密文字符串</param>
            <param name="mode">加密模式</param>
            <returns>原文字符串</returns>
        </member>
        <member name="M:EC5.Utility.Base64Util.ToString(System.String)">
            <summary>
            加密
            </summary>
            <param name="base64Code">原文字符串</param>
            <returns>密文字符串</returns>
        </member>
        <member name="M:EC5.Utility.Base64Util.ToString(System.String,EC5.Utility.Base64Mode)">
            <summary>
            加密
            </summary>
            <param name="base64Code">原文字符串</param>
            <param name="mode">加密模式</param>
            <returns>密文字符串</returns>
        </member>
        <member name="T:EC5.Utility.BitUtil">
            <summary>
            二进制助手类
            </summary>
        </member>
        <member name="M:EC5.Utility.BitUtil.ToString(System.Byte)">
            <summary>
            字节转换为二进制
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.BitUtil.ToByte(System.String)">
            <summary>
            二进制转换为字节
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.BitUtil.Set(System.Byte@,System.Int32,System.Boolean)">
            <summary>
            设置
            </summary>
            <param name="data"></param>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.BitUtil.Get(System.Byte,System.Int32)">
            <summary>
            获取子
            </summary>
            <param name="data"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.BoolUtil">
            <summary>
            布尔值助手类
            </summary>
        </member>
        <member name="F:EC5.Utility.BoolUtil.TrueString">
            <summary>
            True 值字符串
            </summary>
        </member>
        <member name="F:EC5.Utility.BoolUtil.FalseString">
            <summary>
            False 值字符串
            </summary>
        </member>
        <member name="M:EC5.Utility.BoolUtil.ToJson(System.Boolean)">
            <summary>
            返回小写的 true， false 字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.ByteArray">
            <summary>
            Byte 集合
            </summary>
        </member>
        <member name="M:EC5.Utility.ByteArray.#ctor">
            <summary>
            (构造函数)Byte 集合
            </summary>
        </member>
        <member name="M:EC5.Utility.ByteArray.#ctor(System.Byte[])">
            <summary>
            (构造函数)Byte 集合
            </summary>
            <param name="data">初始化数据</param>
        </member>
        <member name="P:EC5.Utility.ByteArray.Item(System.Int32)">
            <summary>
            索引
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ByteArray.Add(System.Byte)">
            <summary>
            添加一个字节
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:EC5.Utility.ByteArray.AddRange(System.String)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:EC5.Utility.ByteArray.AddRange(System.Byte[])">
            <summary>
            添加字节集合
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:EC5.Utility.ByteArray.AddRange(System.Byte[],System.Int32)">
            <summary>
            添加字节集合
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:EC5.Utility.ByteArray.EndsWith(System.Byte[])">
            <summary>
            比较结尾是否相同
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ByteArray.Clear">
            <summary>
            清除全部数据
            </summary>
        </member>
        <member name="P:EC5.Utility.ByteArray.Count">
            <summary>
            长度
            </summary>
        </member>
        <member name="M:EC5.Utility.ByteArray.Remove(System.Int32,System.Int32)">
            <summary>
            删除指定字节，并返回删除的对象
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ByteArray.IndexOf(System.Byte[],System.Byte[])">
            <summary>
            查找
            </summary>
            <param name="data"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ByteArray.IndexOf(System.Byte[],System.Byte)">
            <summary>
            查找
            </summary>
            <param name="data"></param>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ByteArray.IndexOf(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            查找
            </summary>
            <param name="data"></param>
            <param name="bytes"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ByteArray.Join(System.Byte[],System.Byte[])">
            <summary>
            合并
            </summary>
            <param name="inByte"></param>
            <param name="ownByte"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ByteArray.Join(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            合并byte[]方法： 输入一个byte[]：inByte ,把它合并到自己的byte[] ownByte中去，再把它返回
            </summary>
            <param name="inByte"></param>
            <param name="ownByte"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
            <remarks>
            代码改进：ArrayCopy 可以改用为 System.Buffer.BlockCopy
            
            </remarks>
        </member>
        <member name="M:EC5.Utility.ByteArray.ToString">
            <summary>
            输出字符
            </summary>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.CRC16Util">
            <summary>
            CRC16校验类
            </summary>
        </member>
        <member name="F:EC5.Utility.CRC16Util.CRC16Table">
            <summary>
            CRC16表 
            </summary>
        </member>
        <member name="M:EC5.Utility.CRC16Util.CRC16Code(System.Byte[])">
            <summary>
            CRC16校验码取得
            </summary>
            <param name="pcrc"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.CRC16Util.Verify16(System.Byte[])">
            <summary>
            校验码比较16进制字符串
            </summary>
            <param name="dataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.CRC16Util.Verify10(System.Byte[])">
            <summary>
            校验码比较10进制字符串
            </summary>
            <param name="dataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.CRC16Util.ByteArray16ToUInt(System.Byte[])">
            <summary>
            字节流转数字，16进制字符串
            </summary>
            <param name="verifyCode"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.CRC16Util.ByteArray10ToUInt(System.Byte[])">
            <summary>
            字节流转数字，10进制字符串
            </summary>
            <param name="verifyCode"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.Culture.Zh.PingYinUtil.Form(System.String)">
            <summary>
            汉字转换成全拼的拼音
            </summary>
            <param name="Chstr">汉字字符串</param>
            <returns>转换后的拼音字符串</returns>
        </member>
        <member name="M:EC5.Utility.Culture.Zh.PingYinUtil.Form(System.String,System.String,EC5.Utility.Culture.Zh.PingYinType)">
            <summary>
            返回全拼音
            </summary>
            <param name="txt"></param>
            <param name="splitChar"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.Culture.Zh.PingYinUtil.FormForFull(System.String,System.String)">
            <summary>
            全拼
            </summary>
            <param name="txt"></param>
            <param name="splitChar"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.Culture.Zh.PingYinType">
            <summary>
            拼音类型
            </summary>
        </member>
        <member name="F:EC5.Utility.Culture.Zh.PingYinType.Full">
            <summary>
            全拼
            </summary>
        </member>
        <member name="F:EC5.Utility.Culture.Zh.PingYinType.First">
            <summary>
            字母
            </summary>
        </member>
        <member name="T:EC5.Utility.Culture.Zh.HanziUtil">
            <summary>
            汉字助手类
            </summary>
        </member>
        <member name="M:EC5.Utility.Culture.Zh.HanziUtil.IsCoding(System.String)">
            <summary>
            验证汉字编码
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.Culture.Zh.HanziUtil.IsCoding(System.Char)">
            <summary>
            验证汉字编码
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.Culture.Zh.HanziUtil.Count(System.String)">
            <summary>
            获取汉字的数量
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.DataRowExpand">
            <summary>
            DataRow 扩展
            </summary>
        </member>
        <member name="T:EC5.Utility.DateUtil">
            <summary>
            日期帮助类
            </summary>
        </member>
        <member name="F:EC5.Utility.DateUtil.FORMAT_DATE">
            <summary>
            日期的格式 yyyy-MM-hh
            </summary>
        </member>
        <member name="F:EC5.Utility.DateUtil.FORMAT_DATETIME">
            <summary>
            日期和时间的格式 yyyy-MM-hh HH:mm:ss
            </summary>
        </member>
        <member name="F:EC5.Utility.DateUtil.FORMAT_TIME">
            <summary>
            时间个格式 HH:mm:ss
            </summary>
        </member>
        <member name="M:EC5.Utility.DateUtil.ToDateString(System.DateTime)">
            <summary>
            格式化输出今天的日期 yyyy-MM-dd
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.ToDateString">
            <summary>
            格式化输出今天的日期 yyyy-MM-dd
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.ToTimeString(System.DateTime)">
            <summary>
            格式化时间，并转化为当前日期的 HH:mm:ss
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.ToTimeString">
            <summary>
            格式化时间，并转化为当前日期的 HH:mm:ss
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.ToDateTimeString(System.DateTime)">
            <summary>
            yyyy-MM-hh HH:mm:ss
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.ToDateTimeString">
            <summary>
            格式化时间，并转化为当前日期的 yyyy-MM-dd HH:mm:ss
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartDay(System.String)">
            <summary>
            格式化时间，并转化为当前日期的 0:0:0
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartDate(System.Int32)">
            <summary>
            开始日期的 DateTime 单位
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndDate(System.Int32)">
            <summary>
            结束日期的 DateTime 单位.获取当天，昨天，明天，前天。。。。
            </summary>
            <param name="value">0=当天，1=明天，-1=昨天，-2=前天...</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndDay(System.String)">
            <summary>
            格式化时间，并转化为当前日期的 23:59:59
            </summary>
            <param name="text">0=当天，1=明天，-1=昨天，-2=前天...</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByToday">
            <summary>
            开始时间（当天）
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByToday(System.Int32)">
            <summary>
            开始时间（当天）
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByTodaty">
            <summary>
            结束时间（当天）
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByToday">
            <summary>
            结束时间（当天）
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByMonth">
            <summary>
            当前月份 1日 0：0 
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByMonth(System.Int32)">
            <summary>
            当前月份 
            </summary>
            <param name="momths"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByMonth(System.Int32,System.Int32)">
            <summary>
            开始月份
            </summary>
            <param name="year">年</param>
            <param name="momths">月</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByMonth(System.DateTime)">
            <summary>
            开始月份的第一天
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByMonth(System.Nullable{System.DateTime})">
            <summary>
            开始月份的第一天
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByMonth">
            <summary>
            当月结束时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByMonth(System.Int32,System.Int32)">
            <summary>
            结束时间
            </summary>
            <param name="year"></param>
            <param name="momths"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByMonth(System.DateTime)">
            <summary>
            结束的月份
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByMonth(System.Nullable{System.DateTime})">
            <summary>
            结束的月份
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByMonth(System.Int32)">
            <summary>
            指定月份结束的时间 23:59:59
            </summary>
            <param name="momths"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByYear(System.Int32)">
            <summary>
            指定当年的 1月1日 0:0:0
            </summary>
            <param name="year">年份</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByYear(System.DateTime)">
            <summary>
            指定当年的 1月1日 0:0:0
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByYear(System.Nullable{System.DateTime})">
            <summary>
            指定当年的 1月1日 0:0:0
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByYear(System.Int32)">
            <summary>
            指定当年的结束时间 1月1日 0:0:0
            </summary>
            <param name="year">年份</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByYear(System.DateTime)">
            <summary>
            指定当年的结束时间 1月1日 0:0:0
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByYear(System.Nullable{System.DateTime})">
            <summary>
            指定当年的结束时间 1月1日 0:0:0
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByYear">
            <summary>
            指定今年第一天的 0:0:0
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByYear">
            <summary>
            指定今年结束的最后一天　23:59:59
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByQuarter">
            <summary>
            开始季度时间
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByQuarter">
            <summary>
            季度结束的时间
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByQuarter(System.DateTime)">
            <summary>
            开始季度时间
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByQuarter(System.DateTime)">
            <summary>
            季度结束的时间
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByQuarter(System.Nullable{System.DateTime})">
            <summary>
            开始季度时间
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByQuarter(System.Nullable{System.DateTime})">
            <summary>
            季度结束的时间
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.DayOfWeek(System.DayOfWeek,System.String[])">
            <summary>
            星期几
            </summary>
            <param name="week"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.DayOfWeek(System.DayOfWeek)">
            <summary>
            获取星期几
            </summary>
            <param name="week"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.DayOfWeek">
            <summary>
            获取当天是星期几
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.TotalDays(System.DateTime,System.DateTime)">
            <summary>
            获取两个日期之间的天数
            </summary>
            <param name="formDate">起始日期</param>
            <param name="toDate">结束日期</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.TotalMonths(System.DateTime,System.DateTime)">
            <summary>
            获取总月份
            </summary>
            <param name="formDate"></param>
            <param name="toDate"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.ToMonthList(System.DateTime,System.DateTime)">
            <summary>
            获取两个日期之间的月份集合
            </summary>
            <param name="formDate"></param>
            <param name="toDate"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.ToDayList(System.DateTime,System.DateTime)">
            <summary>
            获取两个日期之间的天数集合
            </summary>
            <param name="formDate"></param>
            <param name="toDate"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.Day(System.Object)">
            <summary>
            (c# 脚本专用)
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.Month(System.Object)">
            <summary>
            (c# 脚本专用)
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.Year(System.Object)">
            <summary>
            (c# 脚本专用)
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.Day(System.Object,System.Int32)">
            <summary>
            (c# 脚本专用)
            </summary>
            <param name="date"></param>
            <param name="defaultDay"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.Year(System.Object,System.Int32)">
            <summary>
            (c# 脚本专用)
            </summary>
            <param name="date"></param>
            <param name="defaultDay"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.Month(System.Object,System.Int32)">
            <summary>
            (c# 脚本专用)
            </summary>
            <param name="date"></param>
            <param name="defaultDay"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.Hour(System.Object,System.Int32)">
            <summary>
            (c# 脚本专用)
            </summary>
            <param name="date"></param>
            <param name="defaultDay"></param>
            <returns></returns>
        </member>
        <member name="F:EC5.Utility.DateUtil.FROM_1970">
            <summary>
            1970年开始
            </summary>
        </member>
        <member name="M:EC5.Utility.DateUtil.FromTimestamp1970(System.Int64)">
            <summary>
            从 1970 开始是时间戳,通常转换 UNIX 的时间
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.ToTimestamp1970(System.DateTime)">
            <summary>
            转换为 1970 的时间戳
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByWeek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByWeek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.StartByWeek(System.Object)">
            <summary>
            当前时间, 找 星期一 对应的时间点 
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.EndByWeek(System.Object)">
            <summary>
            当前时间, 找 星期日 对应的时间点 
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.DateUtil.Week(System.Object)">
            <summary>
            获取当前时间, 第几周
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.EnumUtil">
            <summary>
            枚举帮助类
            </summary>
        </member>
        <member name="M:EC5.Utility.EnumUtil.Parse``1(System.String,System.Boolean)">
            <summary>
            将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。
            一个参数指定该操作是否区分大小写。
            </summary>
            <typeparam name="EnumT"></typeparam>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.EnumUtil.Parse``1(System.String)">
            <summary>
            将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。
            一个参数指定该操作是否区分大小写。
            </summary>
            <typeparam name="EnumT"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.EnumUtil.Parse``1(System.String,``0)">
            <summary>
            将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。
            一个参数指定该操作是否区分大小写。
            </summary>
            <typeparam name="EnumT"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.EnumUtil.Parse``1(System.String,``0,System.Boolean)">
            <summary>
            将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。
            一个参数指定该操作是否区分大小写。
            </summary>
            <typeparam name="EnumT"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.EnumUtil.ToStringUpper(System.Enum)">
            <summary>
            输出大写字符串
            </summary>
            <param name="value">枚举值</param>
            <returns>大写字符串</returns>
        </member>
        <member name="M:EC5.Utility.EnumUtil.ToStringLower(System.Enum)">
            <summary>
            输出小写字符串
            </summary>
            <param name="value">枚举值</param>
            <returns>小写字符串</returns>
        </member>
        <member name="T:EC5.Utility.FileUtil">
            <summary>
            文件帮助类
            </summary>
        </member>
        <member name="M:EC5.Utility.FileUtil.NewFielname(System.String)">
            <summary>
            新文件名称
            </summary>
            <param name="exName">扩展名称。例;  .xls, .exe .dll</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.FileUtil.GetUniqueName(System.String)">
            <summary>
            获取新文件名,如果重名，就加上 （n) 序号
            </summary>
            <param name="fullname"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.FileUtil.GetUniqueName(System.String,System.String)">
            <summary>
            获取新文件名,如果重名，就加上 （n) 序号
            </summary>
            <param name="dirPath">目录名称</param>
            <param name="orgFileName">文件原名</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.FileUtil.Move(System.String,System.String,System.Boolean)">
            <summary>
            将指定文件移动到新位置,并提供指定新名称
            </summary>
            <param name="sourceFileName"></param>
            <param name="descFileName"></param>
            <param name="overwriteDescFile">自动覆盖掉目标文件</param>
        </member>
        <member name="M:EC5.Utility.FileUtil.AutoCreateDirForFile(System.String)">
            <summary>
            自动根据文件路径创建目录
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:EC5.Utility.FileUtil.AutoCreateDir(System.String)">
            <summary>
            自动创建目录
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:EC5.Utility.FileUtil.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            写入 
            </summary>
            <param name="path"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:EC5.Utility.FileUtil.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            创建一个新文件，在其中写入指定的字符串，然后关闭文件。如果目标文件已存在，则覆盖该文件。
            </summary>
            <param name="path"></param>
            <param name="content"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:EC5.Utility.FileUtil.WriteAllText(System.String,System.String)">
            <summary>
            创建一个新文件，在其中写入指定的字符串，然后关闭文件。如果目标文件已存在，则覆盖该文件。
            </summary>
            <param name="path"></param>
            <param name="content"></param>
        </member>
        <member name="M:EC5.Utility.FileUtil.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            创建一个新文件，在其中写入指定的字符串，然后关闭文件。如果目标文件已存在，则覆盖该文件。
            </summary>
            <param name="path"></param>
            <param name="contents"></param>
        </member>
        <member name="M:EC5.Utility.FileUtil.WriteAllLines(System.String,System.String[])">
            <summary>
            创建一个新文件，在其中写入指定的字符串，然后关闭文件。如果目标文件已存在，则覆盖该文件。
            </summary>
            <param name="path"></param>
            <param name="contents"></param>
        </member>
        <member name="M:EC5.Utility.FileUtil.Create(System.String)">
            <summary>
            创建一个空白文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.FileUtil.CreateBlank(System.String)">
            <summary>
            创建一个空白文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:EC5.Utility.ImageUtil">
            <summary>
            图像公共类
            </summary>
        </member>
        <member name="M:EC5.Utility.ImageUtil.GetNewSz(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取缩略图的大小
            </summary>
            <param name="smallW">小图宽度限制</param>
            <param name="smallH">小图高度限制</param>
            <param name="srcW">原图宽度</param>
            <param name="srcH">原图高度</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ImageUtil.CreateThumb(System.String,System.Int32,System.Int32)">
            <summary>
            创建缩略图
            </summary>
            <param name="imagePath">原图片路径</param>
            <param name="toWidth"></param>
            <param name="toHeight"></param>
            <returns>缩略图</returns>
        </member>
        <member name="M:EC5.Utility.ImageUtil.SaveThumb(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            保存缩略图
            </summary>
            <param name="imagePath">原图片路径</param>
            <param name="saveThumbPath"></param>
            <param name="toWidth"></param>
            <param name="toHeight"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ImageUtil.SaveThumb(System.String,System.String,System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat)">
            <summary>
            保存缩略图
            </summary>
            <param name="imagePath">原图片路径</param>
            <param name="saveThumbPath">缩略图保存路径</param>
            <param name="toWidth"></param>
            <param name="toHeight"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ImageUtil.CreateThumb(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            创建缩略图
            </summary>
            <param name="bigStream">客户传上来的图片数据流</param>
            <param name="toWidth"></param>
            <param name="toHeight"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ImageUtil.SaveThumb(System.String,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            保存缩略图
            </summary>
            <param name="thumbPath"></param>
            <param name="bigStream"></param>
            <param name="toWidth"></param>
            <param name="toHeight"></param>
        </member>
        <member name="M:EC5.Utility.ImageUtil.IsImage(System.String)">
            <summary>
            判断是否为图片文件
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.IO.IniFile">
            <summary> 
            Provides methods for reading and writing to an INI file. 
            </summary> 
        </member>
        <member name="F:EC5.Utility.IO.IniFile.MaxSectionSize">
            <summary> 
            The maximum size of a section in an ini file. 
            </summary> 
            <remarks> 
            This property defines the maximum size of the buffers 
            used to retreive data from an ini file.  This value is 
            the maximum allowed by the win32 functions 
            GetPrivateProfileSectionNames() or 
            GetPrivateProfileString(). 
            </remarks> 
        </member>
        <member name="T:EC5.Utility.IO.IniFile.NativeMethods">
            <summary> 
            A static class that provides the win32 P/Invoke signatures 
            used by this class. 
            </summary> 
            <remarks> 
            Note:  In each of the declarations below, we explicitly set CharSet to 
            Auto.  By default in C#, CharSet is set to Ansi, which reduces 
            performance on windows 2000 and above due to needing to convert strings 
            from Unicode (the native format for all .Net strings) to Ansi before 
            marshalling.  Using Auto lets the marshaller select the Unicode version of 
            these functions when available. 
            </remarks> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the <see cref="T:EC5.Utility.IO.IniFile"/> class. 
            </summary> 
            <param name="path">The ini file to read and write from.</param> 
        </member>
        <member name="P:EC5.Utility.IO.IniFile.Path">
            <summary> 
            Gets the full path of ini file this object instance is operating on. 
            </summary> 
            <value>A file path.</value> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.GetString(System.String,System.String,System.String)">
            <summary> 
            Gets the value of a setting in an ini file as a <see cref="T:System.String"/>. 
            </summary> 
            <param name="sectionName">The name of the section to read from.</param> 
            <param name="keyName">The name of the key in section to read.</param> 
            <param name="defaultValue">The default value to return if the key 
            cannot be found.</param> 
            <returns>The value of the key, if found.  Otherwise, returns 
            <paramref name="defaultValue"/></returns> 
            <remarks> 
            The retreived value must be less than 32KB in length. 
            </remarks> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.GetInt16(System.String,System.String,System.Int16)">
            <summary> 
            Gets the value of a setting in an ini file as a <see cref="T:System.Int16"/>. 
            </summary> 
            <param name="sectionName">The name of the section to read from.</param> 
            <param name="keyName">The name of the key in section to read.</param> 
            <param name="defaultValue">The default value to return if the key 
            cannot be found.</param> 
            <returns>The value of the key, if found.  Otherwise, returns 
            <paramref name="defaultValue"/>.</returns> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.GetInt32(System.String,System.String,System.Int32)">
            <summary> 
            Gets the value of a setting in an ini file as a <see cref="T:System.Int32"/>. 
            </summary> 
            <param name="sectionName">The name of the section to read from.</param> 
            <param name="keyName">The name of the key in section to read.</param> 
            <param name="defaultValue">The default value to return if the key 
            cannot be found.</param> 
            <returns>The value of the key, if found.  Otherwise, returns 
            <paramref name="defaultValue"/></returns> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.GetDouble(System.String,System.String,System.Double)">
            <summary> 
            Gets the value of a setting in an ini file as a <see cref="T:System.Double"/>. 
            </summary> 
            <param name="sectionName">The name of the section to read from.</param> 
            <param name="keyName">The name of the key in section to read.</param> 
            <param name="defaultValue">The default value to return if the key 
            cannot be found.</param> 
            <returns>The value of the key, if found.  Otherwise, returns 
            <paramref name="defaultValue"/></returns> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.GetSectionValuesAsList(System.String)">
            <summary> 
            Gets all of the values in a section as a list. 
            </summary> 
            <param name="sectionName"> 
            Name of the section to retrieve values from. 
            </param> 
            <returns> 
            A <see cref="T:System.Collections.Generic.List`1"/> containing <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects 
            that describe this section.  Use this verison if a section may contain 
            multiple items with the same key value.  If you know that a section 
            cannot contain multiple values with the same key name or you don't 
            care about the duplicates, use the more convenient 
            <see cref="M:EC5.Utility.IO.IniFile.GetSectionValues(System.String)"/> function. 
            </returns> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> is a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.GetSectionValues(System.String)">
            <summary> 
            Gets all of the values in a section as a dictionary. 
            </summary> 
            <param name="sectionName"> 
            Name of the section to retrieve values from. 
            </param> 
            <returns> 
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the key/value 
            pairs found in this section.   
            </returns> 
            <remarks> 
            If a section contains more than one key with the same name, 
            this function only returns the first instance.  If you need to 
            get all key/value pairs within a section even when keys have the 
            same name, use <see cref="M:EC5.Utility.IO.IniFile.GetSectionValuesAsList(System.String)"/>. 
            </remarks> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> is a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.GetKeyNames(System.String)">
            <summary> 
            Gets the names of all keys under a specific section in the ini file. 
            </summary> 
            <param name="sectionName"> 
            The name of the section to read key names from. 
            </param> 
            <returns>An array of key names.</returns> 
            <remarks> 
            The total length of all key names in the section must be 
            less than 32KB in length. 
            </remarks> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> is a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.GetSectionNames">
            <summary> 
            Gets the names of all sections in the ini file. 
            </summary> 
            <returns>An array of section names.</returns> 
            <remarks> 
            The total length of all section names in the section must be 
            less than 32KB in length. 
            </remarks> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.ConvertNullSeperatedStringToStringArray(System.IntPtr,System.Int32)">
            <summary> 
            Converts the null seperated pointer to a string into a string array. 
            </summary> 
            <param name="ptr">A pointer to string data.</param> 
            <param name="valLength"> 
            Length of the data pointed to by <paramref name="ptr"/>. 
            </param> 
            <returns> 
            An array of strings; one for each null found in the array of characters pointed 
            at by <paramref name="ptr"/>. 
            </returns> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.WriteValueInternal(System.String,System.String,System.String)">
            <summary> 
            Writes a <see cref="T:System.String"/> value to the ini file. 
            </summary> 
            <param name="sectionName">The name of the section to write to .</param> 
            <param name="keyName">The name of the key to write to.</param> 
            <param name="value">The string value to write</param> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            The write failed. 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.WriteValue(System.String,System.String,System.String)">
            <summary> 
            Writes a <see cref="T:System.String"/> value to the ini file. 
            </summary> 
            <param name="sectionName">The name of the section to write to .</param> 
            <param name="keyName">The name of the key to write to.</param> 
            <param name="value">The string value to write</param> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            The write failed. 
            </exception> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> or 
            <paramref name="value"/>  are a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.WriteValue(System.String,System.String,System.Int16)">
            <summary> 
            Writes an <see cref="T:System.Int16"/> value to the ini file. 
            </summary> 
            <param name="sectionName">The name of the section to write to .</param> 
            <param name="keyName">The name of the key to write to.</param> 
            <param name="value">The value to write</param> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            The write failed. 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.WriteValue(System.String,System.String,System.Int32)">
            <summary> 
            Writes an <see cref="T:System.Int32"/> value to the ini file. 
            </summary> 
            <param name="sectionName">The name of the section to write to .</param> 
            <param name="keyName">The name of the key to write to.</param> 
            <param name="value">The value to write</param> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            The write failed. 
            </exception> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.WriteValue(System.String,System.String,System.Single)">
            <summary> 
            Writes an <see cref="T:System.Single"/> value to the ini file. 
            </summary> 
            <param name="sectionName">The name of the section to write to .</param> 
            <param name="keyName">The name of the key to write to.</param> 
            <param name="value">The value to write</param> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            The write failed. 
            </exception> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.WriteValue(System.String,System.String,System.Double)">
            <summary> 
            Writes an <see cref="T:System.Double"/> value to the ini file. 
            </summary> 
            <param name="sectionName">The name of the section to write to .</param> 
            <param name="keyName">The name of the key to write to.</param> 
            <param name="value">The value to write</param> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            The write failed. 
            </exception> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.DeleteKey(System.String,System.String)">
            <summary> 
            Deletes the specified key from the specified section. 
            </summary> 
            <param name="sectionName"> 
            Name of the section to remove the key from. 
            </param> 
            <param name="keyName"> 
            Name of the key to remove. 
            </param> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:EC5.Utility.IO.IniFile.DeleteSection(System.String)">
            <summary> 
            Deletes a section from the ini file. 
            </summary> 
            <param name="sectionName"> 
            Name of the section to delete. 
            </param> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> is a null reference (Nothing in VB) 
            </exception> 
        </member>
        <member name="F:EC5.Utility.JsonQuotationMark.SingleQuotes">
            <summary>
            单引号
            </summary>
        </member>
        <member name="F:EC5.Utility.JsonQuotationMark.DoubleQuote">
            <summary>
            双引号
            </summary>
        </member>
        <member name="T:EC5.Utility.JsonUtil">
            <summary>
             Json 格式化
            </summary>
        </member>
        <member name="M:EC5.Utility.JsonUtil.ToJson(System.String,EC5.Utility.JsonQuotationMark)">
            <summary>
            字符串转换为 json 数据;
            默认左右两边是用双引号括起来的
            </summary>
            <param name="s"></param>
            <param name="qm">括号</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.JsonUtil.ToJson(System.String)">
            <summary>
            字符串转换为 json 数据;
            默认左右两边是用双引号括起来的
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.JsonUtil.ToJson(System.Collections.IList)">
            <summary>
            输出 json 格式
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.JsonUtil.ToJson(System.Collections.IList,EC5.Utility.JsonQuotationMark)">
            <summary>
            输出 json 格式
            </summary>
            <param name="values"></param>
            <param name="mark"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.KeyValueStringCollection">
            <summary>
            Key Value 字符串集合类 
            </summary>
        </member>
        <member name="T:EC5.Utility.KeyValueString">
            <summary>
            字符串的键值对;
            例: abc= 12345
            </summary>
        </member>
        <member name="F:EC5.Utility.KeyValueString.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:EC5.Utility.KeyValueString.#ctor(System.String,System.String)">
            <summary>
            (构造函数)字符串的键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:EC5.Utility.KeyValueString.IsEmpty">
            <summary>
            判断是否为空对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:EC5.Utility.KeyValueString.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:EC5.Utility.KeyValueString.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:EC5.Utility.KeyValueString.Separator">
            <summary>
            分割符号
            </summary>
        </member>
        <member name="M:EC5.Utility.KeyValueString.ToString">
            <summary>
            输出字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.KeyValueString.Parse(System.String)">
            <summary>
            解析为键值对象
            </summary>
            <param name="ruleText">字符串规则, 例如:  abc=123</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.KeyValueString.Parse(System.String,System.String)">
            <summary>
            解析为键值对象
            </summary>
            <param name="ruleText">字符串规则, 例如:  abc=123</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.KeyValueString.TryParse(System.String,EC5.Utility.KeyValueString@)">
            <summary>
            测试是否能转换
            </summary>
            <param name="ruleText"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.KeyValueString.TryParse(System.String,System.String,EC5.Utility.KeyValueString@)">
            <summary>
            测试是否能转换
            </summary>
            <param name="ruleText"></param>
            <param name="separator"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.PointD">
            <summary>
            
            </summary>
        </member>
        <member name="T:EC5.Utility.MapUtil">
            <summary>
            地图助手
            </summary>
        </member>
        <member name="F:EC5.Utility.MapUtil.POLAR_RADIUS">
            <summary>
            极半径
            </summary>
        </member>
        <member name="F:EC5.Utility.MapUtil.EARTH_RADIUS">
            <summary>
            赤道半径
            </summary>
        </member>
        <member name="F:EC5.Utility.MapUtil.EE">
            <summary>
            经纬度纠偏
            </summary>
        </member>
        <member name="M:EC5.Utility.MapUtil.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            给定的经度1，纬度1；经度2，纬度2. 计算2个经纬度之间的距离。
            </summary>
            <param name="lat1">经度1</param>
            <param name="lon1">纬度1</param>
            <param name="lat2">经度2</param>
            <param name="lon2">纬度2</param>
            <returns>距离（公里、千米）</returns>
        </member>
        <member name="M:EC5.Utility.MapUtil.GetSquareForCneter(System.Double,System.Double,System.Double)">
            <summary>
            获取正方形的左上角坐标,和有右下角坐标.
            </summary>
            <param name="centerLon">经度</param>
            <param name="centerLat">纬度</param>
            <param name="raidus">距离(米)</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.MapUtil.transform(System.Double,System.Double)">
            <summary>
            专门针对高德,的坐标修正函数
            </summary>
            <param name="wgLat"></param>
            <param name="wgLon"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.MapUtil.GetAngle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            获取角度
            </summary>
            <param name="lat_a"></param>
            <param name="lng_a"></param>
            <param name="lat_b"></param>
            <param name="lng_b"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.MapUtil.DegreesToRadians(System.Double)">
            <summary>
            将角度换算为弧度。
            </summary>
            <param name="degrees">角度</param>
            <returns>弧度</returns>
        </member>
        <member name="M:EC5.Utility.MapUtil.GetPoint(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            已知点A经纬度，根据B点据A点的距离，和方位，求B点的经纬度
            </summary>
            <param name="lng">经度</param>
            <param name="lat">纬度</param>
            <param name="distance">B点到A点的距离 </param>
            <param name="angle">B点相对于A点的方位，12点钟方向为零度，角度顺时针增加</param>
            <returns>B点的经纬度坐标</returns>
        </member>
        <member name="F:EC5.Utility.GeographicPoint.EARTH_RADIUS">
            <summary>
            赤道半径
            </summary>
        </member>
        <member name="F:EC5.Utility.GeographicPoint.POLAR_RADIUS">
            <summary>
            极半径
            </summary>
        </member>
        <member name="M:EC5.Utility.GeographicPoint.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:EC5.Utility.GeographicPoint.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="lat">维度</param>
            <param name="lon">经度</param>
        </member>
        <member name="P:EC5.Utility.GeographicPoint.Latitude">
            <summary>
            纬度
            </summary>
        </member>
        <member name="P:EC5.Utility.GeographicPoint.Longitude">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:EC5.Utility.GeographicPoint.RadianOfLatitude">
            <summary>
            纬度的弧度
            </summary>
        </member>
        <member name="P:EC5.Utility.GeographicPoint.RadianOfLongitude">
            <summary>
            经度的弧度
            </summary>
        </member>
        <member name="P:EC5.Utility.GeographicPoint.Ec">
            <summary>
            暂时不知意义，请大神们帮助
            </summary>
        </member>
        <member name="P:EC5.Utility.GeographicPoint.Ed">
            <summary>
            暂时不知意义，请大神们帮助
            </summary>
        </member>
        <member name="T:EC5.Utility.MathUtil">
            <summary>
            数学扩展库
            </summary>
        </member>
        <member name="T:EC5.Utility.MD5Digit">
            <summary>
            MD5 位数
            </summary>
        </member>
        <member name="F:EC5.Utility.MD5Digit.x16">
            <summary>
            16位
            </summary>
        </member>
        <member name="F:EC5.Utility.MD5Digit.x32">
            <summary>
            32位
            </summary>
        </member>
        <member name="T:EC5.Utility.Md5Util">
            <summary>
            MD5 助手类
            </summary>
        </member>
        <member name="M:EC5.Utility.Md5Util.FormString(System.String,EC5.Utility.MD5Digit)">
            <summary>
            根据字符串转化为 md5
            </summary>
            <param name="input">输入字符串</param>
            <param name="digit">输出的位数.16位或32位. 默认输出都是 32位</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.Md5Util.FormFile(System.String)">
            <summary>
            获取文件的 MD5 序列码
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.Md5Util.FormFile(System.String,System.String)">
            <summary>
            获取文件的 MD5 序列码
            </summary>
            <param name="path"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.Md5Util.FormString(System.String)">
            <summary>
            格式化 MD5 序列码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.Md5Util.FormString(System.String,System.String)">
            <summary>
            获取字符串的 MD5 编码
            </summary>
            <param name="input"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.Md5Util.FormBytes(System.Byte[],System.String)">
            <summary>
            获取字节数组的 MD5 编码
            </summary>
            <param name="input"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.Md5Util.ToString(System.String,System.String)">
            <summary>
            格式化显示
            </summary>
            <param name="input">输入字符串</param>
            <param name="format">N: 或 D:</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.Md5Util.Foramt(System.Byte[],System.String)">
            <summary>
            格式化显示
            </summary>
            <param name="bs"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.Md5Util.ToString(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.NumberUtil">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:EC5.Utility.NumberUtil.FILE_SIZE_UNIT">
            <summary>
            文件尺寸单位名称
            </summary>
        </member>
        <member name="F:EC5.Utility.NumberUtil.DISTANCE_UNIT_ZN">
            <summary>
            距离
            </summary>
        </member>
        <member name="F:EC5.Utility.NumberUtil.DISTANCE_UNIT_EN">
            <summary>
            距离
            </summary>
        </member>
        <member name="M:EC5.Utility.NumberUtil.FormatFileSize(System.Int64,System.String)">
            <summary>
            格式化输出文件尺寸
            </summary>
            <param name="fileSize"></param>
            <param name="numFormat">格式化显示.例如(0 或 0.00)</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.NumberUtil.FormatDistance(System.Double)">
            <summary>
            格式距离
            </summary>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.ObjectUtil">
            <summary>
            对象助手类
            </summary>
        </member>
        <member name="M:EC5.Utility.ObjectUtil.GetProperty(System.Object,System.String)">
            <summary>
            获取对象的属性
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名称</param>
            <returns>属性</returns>
        </member>
        <member name="M:EC5.Utility.ObjectUtil.GetPropertyValue(System.Object,System.String)">
            <summary>
            获取属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ObjectUtil.Clone(System.Object)">
            <summary>
            克隆对象
            </summary>
            <param name="srcObj"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.QuarterUtil">
            <summary>
            日期季度
            </summary>
        </member>
        <member name="M:EC5.Utility.QuarterUtil.Start(System.Int32,System.Int32)">
            <summary>
            获取季度的起始时间
            </summary>
            <param name="year"></param>
            <param name="jidu">季度, 从 0-3 </param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.QuarterUtil.End(System.Int32,System.Int32)">
            <summary>
            获取季度的结束时间
            </summary>
            <param name="year"></param>
            <param name="jidu">季度, 从 0-3 </param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.QuarterUtil.Start(System.Int32)">
            <summary>
            
            </summary>
            <param name="jidu">季度, 从 0-3 </param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.QuarterUtil.End(System.Int32)">
            <summary>
            
            </summary>
            <param name="jidu">季度, 从 0-3 </param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.QuarterUtil.Start">
            <summary>
            当前季度开始
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.QuarterUtil.End">
            <summary>
            当前季度结束日期
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.QuarterUtil.GetIndex(System.Int32)">
            <summary>
            获取季度的值
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.QuarterUtil.CurIndex">
            <summary>
            当前季度的索引
            </summary>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.RandomString">
            <summary>
            随机字符串管理
            </summary>
        </member>
        <member name="T:EC5.Utility.RandomUtil">
            <summary>
            随机数助手
            </summary>
        </member>
        <member name="M:EC5.Utility.RandomUtil.Next(System.Int32,System.Int32)">
            <summary>
            下一随机数
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.RandomUtil.Next(System.Int32)">
            <summary>
            下一随机数
            </summary>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.RandomUtil.Next">
            <summary>
            下一随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.RandomUtil.NextString(System.Int32,System.String)">
            <summary>
            随机字符串
            </summary>
            <param name="maxLen"></param>
            <param name="rule">A-Za-z0-9</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.RandomUtil.NextString(System.Int32,System.Int32,System.String)">
            <summary>
            随机字符串
            </summary>
            <param name="minLen"></param>
            <param name="maxLen"></param>
            <param name="rule">A-Za-z0-9</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.RandomUtil.NextString(System.String[])">
            <summary>
            从数组中随机抽取一条
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.StringUtil">
            <summary>
            字符串辅助类
            </summary>
        </member>
        <member name="F:EC5.Utility.StringUtil.Space">
            <summary>
            空格，代表一个半角的空格字符串
            </summary>
        </member>
        <member name="M:EC5.Utility.StringUtil.ToIntList(System.String)">
            <summary>
            字符串 "1,3,4,5,..." 转换为 Int 数组
            </summary>
            <param name="strValues"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ToInt64List(System.String)">
            <summary>
            字符串 "1,3,4,5,..." 转为 Int 数组.
            </summary>
            <param name="strValues"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ToDecimalList(System.String)">
            <summary>
            字符串 "1,3,4,5,..." 转为 Decimal 数组.
            </summary>
            <param name="strValues"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ToByteList(System.String)">
            <summary>
            字符串 "1,3,4,5,..." 转为 byte 数组.
            </summary>
            <param name="strValues"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ToString(System.Collections.IList)">
            <summary>
            把数组转换为 字符串..
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.Sub(System.String,System.Int32,System.String)">
            <summary>
            从此实例检索子字符串。
            子字符串从指定的字符位置开始且具有指定的长度。
            </summary>
            <param name="text"></param>
            <param name="chatCount"></param>
            <param name="ellipsis"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.Sub(System.String,System.Int32)">
            <summary>
            从此实例检索子字符串。
            子字符串从指定的字符位置开始且具有指定的长度。
            </summary>
            <param name="text"></param>
            <param name="chatCount"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ToDateTime(System.String,System.DateTime)">
            <summary>
            转换为 DateTime
            </summary>
            <param name="vStr"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ToDateTime(System.String)">
            <summary>
             转换为 DateTime
            </summary>
            <param name="vStr"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ToBool(System.String)">
            <summary>
            转换为 Bool 值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ToBool(System.String,System.String,System.String)">
            <summary>
            转换为 Bool 值
            </summary>
            <param name="vStr">字符串值</param>
            <param name="trueValue">true 的字符串值</param>
            <param name="falseValue">false 的字符串值</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ToBool(System.String,System.Boolean,System.String,System.String)">
            <summary>
            转换为 Bool 值
            </summary>
            <param name="vStr">字符串值</param>
            <param name="defaultValue">如果都没对上,</param>
            <param name="trueValue">true 的字符串值</param>
            <param name="falseValue">false 的字符串值</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ToByte(System.String,System.Byte)">
            <summary>
            转换为 Byte 值
            </summary>
            <param name="vStr"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ToUInt64(System.String,System.UInt64)">
            <summary>
            
            </summary>
            <param name="vStr"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.IsDecimal(System.String)">
            <summary>
            判断字符串是否为数字
            </summary>
            <param name="judgeStr"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ToDouble(System.String,System.Double)">
            <summary>
            转换为 Double 类型
            </summary>
            <param name="vStr">字符串</param>
            <param name="defaultValue">转换不成功时候,采用的默认值.</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.TryChangeType(System.String,System.Type)">
            <summary>
            判断是否可以转换数据类型
            </summary>
            <param name="strValue"></param>
            <param name="validateType"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.TryChangeType(System.String,System.Type,System.Boolean)">
            <summary>
            判断是否可以转换数据类型
            </summary>
            <param name="strValue"></param>
            <param name="validateType"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.IsGuid(System.String)">
            <summary>
            判断类型能否转换为 GUID
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ChangeType(System.String,System.Type)">
            <summary>
            把字符转换为其它数据类型
            </summary>
            <param name="strValue">字符串</param>
            <param name="conversionType">数据类型：int,int64,bool,DateTime,decimal,byte,float,double</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ChangeType(System.String,System.String)">
            <summary>
            把字符转换为其它数据类型
            </summary>
            <param name="strValue">字符串</param>
            <param name="conversionTypeStr">数据类型：int,int64,bool,DateTime,decimal,byte,float,double</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ChangeType(System.String,System.Type,System.Object)">
            <summary>
            把字符转换为其它数据类型
            </summary>
            <param name="strValue">字符串</param>
            <param name="conversionType">数据类型：int,int64,bool,DateTime,decimal,byte,float,double</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ChangeType(System.String,System.String,System.Object)">
            <summary>
            把字符转换为其它数据类型
            </summary>
            <param name="strValue">字符串</param>
            <param name="conversionTypeStr">数据类型：int,int64,bool,DateTime,decimal,byte,float,double</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.Split(System.String,System.String[])">
            <summary>
            切割字符串.默认为逗号分隔符
            </summary>
            <param name="str">准备切割的字符串</param>
            <param name="separator">切割符号</param>
            <returns>数组</returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.SplitTrim(System.String,System.String[])">
            <summary>
            切割字符串.默认为逗号分隔符
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.NoBlank(System.String,System.String)">
            <summary>
            获取非空的字符串
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.NoBlank(System.String,System.String,System.String[])">
            <summary>
            获取非空的字符串
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.IsBlank(System.Object)">
            <summary>
            指示指定的字符串是 null、空还是仅由空白字符组成。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.IsBlank(System.String)">
            <summary>
            指示指定的字符串是 null、空还是仅由空白字符组成。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.IsBlank(System.String,System.String)">
            <summary>
            指示指定的字符串是 null、空还是仅由空白字符组成。
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.IsBlank(System.String,System.String,System.String[])">
            <summary>
            指示指定的字符串是 null、空还是仅由空白字符组成。
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.IsNullOrWhiteSpace(System.String)">
            <summary>
            【建议采用（StringUtil.IsBlank）替换。】
            指示指定的字符串是 null、空还是仅由空白字符组成。
            </summary>
            <param name="value">要测试的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.Join(System.String,System.String[],System.Int32)">
            <summary>
            在指定 System.String 数组的每个元素之间串联指定的分隔符 System.String，从而产生单个串联的字符串。
            参数指定要使用的第一个数组元素和元素数。
            </summary>
            <param name="separator"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ChangeType(System.String,System.Data.DbType)">
            <summary>
            把字符转换为其它数据类型
            </summary>
            <param name="strValue"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.ChangeType(System.String,System.Data.DbType,System.Object)">
            <summary>
            把字符转换为其它数据类型
            </summary>
            <param name="strValue"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.EndsWith(System.String,System.String)">
            <summary>
            替换 String 原生的，效率提高 10倍.(不支持大小写)
            </summary>
            <param name="text"></param>
            <param name="endText"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.StartsWith(System.String,System.String)">
            <summary>
            替换 String 原生的，效率提高 10倍.(不支持大小写)
            </summary>
            <param name="text"></param>
            <param name="startText"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.HasBlank(System.String,System.String)">
            <summary>
            存在空白项目
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StringUtil.HasBlank(System.String,System.String,System.String[])">
            <summary>
            存在空白项目
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.StructUtil">
            <summary>
            结构的助手类
            </summary>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Int32)">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Int32,System.Int32)">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Int32,System.Int32,System.Int32)">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Int64)">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Int64,System.Int64)">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Int64,System.Int32,System.Int64)">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Int64,System.Int64,System.Int64,System.Int64[])">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Decimal)">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Decimal,System.Decimal)">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Decimal,System.Decimal,System.Decimal,System.Decimal[])">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Int16)">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Int16,System.Int16)">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Int16,System.Int16,System.Int16)">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.StructUtil.IsZero(System.Int16,System.Int16,System.Int16,System.Int16[])">
            <summary>
            判断是否等于 0
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.TypeUtil.IsInherit(System.Type,System.Type)">
            <summary>
            判断 A 是否继承 B 对象
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.TypeUtil.IsInheritInterface(System.Type,System.String)">
            <summary>
            判断 A 是否继承 B 对象
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.TypeUtil.InitNumberTypes">
            <summary>
            初始化数据类型
            </summary>
        </member>
        <member name="M:EC5.Utility.TypeUtil.IsNumberType(System.Type)">
            <summary>
            判断 Type 是否为数字类型
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.UriInfo">
            <summary>
            URI 信息类
            </summary>
        </member>
        <member name="M:EC5.Utility.UriInfo.#ctor(System.String)">
            <summary>
            URI 信息类
            </summary>
            <param name="uriString"></param>
        </member>
        <member name="F:EC5.Utility.UriInfo.m_QueryItems">
            <summary>
            查询
            </summary>
        </member>
        <member name="P:EC5.Utility.UriInfo.Authority">
            <summary>
            获取服务器的域名系统 (DNS) 主机名或 IP 地址和端口号。
            </summary>
        </member>
        <member name="T:EC5.Utility.EcUriBuilder">
            <summary>
            EasyClick5 URI 构造器
            </summary>
        </member>
        <member name="F:EC5.Utility.EcUriBuilder.m_Querys">
            <summary>
            
            </summary>
        </member>
        <member name="P:EC5.Utility.EcUriBuilder.AbsolutePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:EC5.Utility.EcUriBuilder.Query">
            <summary>
            
            </summary>
        </member>
        <member name="T:EC5.Utility.EcUriQuery">
            <summary>
            
            </summary>
        </member>
        <member name="T:EC5.Utility.ValidateUtil">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:EC5.Utility.ValidateUtil.SqlInput(System.String)">
            <summary>
            验证是否包含 SQL 注入攻击
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ValidateUtil.Email(System.String)">
            <summary>
            验证邮箱
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ValidateUtil.Url(System.String)">
            <summary>
            验证 url
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ValidateUtil.Date(System.String)">
            <summary>
            验证日期
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ValidateUtil.MaxLength(System.String,System.Int32)">
            <summary>
            字符串最大长度
            </summary>
            <param name="value"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ValidateUtil.MinLength(System.String,System.Int32)">
            <summary>
            字符串最小长度
            </summary>
            <param name="value"></param>
            <param name="minlength"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ValidateUtil.Max(System.String,System.Decimal)">
            <summary>
            最大值
            </summary>
            <param name="value"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ValidateUtil.Min(System.String,System.Decimal)">
            <summary>
            最小值
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ValidateUtil.RangeLength(System.String,System.Decimal[])">
            <summary>
            请输入一个长度介于 {0} 和 {1} 之间的字符串
            </summary>
            <param name="value"></param>
            <param name="rangeLength"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ValidateUtil.Range(System.String,System.Decimal[])">
            <summary>
            请输入一个介于 {0} 和 {1} 之间的值
            </summary>
            <param name="value"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ValidateUtil.Regex(System.String,System.String)">
            <summary>
            正则表达式验证
            </summary>
            <param name="value"></param>
            <param name="elem"></param>
            <param name="regex"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.ValidateUtil.HanziCoding(System.String)">
            <summary>
            验证汉字编码
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EC5.Utility.VideUtil">
            <summary>
            视频公共类
            </summary>
        </member>
        <member name="M:EC5.Utility.VideUtil.IsVide(System.String)">
            <summary>
            判断是否为视频文件
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.VideUtil.IsAudio(System.String)">
            <summary>
            判断文件是否为音频文件
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.GetAttrDict(System.Xml.XmlNode)">
            <summary>
            获取节点属性
            </summary>
            <param name="xNode"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.RemoveAttr(System.Xml.XmlNode,System.String)">
            <summary>
            删除节点属性
            </summary>
            <param name="xNode"></param>
            <param name="attrName"></param>
        </member>
        <member name="M:EC5.Utility.XmlUtil.SetAttrValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            设置节点属性值
            </summary>
            <param name="xNode"></param>
            <param name="attrName"></param>
            <param name="value"></param>
        </member>
        <member name="M:EC5.Utility.XmlUtil.SetAttrValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            设置节点属性值
            </summary>
            <param name="xNode"></param>
            <param name="attrName"></param>
            <param name="value"></param>
        </member>
        <member name="M:EC5.Utility.XmlUtil.SetAttrValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            设置节点属性值
            </summary>
            <param name="xNode"></param>
            <param name="attrName"></param>
            <param name="value"></param>
        </member>
        <member name="M:EC5.Utility.XmlUtil.SetAttrValue(System.Xml.XmlNode,System.String,System.Int64)">
            <summary>
            设置节点属性值
            </summary>
            <param name="xNode"></param>
            <param name="attrName"></param>
            <param name="value"></param>
        </member>
        <member name="M:EC5.Utility.XmlUtil.SetAttrValue(System.Xml.XmlNode,System.String,System.DateTime)">
            <summary>
            设置节点属性值
            </summary>
            <param name="xNode"></param>
            <param name="attrName"></param>
            <param name="value"></param>
        </member>
        <member name="M:EC5.Utility.XmlUtil.GetAttrValue(System.Xml.XmlNode,System.String)">
            <summary>
            获取节点属性值
            </summary>
            <param name="xNode"></param>
            <param name="attrName"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.GetAttrValue``1(System.Xml.XmlNode,System.String,``0)">
            <summary>
            获取节点属性值
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="xNode"></param>
            <param name="attrName"></param>
            <param name="emptyValue"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.GetAttrValue``1(System.Xml.XmlNode,System.String)">
            <summary>
            获取节点属性值
            </summary>
            <typeparam name="ValueT"></typeparam>
            <param name="xNode"></param>
            <param name="attrName"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.GetAttrValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            获取节点属性值
            </summary>
            <param name="xNode"></param>
            <param name="attrName"></param>
            <param name="emptyValue"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.Copy(System.Object,System.Xml.XmlNode)">
            <summary>
            拷贝节点
            </summary>
            <param name="fromObj">实体对象</param>
            <param name="toXNode">xml 节点</param>
        </member>
        <member name="M:EC5.Utility.XmlUtil.Copy(System.Xml.XmlNode,System.Object)">
            <summary>
            拷贝节点
            </summary>
            <param name="formXNode"></param>
            <param name="toObj"></param>
        </member>
        <member name="M:EC5.Utility.XmlUtil.SetObjectAttr(System.Xml.XmlNode,System.Object)">
            <summary>
            [作废] 采用 Copy
            </summary>
            <param name="xNode"></param>
            <param name="obj"></param>
        </member>
        <member name="M:EC5.Utility.XmlUtil.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.Deserialize``1(System.String,System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <param name="rootElementName">根元素名称</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.Deserialize``1(System.Byte[],System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlData"></param>
            <param name="rootElementName">根元素名称</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlData"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.Deserialize``1(System.IO.Stream,System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.SerializeXmlDoc(System.Object)">
            <summary>
            序列化为 Xml 文档
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.Serialize(System.Object,System.Boolean)">
            <summary>
            序列化
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.Serialize(System.Object,System.Boolean,System.Text.Encoding)">
            <summary>
            序列化
            </summary>
            <param name="obj"></param>
            <param name="deleteNamespace">删除命名空间</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:EC5.Utility.XmlUtil.RemoveFileTag_UTF8(System.Byte[])">
            <summary>
            移除 UTF8 的文件头标记
            </summary>
        </member>
        <member name="M:EC5.Utility.XmlUtil.SaveXmlFile(System.String,System.Object)">
            <summary>
            序列化后保存
            </summary>
            <param name="filename"></param>
            <param name="obj"></param>
        </member>
        <member name="M:EC5.Utility.XmlUtil.SaveXmlFile(System.String,System.Object,System.Text.Encoding)">
            <summary>
            序列化后保存
            </summary>
            <param name="filename"></param>
            <param name="obj"></param>
            <param name="encoding">文件编码</param>
        </member>
        <member name="M:EC5.Utility.XmlUtil.SaveXmlFile(System.String,System.Object,System.Boolean,System.Text.Encoding)">
            <summary>
            序列化后保存
            </summary>
            <param name="filename"></param>
            <param name="obj"></param>
            <param name="encoding">文件编码</param>
        </member>
        <member name="M:EC5.Utility.XmlUtil.SaveXmlFile(System.String,System.Object,System.Boolean,System.Boolean,System.Text.Encoding)">
            <summary>
            序列化后保存
            </summary>
            <param name="filename"></param>
            <param name="obj"></param>
            <param name="deleteNamespace">删除命名空间</param>
            <param name="autoCloseElem">自动闭合元素</param>
            <param name="encoding">文件编码</param>
        </member>
        <member name="M:EC5.Utility.XmlUtil.OpenXmlFile``1(System.String)">
            <summary>
            打开 XML 的序列化文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <returns></returns>
        </member>
    </members>
</doc>
